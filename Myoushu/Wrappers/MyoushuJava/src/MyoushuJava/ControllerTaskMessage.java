/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package MyoushuJava;

public class ControllerTaskMessage extends Message {
  private long swigCPtr;

  public ControllerTaskMessage(long cPtr, boolean cMemoryOwn) {
    super(MyoushuJNI.SWIGControllerTaskMessageUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(ControllerTaskMessage obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        MyoushuJNI.delete_ControllerTaskMessage(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public ControllerTaskMessage() {
    this(MyoushuJNI.new_ControllerTaskMessage__SWIG_0(), true);
  }

  public ControllerTaskMessage(ControllerTaskMessage.ControllerTaskMessageType messageType, Controller controller) {
    this(MyoushuJNI.new_ControllerTaskMessage__SWIG_1(messageType.swigValue(), Controller.getCPtr(controller), controller), true);
  }

  public String getClassName() {
    return MyoushuJNI.ControllerTaskMessage_getClassName(swigCPtr, this);
  }

  public void setMessageType(ControllerTaskMessage.ControllerTaskMessageType messageType) {
    MyoushuJNI.ControllerTaskMessage_setMessageType(swigCPtr, this, messageType.swigValue());
  }

  public ControllerTaskMessage.ControllerTaskMessageType getMessageType() {
    return ControllerTaskMessage.ControllerTaskMessageType.swigToEnum(MyoushuJNI.ControllerTaskMessage_getMessageType(swigCPtr, this));
  }

  public void setController(Controller controller) {
    MyoushuJNI.ControllerTaskMessage_setController(swigCPtr, this, Controller.getCPtr(controller), controller);
  }

  public Controller getController() {
    long cPtr = MyoushuJNI.ControllerTaskMessage_getController__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new Controller(cPtr, false);
  }

  public void clear() {
    MyoushuJNI.ControllerTaskMessage_clear(swigCPtr, this);
  }

  public enum ControllerTaskMessageType {
    CTM_ADD,
    CTM_REMOVE,
    CTM_UNKNOWN;

    public final int swigValue() {
      return swigValue;
    }

    public static ControllerTaskMessageType swigToEnum(int swigValue) {
      ControllerTaskMessageType[] swigValues = ControllerTaskMessageType.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (ControllerTaskMessageType swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + ControllerTaskMessageType.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private ControllerTaskMessageType() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private ControllerTaskMessageType(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private ControllerTaskMessageType(ControllerTaskMessageType swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
