/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package MyoushuJava;

public class Exception {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  public Exception(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(Exception obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        MyoushuJNI.delete_Exception(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public Exception() {
    this(MyoushuJNI.new_Exception__SWIG_0(), true);
  }

  public Exception(Exception other) {
    this(MyoushuJNI.new_Exception__SWIG_1(Exception.getCPtr(other), other), true);
  }

  public Exception(Exception.ExceptionType type, String msg) {
    this(MyoushuJNI.new_Exception__SWIG_2(type.swigValue(), msg), true);
  }

  public String getMsg() {
    return MyoushuJNI.Exception_getMsg(swigCPtr, this);
  }

  public Exception.ExceptionType getExceptionType() {
    return Exception.ExceptionType.swigToEnum(MyoushuJNI.Exception_getExceptionType(swigCPtr, this));
  }

  public String what() {
    return MyoushuJNI.Exception_what(swigCPtr, this);
  }

  public enum ExceptionType {
    E_GENERAL_EXCEPTION,
    E_STD_EXCEPTION,
    E_OGRE_EXCEPTION,
    E_POCO_EXCEPTION,
    E_OIS_EXCEPTION,
    E_MYGUI_EXCEPTION,
    E_LUA_ERROR,
    E_NULL_POINTER,
    E_FILE_NOT_FOUND,
    E_FILE_NOT_OPEN,
    E_ENUM_TYPE_UNKNOWN,
    E_UNEXPECTED_TYPE,
    E_INVALID_PARAMETERS,
    E_INDEX_OUT_OF_BOUNDS,
    E_NO_SUCH_ELEMENT,
    E_CAST_EXCEPTION,
    E_BUFFER_TOO_SMALL,
    E_UNIMPLEMENTED,
    E_DEPRECATED,
    E_UNKNOWN_HOST,
    E_UNKNOWN_ERROR,
    E_PARSE_ERROR;

    public final int swigValue() {
      return swigValue;
    }

    public static ExceptionType swigToEnum(int swigValue) {
      ExceptionType[] swigValues = ExceptionType.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (ExceptionType swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + ExceptionType.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private ExceptionType() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private ExceptionType(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private ExceptionType(ExceptionType swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
