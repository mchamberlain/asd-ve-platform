/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package MyoushuJava;

public class Task extends NamedObject_Task {
  private long swigCPtr;

  public Task(long cPtr, boolean cMemoryOwn) {
    super(MyoushuJNI.SWIGTaskUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(Task obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      MyoushuJNI.delete_Task(swigCPtr);
    }
    swigCPtr = 0;
    super.delete();
  }

  public String getClassName() {
    return MyoushuJNI.Task_getClassName(swigCPtr, this);
  }

  public int getPriority() {
    return MyoushuJNI.Task_getPriority(swigCPtr, this);
  }

  public long getExecutionInterval() {
    return MyoushuJNI.Task_getExecutionInterval(swigCPtr, this);
  }

  public long getIterationLimit() {
    return MyoushuJNI.Task_getIterationLimit(swigCPtr, this);
  }

  public Task.TaskState getState() {
    return Task.TaskState.swigToEnum(MyoushuJNI.Task_getState(swigCPtr, this));
  }

  public long getTimeLastExecuted() {
    return MyoushuJNI.Task_getTimeLastExecuted(swigCPtr, this);
  }

  public void setTimeLastExecuted(long timeStamp) {
    MyoushuJNI.Task_setTimeLastExecuted(swigCPtr, this, timeStamp);
  }

  public void setState(Task.TaskState state) {
    MyoushuJNI.Task_setState(swigCPtr, this, state.swigValue());
  }

  public void init() {
    MyoushuJNI.Task_init(swigCPtr, this);
  }

  public void suspend() {
    MyoushuJNI.Task_suspend(swigCPtr, this);
  }

  public void execute(long timeDelta) {
    MyoushuJNI.Task_execute(swigCPtr, this, timeDelta);
  }

  public void kill() {
    MyoushuJNI.Task_kill(swigCPtr, this);
  }

  public enum TaskState {
    TS_CREATED,
    TS_INITIALIZED,
    TS_RUNNING,
    TS_SUSPENDED,
    TS_KILLED;

    public final int swigValue() {
      return swigValue;
    }

    public static TaskState swigToEnum(int swigValue) {
      TaskState[] swigValues = TaskState.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (TaskState swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + TaskState.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private TaskState() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private TaskState(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private TaskState(TaskState swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
