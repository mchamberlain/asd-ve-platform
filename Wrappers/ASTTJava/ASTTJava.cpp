/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.0
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


	// To solve std::max and std::min issues with MSVC
	#define NOMINMAX
	
	#ifdef SWIGLUA
	// Ensure that the ASTTLua.h file is not included with the ASTTLua.cpp file
	#	define ASTT_LUA_H
	#endif
	
	#include <string>
	#include <list>
	#include <map>
	#include <vector>
	
	#include "ASTTPlatform.h"
	#include "EducationalQuestion.h"
	#include "EducationalQuestionsCategory.h"
	#include "EducationalQuestionsManager.h"
	#include "XMLCategoryFile.h"
	
	#ifdef SWIGJAVA
	#	include "JavaFunctor.h"
	#endif
	


#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <list>

SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,std::vector< int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< unsigned int >::const_reference std_vector_Sl_unsigned_SS_int_Sg__get(std::vector< unsigned int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__set(std::vector< unsigned int > *self,int i,std::vector< unsigned int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< char >::const_reference std_vector_Sl_char_Sg__get(std::vector< char > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_char_Sg__set(std::vector< char > *self,int i,std::vector< char >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< double >::const_reference std_vector_Sl_double_Sg__get(std::vector< double > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,int i,std::vector< double >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< float >::const_reference std_vector_Sl_float_Sg__get(std::vector< float > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_float_Sg__set(std::vector< float > *self,int i,std::vector< float >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< long >::const_reference std_vector_Sl_long_Sg__get(std::vector< long > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_long_Sg__set(std::vector< long > *self,int i,std::vector< long >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< bool >::const_reference std_vector_Sl_bool_Sg__get(std::vector< bool > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_bool_Sg__set(std::vector< bool > *self,int i,std::vector< bool >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1VectorInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< int > *)new std::vector< int >();
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1VectorInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< int >::size_type arg1 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< int >::size_type)jarg1; 
  result = (std::vector< int > *)new std::vector< int >(arg1);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_VectorInt_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_VectorInt_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorInt_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_ASTTJava_ASTTJNI_VectorInt_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = (bool)((std::vector< int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorInt_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorInt_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_ASTTJava_ASTTJNI_VectorInt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorInt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_delete_1VectorInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1VectorUInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >();
  *(std::vector< unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1VectorUInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< unsigned int >::size_type arg1 ;
  std::vector< unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< unsigned int >::size_type)jarg1; 
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >(arg1);
  *(std::vector< unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_VectorUInt_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  result = ((std::vector< unsigned int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_VectorUInt_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  result = ((std::vector< unsigned int > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorUInt_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  arg2 = (std::vector< unsigned int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_ASTTJava_ASTTJNI_VectorUInt_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  result = (bool)((std::vector< unsigned int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorUInt_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorUInt_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::value_type *arg2 = 0 ;
  std::vector< unsigned int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  temp2 = (std::vector< unsigned int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< unsigned int >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_VectorUInt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  std::vector< unsigned int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned int >::value_type *) &std_vector_Sl_unsigned_SS_int_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorUInt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  std::vector< unsigned int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< unsigned int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_unsigned_SS_int_Sg__set(arg1,arg2,(unsigned int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_delete_1VectorUInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1VectorChar_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< char > *)new std::vector< char >();
  *(std::vector< char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1VectorChar_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< char >::size_type arg1 ;
  std::vector< char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< char >::size_type)jarg1; 
  result = (std::vector< char > *)new std::vector< char >(arg1);
  *(std::vector< char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_VectorChar_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  result = ((std::vector< char > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_VectorChar_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  result = ((std::vector< char > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorChar_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = (std::vector< char >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_ASTTJava_ASTTJNI_VectorChar_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  result = (bool)((std::vector< char > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorChar_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorChar_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::value_type *arg2 = 0 ;
  std::vector< char >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  temp2 = (std::vector< char >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< char >::value_type const &)*arg2);
}


SWIGEXPORT jchar JNICALL Java_ASTTJava_ASTTJNI_VectorChar_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jchar jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< char >::value_type *) &std_vector_Sl_char_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jchar)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorChar_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jchar jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char >::value_type *arg3 = 0 ;
  std::vector< char >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< char >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_char_Sg__set(arg1,arg2,(char const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_delete_1VectorChar(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< char > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1VectorDouble_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< double > *)new std::vector< double >();
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1VectorDouble_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< double >::size_type arg1 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< double >::size_type)jarg1; 
  result = (std::vector< double > *)new std::vector< double >(arg1);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_VectorDouble_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = ((std::vector< double > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_VectorDouble_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = ((std::vector< double > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorDouble_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (std::vector< double >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_ASTTJava_ASTTJNI_VectorDouble_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = (bool)((std::vector< double > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorDouble_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorDouble_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  std::vector< double >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  temp2 = (std::vector< double >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
}


SWIGEXPORT jdouble JNICALL Java_ASTTJava_ASTTJNI_VectorDouble_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jdouble)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorDouble_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  std::vector< double >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< double >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__set(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_delete_1VectorDouble(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< double > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1VectorFloat_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< float > *)new std::vector< float >();
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1VectorFloat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< float >::size_type arg1 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< float >::size_type)jarg1; 
  result = (std::vector< float > *)new std::vector< float >(arg1);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_VectorFloat_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  result = ((std::vector< float > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_VectorFloat_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  result = ((std::vector< float > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorFloat_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = (std::vector< float >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_ASTTJava_ASTTJNI_VectorFloat_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  result = (bool)((std::vector< float > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorFloat_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorFloat_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::value_type *arg2 = 0 ;
  std::vector< float >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  temp2 = (std::vector< float >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< float >::value_type const &)*arg2);
}


SWIGEXPORT jfloat JNICALL Java_ASTTJava_ASTTJNI_VectorFloat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< float >::value_type *) &std_vector_Sl_float_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jfloat)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorFloat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  std::vector< float >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< float >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_float_Sg__set(arg1,arg2,(float const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_delete_1VectorFloat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< float > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1VectorLong_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< long > *)new std::vector< long >();
  *(std::vector< long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1VectorLong_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< long >::size_type arg1 ;
  std::vector< long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< long >::size_type)jarg1; 
  result = (std::vector< long > *)new std::vector< long >(arg1);
  *(std::vector< long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_VectorLong_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  result = ((std::vector< long > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_VectorLong_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  result = ((std::vector< long > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorLong_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  arg2 = (std::vector< long >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_ASTTJava_ASTTJNI_VectorLong_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  result = (bool)((std::vector< long > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorLong_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorLong_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::value_type *arg2 = 0 ;
  std::vector< long >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  temp2 = (std::vector< long >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< long >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_ASTTJava_ASTTJNI_VectorLong_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  int arg2 ;
  std::vector< long >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< long >::value_type *) &std_vector_Sl_long_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorLong_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  int arg2 ;
  std::vector< long >::value_type *arg3 = 0 ;
  std::vector< long >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< long >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_long_Sg__set(arg1,arg2,(long const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_delete_1VectorLong(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< long > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1VectorBool_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< bool > *)new std::vector< bool >();
  *(std::vector< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1VectorBool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< bool >::size_type arg1 ;
  std::vector< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< bool >::size_type)jarg1; 
  result = (std::vector< bool > *)new std::vector< bool >(arg1);
  *(std::vector< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_VectorBool_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  result = ((std::vector< bool > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_VectorBool_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  result = ((std::vector< bool > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorBool_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  arg2 = (std::vector< bool >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_ASTTJava_ASTTJNI_VectorBool_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  result = (bool)((std::vector< bool > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorBool_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorBool_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::value_type *arg2 = 0 ;
  std::vector< bool >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< bool >::value_type const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_ASTTJava_ASTTJNI_VectorBool_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  std::vector< bool >::const_reference result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< bool >::const_reference)std_vector_Sl_bool_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorBool_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  std::vector< bool >::value_type *arg3 = 0 ;
  std::vector< bool >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_bool_Sg__set(arg1,arg2,(bool const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_delete_1VectorBool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< bool > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1VectorString_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1VectorString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_VectorString_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_VectorString_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorString_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_ASTTJava_ASTTJNI_VectorString_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorString_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorString_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_ASTTJava_ASTTJNI_VectorString_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_VectorString_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_delete_1VectorString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1ListInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::list< int > *)new std::list< int >();
  *(std::list< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1ListInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< int > *arg1 = 0 ;
  std::list< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< int > const & reference is null");
    return 0;
  } 
  result = (std::list< int > *)new std::list< int >((std::list< int > const &)*arg1);
  *(std::list< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_ListInt_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  result = (unsigned int)((std::list< int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ASTTJava_ASTTJNI_ListInt_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  result = (bool)((std::list< int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_ListInt_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_ListInt_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_ListInt_1pop_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT jint JNICALL Java_ASTTJava_ASTTJNI_ListInt_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  result = (int)((std::list< int > const *)arg1)->front();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ASTTJava_ASTTJNI_ListInt_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  result = (int)((std::list< int > const *)arg1)->back();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_delete_1ListInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1ListUInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::list< unsigned int > *)new std::list< unsigned int >();
  *(std::list< unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1ListUInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< unsigned int > *arg1 = 0 ;
  std::list< unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< unsigned int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< unsigned int > const & reference is null");
    return 0;
  } 
  result = (std::list< unsigned int > *)new std::list< unsigned int >((std::list< unsigned int > const &)*arg1);
  *(std::list< unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_ListUInt_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< unsigned int > *arg1 = (std::list< unsigned int > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< unsigned int > **)&jarg1; 
  result = (unsigned int)((std::list< unsigned int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ASTTJava_ASTTJNI_ListUInt_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< unsigned int > *arg1 = (std::list< unsigned int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< unsigned int > **)&jarg1; 
  result = (bool)((std::list< unsigned int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_ListUInt_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< unsigned int > *arg1 = (std::list< unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< unsigned int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_ListUInt_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::list< unsigned int > *arg1 = (std::list< unsigned int > *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_ListUInt_1pop_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< unsigned int > *arg1 = (std::list< unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< unsigned int > **)&jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_ListUInt_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< unsigned int > *arg1 = (std::list< unsigned int > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< unsigned int > **)&jarg1; 
  result = (unsigned int)((std::list< unsigned int > const *)arg1)->front();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_ListUInt_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< unsigned int > *arg1 = (std::list< unsigned int > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< unsigned int > **)&jarg1; 
  result = (unsigned int)((std::list< unsigned int > const *)arg1)->back();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_delete_1ListUInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< unsigned int > *arg1 = (std::list< unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< unsigned int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1ListChar_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::list< char > *)new std::list< char >();
  *(std::list< char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1ListChar_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< char > *arg1 = 0 ;
  std::list< char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< char > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< char > const & reference is null");
    return 0;
  } 
  result = (std::list< char > *)new std::list< char >((std::list< char > const &)*arg1);
  *(std::list< char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_ListChar_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< char > *arg1 = (std::list< char > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< char > **)&jarg1; 
  result = (unsigned int)((std::list< char > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ASTTJava_ASTTJNI_ListChar_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< char > *arg1 = (std::list< char > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< char > **)&jarg1; 
  result = (bool)((std::list< char > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_ListChar_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< char > *arg1 = (std::list< char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< char > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_ListChar_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  std::list< char > *arg1 = (std::list< char > *) 0 ;
  char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< char > **)&jarg1; 
  arg2 = (char)jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_ListChar_1pop_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< char > *arg1 = (std::list< char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< char > **)&jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT jchar JNICALL Java_ASTTJava_ASTTJNI_ListChar_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  std::list< char > *arg1 = (std::list< char > *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< char > **)&jarg1; 
  result = (char)((std::list< char > const *)arg1)->front();
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jchar JNICALL Java_ASTTJava_ASTTJNI_ListChar_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  std::list< char > *arg1 = (std::list< char > *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< char > **)&jarg1; 
  result = (char)((std::list< char > const *)arg1)->back();
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_delete_1ListChar(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< char > *arg1 = (std::list< char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< char > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1ListDouble_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::list< double > *)new std::list< double >();
  *(std::list< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1ListDouble_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< double > *arg1 = 0 ;
  std::list< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< double > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< double > const & reference is null");
    return 0;
  } 
  result = (std::list< double > *)new std::list< double >((std::list< double > const &)*arg1);
  *(std::list< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_ListDouble_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< double > *arg1 = (std::list< double > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< double > **)&jarg1; 
  result = (unsigned int)((std::list< double > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ASTTJava_ASTTJNI_ListDouble_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< double > *arg1 = (std::list< double > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< double > **)&jarg1; 
  result = (bool)((std::list< double > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_ListDouble_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< double > *arg1 = (std::list< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< double > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_ListDouble_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::list< double > *arg1 = (std::list< double > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< double > **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_ListDouble_1pop_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< double > *arg1 = (std::list< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< double > **)&jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT jdouble JNICALL Java_ASTTJava_ASTTJNI_ListDouble_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  std::list< double > *arg1 = (std::list< double > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< double > **)&jarg1; 
  result = (double)((std::list< double > const *)arg1)->front();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ASTTJava_ASTTJNI_ListDouble_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  std::list< double > *arg1 = (std::list< double > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< double > **)&jarg1; 
  result = (double)((std::list< double > const *)arg1)->back();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_delete_1ListDouble(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< double > *arg1 = (std::list< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< double > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1ListFloat_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::list< float > *)new std::list< float >();
  *(std::list< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1ListFloat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< float > *arg1 = 0 ;
  std::list< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< float > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< float > const & reference is null");
    return 0;
  } 
  result = (std::list< float > *)new std::list< float >((std::list< float > const &)*arg1);
  *(std::list< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_ListFloat_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< float > *arg1 = (std::list< float > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< float > **)&jarg1; 
  result = (unsigned int)((std::list< float > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ASTTJava_ASTTJNI_ListFloat_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< float > *arg1 = (std::list< float > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< float > **)&jarg1; 
  result = (bool)((std::list< float > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_ListFloat_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< float > *arg1 = (std::list< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< float > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_ListFloat_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  std::list< float > *arg1 = (std::list< float > *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< float > **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_ListFloat_1pop_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< float > *arg1 = (std::list< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< float > **)&jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT jfloat JNICALL Java_ASTTJava_ASTTJNI_ListFloat_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  std::list< float > *arg1 = (std::list< float > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< float > **)&jarg1; 
  result = (float)((std::list< float > const *)arg1)->front();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_ASTTJava_ASTTJNI_ListFloat_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  std::list< float > *arg1 = (std::list< float > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< float > **)&jarg1; 
  result = (float)((std::list< float > const *)arg1)->back();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_delete_1ListFloat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< float > *arg1 = (std::list< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< float > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1ListLong_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::list< long > *)new std::list< long >();
  *(std::list< long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1ListLong_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< long > *arg1 = 0 ;
  std::list< long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< long > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< long > const & reference is null");
    return 0;
  } 
  result = (std::list< long > *)new std::list< long >((std::list< long > const &)*arg1);
  *(std::list< long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_ListLong_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< long > *arg1 = (std::list< long > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< long > **)&jarg1; 
  result = (unsigned int)((std::list< long > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ASTTJava_ASTTJNI_ListLong_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< long > *arg1 = (std::list< long > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< long > **)&jarg1; 
  result = (bool)((std::list< long > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_ListLong_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< long > *arg1 = (std::list< long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< long > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_ListLong_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::list< long > *arg1 = (std::list< long > *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< long > **)&jarg1; 
  arg2 = (long)jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_ListLong_1pop_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< long > *arg1 = (std::list< long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< long > **)&jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT jint JNICALL Java_ASTTJava_ASTTJNI_ListLong_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::list< long > *arg1 = (std::list< long > *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< long > **)&jarg1; 
  result = (long)((std::list< long > const *)arg1)->front();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ASTTJava_ASTTJNI_ListLong_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::list< long > *arg1 = (std::list< long > *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< long > **)&jarg1; 
  result = (long)((std::list< long > const *)arg1)->back();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_delete_1ListLong(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< long > *arg1 = (std::list< long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< long > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1ListBool_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::list< bool > *)new std::list< bool >();
  *(std::list< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1ListBool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< bool > *arg1 = 0 ;
  std::list< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< bool > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< bool > const & reference is null");
    return 0;
  } 
  result = (std::list< bool > *)new std::list< bool >((std::list< bool > const &)*arg1);
  *(std::list< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_ListBool_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< bool > *arg1 = (std::list< bool > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< bool > **)&jarg1; 
  result = (unsigned int)((std::list< bool > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ASTTJava_ASTTJNI_ListBool_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< bool > *arg1 = (std::list< bool > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< bool > **)&jarg1; 
  result = (bool)((std::list< bool > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_ListBool_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< bool > *arg1 = (std::list< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< bool > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_ListBool_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  std::list< bool > *arg1 = (std::list< bool > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< bool > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_ListBool_1pop_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< bool > *arg1 = (std::list< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< bool > **)&jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT jboolean JNICALL Java_ASTTJava_ASTTJNI_ListBool_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< bool > *arg1 = (std::list< bool > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< bool > **)&jarg1; 
  result = (bool)((std::list< bool > const *)arg1)->front();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ASTTJava_ASTTJNI_ListBool_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< bool > *arg1 = (std::list< bool > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< bool > **)&jarg1; 
  result = (bool)((std::list< bool > const *)arg1)->back();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_delete_1ListBool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< bool > *arg1 = (std::list< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< bool > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1ListString_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::list< std::string > *)new std::list< std::string >();
  *(std::list< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1ListString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< std::string > *arg1 = 0 ;
  std::list< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > const & reference is null");
    return 0;
  } 
  result = (std::list< std::string > *)new std::list< std::string >((std::list< std::string > const &)*arg1);
  *(std::list< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_ListString_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::string > **)&jarg1; 
  result = (unsigned int)((std::list< std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ASTTJava_ASTTJNI_ListString_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::string > **)&jarg1; 
  result = (bool)((std::list< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_ListString_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_ListString_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back(arg2);
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_ListString_1pop_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::string > **)&jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT jstring JNICALL Java_ASTTJava_ASTTJNI_ListString_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::string > **)&jarg1; 
  result = ((std::list< std::string > const *)arg1)->front();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ASTTJava_ASTTJNI_ListString_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::string > **)&jarg1; 
  result = ((std::list< std::string > const *)arg1)->back();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_delete_1ListString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1Singleton_1EducationalQuestionsManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::Singleton< Educational::EducationalQuestionsManager > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Ogre::Singleton< Educational::EducationalQuestionsManager > *)new Ogre::Singleton< Educational::EducationalQuestionsManager >();
  *(Ogre::Singleton< Educational::EducationalQuestionsManager > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_delete_1Singleton_1EducationalQuestionsManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::Singleton< Educational::EducationalQuestionsManager > *arg1 = (Ogre::Singleton< Educational::EducationalQuestionsManager > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::Singleton< Educational::EducationalQuestionsManager > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_Singleton_1EducationalQuestionsManager_1getSingleton(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Educational::EducationalQuestionsManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Educational::EducationalQuestionsManager *) &Ogre::Singleton< Educational::EducationalQuestionsManager >::SWIGTEMPLATEDISAMBIGUATOR getSingleton();
  *(Educational::EducationalQuestionsManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_Singleton_1EducationalQuestionsManager_1getSingletonPtr(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Educational::EducationalQuestionsManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Educational::EducationalQuestionsManager *)Ogre::Singleton< Educational::EducationalQuestionsManager >::SWIGTEMPLATEDISAMBIGUATOR getSingletonPtr();
  *(Educational::EducationalQuestionsManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ASTTJava_ASTTJNI_NULL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ASTTJava_ASTTJNI_EducationalQuestion_1AC_1UNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Educational::EducationalQuestion::AnswerCondition result;
  
  (void)jenv;
  (void)jcls;
  result = (Educational::EducationalQuestion::AnswerCondition)Educational::EducationalQuestion::AC_UNKNOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1EducationalQuestion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  Educational::EducationalQuestion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (Educational::EducationalQuestion *)new Educational::EducationalQuestion((std::string const &)*arg1);
  *(Educational::EducationalQuestion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1EducationalQuestion_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Educational::EducationalQuestion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Educational::EducationalQuestion *)new Educational::EducationalQuestion();
  *(Educational::EducationalQuestion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_delete_1EducationalQuestion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Educational::EducationalQuestion *arg1 = (Educational::EducationalQuestion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Educational::EducationalQuestion **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_EducationalQuestion_1setDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Educational::EducationalQuestion *arg1 = (Educational::EducationalQuestion *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Educational::EducationalQuestion **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setDescription((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_ASTTJava_ASTTJNI_EducationalQuestion_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Educational::EducationalQuestion *arg1 = (Educational::EducationalQuestion *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Educational::EducationalQuestion **)&jarg1; 
  result = ((Educational::EducationalQuestion const *)arg1)->getDescription();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_EducationalQuestion_1setQuestion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Educational::EducationalQuestion *arg1 = (Educational::EducationalQuestion *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Educational::EducationalQuestion **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setQuestion((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_ASTTJava_ASTTJNI_EducationalQuestion_1getQuestion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Educational::EducationalQuestion *arg1 = (Educational::EducationalQuestion *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Educational::EducationalQuestion **)&jarg1; 
  result = ((Educational::EducationalQuestion const *)arg1)->getQuestion();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_EducationalQuestion_1setAnswerCondition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Educational::EducationalQuestion *arg1 = (Educational::EducationalQuestion *) 0 ;
  Educational::EducationalQuestion::AnswerCondition arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Educational::EducationalQuestion **)&jarg1; 
  arg2 = (Educational::EducationalQuestion::AnswerCondition)jarg2; 
  (arg1)->setAnswerCondition(arg2);
}


SWIGEXPORT jint JNICALL Java_ASTTJava_ASTTJNI_EducationalQuestion_1getAnswerCondition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Educational::EducationalQuestion *arg1 = (Educational::EducationalQuestion *) 0 ;
  Educational::EducationalQuestion::AnswerCondition result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Educational::EducationalQuestion **)&jarg1; 
  result = (Educational::EducationalQuestion::AnswerCondition)((Educational::EducationalQuestion const *)arg1)->getAnswerCondition();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_EducationalQuestion_1setCorrectAnswers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Educational::EducationalQuestion *arg1 = (Educational::EducationalQuestion *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Educational::EducationalQuestion **)&jarg1; 
  arg2 = *(std::list< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > const & reference is null");
    return ;
  } 
  (arg1)->setCorrectAnswers((std::list< std::string > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_EducationalQuestion_1getCorrectAnswers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Educational::EducationalQuestion *arg1 = (Educational::EducationalQuestion *) 0 ;
  std::list< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Educational::EducationalQuestion **)&jarg1; 
  result = ((Educational::EducationalQuestion const *)arg1)->getCorrectAnswers();
  *(std::list< std::string > **)&jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_EducationalQuestion_1setPossibleAnswers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Educational::EducationalQuestion *arg1 = (Educational::EducationalQuestion *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Educational::EducationalQuestion **)&jarg1; 
  arg2 = *(std::list< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > const & reference is null");
    return ;
  } 
  (arg1)->setPossibleAnswers((std::list< std::string > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_EducationalQuestion_1getPossibleAnswers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Educational::EducationalQuestion *arg1 = (Educational::EducationalQuestion *) 0 ;
  std::list< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Educational::EducationalQuestion **)&jarg1; 
  result = ((Educational::EducationalQuestion const *)arg1)->getPossibleAnswers();
  *(std::list< std::string > **)&jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ASTTJava_ASTTJNI_EducationalQuestion_1evaluateAnswer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Educational::EducationalQuestion *arg1 = (Educational::EducationalQuestion *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Educational::EducationalQuestion **)&jarg1; 
  arg2 = *(std::list< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > const & reference is null");
    return 0;
  } 
  result = (bool)((Educational::EducationalQuestion const *)arg1)->evaluateAnswer((std::list< std::string > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1EducationalQuestionsCategory_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  Educational::EducationalQuestionsCategory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (Educational::EducationalQuestionsCategory *)new Educational::EducationalQuestionsCategory((std::string const &)*arg1);
  *(Educational::EducationalQuestionsCategory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1EducationalQuestionsCategory_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Educational::EducationalQuestionsCategory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Educational::EducationalQuestionsCategory *)new Educational::EducationalQuestionsCategory();
  *(Educational::EducationalQuestionsCategory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_delete_1EducationalQuestionsCategory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Educational::EducationalQuestionsCategory *arg1 = (Educational::EducationalQuestionsCategory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Educational::EducationalQuestionsCategory **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_ASTTJava_ASTTJNI_EducationalQuestionsCategory_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Educational::EducationalQuestionsCategory *arg1 = (Educational::EducationalQuestionsCategory *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Educational::EducationalQuestionsCategory **)&jarg1; 
  result = ((Educational::EducationalQuestionsCategory const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_EducationalQuestionsCategory_1make_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Educational::EducationalQuestionsCategory *arg1 = (Educational::EducationalQuestionsCategory *) 0 ;
  std::string *arg2 = 0 ;
  Educational::EducationalQuestion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Educational::EducationalQuestionsCategory **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Educational::EducationalQuestion *)(arg1)->make((std::string const &)*arg2);
  *(Educational::EducationalQuestion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_EducationalQuestionsCategory_1make_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  Educational::EducationalQuestionsCategory *arg1 = (Educational::EducationalQuestionsCategory *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Educational::EducationalQuestion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Educational::EducationalQuestionsCategory **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    result = (Educational::EducationalQuestion *)(arg1)->make((std::string const &)*arg2,(std::string const &)*arg3);
  }
  catch(Myoushu::Exception &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ Myoushu::Exception exception thrown");
    return 0; 
  }
  
  *(Educational::EducationalQuestion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_EducationalQuestionsCategory_1findByName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Educational::EducationalQuestionsCategory *arg1 = (Educational::EducationalQuestionsCategory *) 0 ;
  std::string *arg2 = 0 ;
  Educational::EducationalQuestion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Educational::EducationalQuestionsCategory **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Educational::EducationalQuestion *)(arg1)->findByName((std::string const &)*arg2);
  *(Educational::EducationalQuestion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_EducationalQuestionsCategory_1setDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Educational::EducationalQuestionsCategory *arg1 = (Educational::EducationalQuestionsCategory *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Educational::EducationalQuestionsCategory **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setDescription((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_ASTTJava_ASTTJNI_EducationalQuestionsCategory_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Educational::EducationalQuestionsCategory *arg1 = (Educational::EducationalQuestionsCategory *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Educational::EducationalQuestionsCategory **)&jarg1; 
  result = ((Educational::EducationalQuestionsCategory const *)arg1)->getDescription();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_EducationalQuestionsCategory_1getQuestionNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Educational::EducationalQuestionsCategory *arg1 = (Educational::EducationalQuestionsCategory *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Educational::EducationalQuestionsCategory **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  (arg1)->getQuestionNames(*arg2);
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_EducationalQuestionsCategory_1getQuestions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Educational::EducationalQuestionsCategory *arg1 = (Educational::EducationalQuestionsCategory *) 0 ;
  std::vector< Educational::EducationalQuestion * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Educational::EducationalQuestionsCategory **)&jarg1; 
  arg2 = *(std::vector< Educational::EducationalQuestion * > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Educational::EducationalQuestion * > & reference is null");
    return ;
  } 
  (arg1)->getQuestions(*arg2);
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1EducationalQuestionsManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Educational::EducationalQuestionsManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Educational::EducationalQuestionsManager *)new Educational::EducationalQuestionsManager();
  *(Educational::EducationalQuestionsManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_delete_1EducationalQuestionsManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Educational::EducationalQuestionsManager *arg1 = (Educational::EducationalQuestionsManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Educational::EducationalQuestionsManager **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_EducationalQuestionsManager_1loadCategoryFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Educational::EducationalQuestionsManager *arg1 = (Educational::EducationalQuestionsManager *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Educational::EducationalQuestionsManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    (arg1)->loadCategoryFile((std::string const &)*arg2,(std::string const &)*arg3);
  }
  catch(Myoushu::Exception &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ Myoushu::Exception exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_EducationalQuestionsManager_1loadCategoryFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Educational::EducationalQuestionsManager *arg1 = (Educational::EducationalQuestionsManager *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Educational::EducationalQuestionsManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->loadCategoryFile((std::string const &)*arg2);
  }
  catch(Myoushu::Exception &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ Myoushu::Exception exception thrown");
    return ; 
  }
  
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_EducationalQuestionsManager_1getCategory_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Educational::EducationalQuestionsManager *arg1 = (Educational::EducationalQuestionsManager *) 0 ;
  std::string *arg2 = 0 ;
  Educational::EducationalQuestionsCategory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Educational::EducationalQuestionsManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Educational::EducationalQuestionsCategory *)(arg1)->getCategory((std::string const &)*arg2);
  *(Educational::EducationalQuestionsCategory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_EducationalQuestionsManager_1destroyCategory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Educational::EducationalQuestionsManager *arg1 = (Educational::EducationalQuestionsManager *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Educational::EducationalQuestionsManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->destroyCategory((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_EducationalQuestionsManager_1destroyAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Educational::EducationalQuestionsManager *arg1 = (Educational::EducationalQuestionsManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Educational::EducationalQuestionsManager **)&jarg1; 
  (arg1)->destroyAll();
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_new_1XMLCategoryFile(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Educational::XMLCategoryFile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Educational::XMLCategoryFile *)new Educational::XMLCategoryFile();
  *(Educational::XMLCategoryFile **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_delete_1XMLCategoryFile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Educational::XMLCategoryFile *arg1 = (Educational::XMLCategoryFile *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Educational::XMLCategoryFile **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ASTTJava_ASTTJNI_XMLCategoryFile_1load(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Educational::XMLCategoryFile *arg1 = (Educational::XMLCategoryFile *) 0 ;
  TextFilePtr arg2 ;
  TextFilePtr const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Educational::XMLCategoryFile **)&jarg1; 
  argp2 = *(TextFilePtr **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null TextFilePtr const");
    return ;
  }
  arg2 = *argp2; 
  try {
    (arg1)->load(arg2);
  }
  catch(Myoushu::Exception &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ Myoushu::Exception exception thrown");
    return ; 
  }
  
}


SWIGEXPORT jlong JNICALL Java_ASTTJava_ASTTJNI_EducationalQuestionsManager_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::Singleton< Educational::EducationalQuestionsManager > **)&baseptr = *(Educational::EducationalQuestionsManager **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

