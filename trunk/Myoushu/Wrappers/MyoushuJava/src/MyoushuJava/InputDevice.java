/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package MyoushuJava;

public class InputDevice extends RefCountedObject {
  private long swigCPtr;

  public InputDevice(long cPtr, boolean cMemoryOwn) {
    super(MyoushuJNI.SWIGInputDeviceUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(InputDevice obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        MyoushuJNI.delete_InputDevice(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public void capture() {
    MyoushuJNI.InputDevice_capture(swigCPtr, this);
  }

  public String getInputEventString(String inputIdentifier) {
    return MyoushuJNI.InputDevice_getInputEventString(swigCPtr, this, inputIdentifier);
  }

  public int getInputCodeFromInputIdentifier(String inputIdentifier) {
    return MyoushuJNI.InputDevice_getInputCodeFromInputIdentifier(swigCPtr, this, inputIdentifier);
  }

  public String getInputIdentifierFromInputCode(int inputCode) {
    return MyoushuJNI.InputDevice_getInputIdentifierFromInputCode(swigCPtr, this, inputCode);
  }

  public InputDevice.InputDeviceType getDeviceType() {
    return InputDevice.InputDeviceType.swigToEnum(MyoushuJNI.InputDevice_getDeviceType(swigCPtr, this));
  }

  public String getName() {
    return MyoushuJNI.InputDevice_getName(swigCPtr, this);
  }

  public enum InputDeviceType {
    IDT_KEYBOARD,
    IDT_MOUSE,
    IDT_GAMEPAD,
    IDT_UNKNOWN;

    public final int swigValue() {
      return swigValue;
    }

    public static InputDeviceType swigToEnum(int swigValue) {
      InputDeviceType[] swigValues = InputDeviceType.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (InputDeviceType swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + InputDeviceType.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private InputDeviceType() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private InputDeviceType(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private InputDeviceType(InputDeviceType swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
