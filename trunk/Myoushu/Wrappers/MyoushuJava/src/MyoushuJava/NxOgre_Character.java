/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package MyoushuJava;

public class NxOgre_Character {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  public NxOgre_Character(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(NxOgre_Character obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        MyoushuJNI.delete_NxOgre_Character(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public NxOgre_Character(String arg0, SWIGTYPE_p_NxOgre__Scene arg1, CharacterController arg2, Pose arg3, CharacterParams arg4) {
    this(MyoushuJNI.new_NxOgre_Character(arg0, SWIGTYPE_p_NxOgre__Scene.getCPtr(arg1), CharacterController.getCPtr(arg2), arg2, Pose.getCPtr(arg3), arg3, CharacterParams.getCPtr(arg4), arg4), true);
  }

  public void createNode() {
    MyoushuJNI.NxOgre_Character_createNode(swigCPtr, this);
  }

  public void attachMesh(String arg0) {
    MyoushuJNI.NxOgre_Character_attachMesh(swigCPtr, this, arg0);
  }

  public void attachSkeletonMesh(String arg0) {
    MyoushuJNI.NxOgre_Character_attachSkeletonMesh(swigCPtr, this, arg0);
  }

  public void bindToAnimation(NxOgre_Character.Movement arg0, String AnimationName) {
    MyoushuJNI.NxOgre_Character_bindToAnimation(swigCPtr, this, arg0.swigValue(), AnimationName);
  }

  public void bindFeet(String leftBone, String rightBone) {
    MyoushuJNI.NxOgre_Character_bindFeet(swigCPtr, this, leftBone, rightBone);
  }

  public void unBindFeet() {
    MyoushuJNI.NxOgre_Character_unBindFeet(swigCPtr, this);
  }

  public Vector3 getGlobalPosition() {
    return new Vector3(MyoushuJNI.NxOgre_Character_getGlobalPosition(swigCPtr, this), true);
  }

  public Quaternion getGlobalOrientation() {
    return new Quaternion(MyoushuJNI.NxOgre_Character_getGlobalOrientation(swigCPtr, this), true);
  }

  public void simulate(float arg0) {
    MyoushuJNI.NxOgre_Character_simulate(swigCPtr, this, arg0);
  }

  public void render(float arg0) {
    MyoushuJNI.NxOgre_Character_render(swigCPtr, this, arg0);
  }

  public void addMovement(NxOgre_Character.Direction arg0) {
    MyoushuJNI.NxOgre_Character_addMovement(swigCPtr, this, arg0.swigValue());
  }

  public void setDirection(Radian arg0) {
    MyoushuJNI.NxOgre_Character_setDirection__SWIG_0(swigCPtr, this, Radian.getCPtr(arg0), arg0);
  }

  public void setDirection(Quaternion arg0) {
    MyoushuJNI.NxOgre_Character_setDirection__SWIG_1(swigCPtr, this, Quaternion.getCPtr(arg0), arg0);
  }

  public void setRawNextMovementDirection(SWIGTYPE_p_NxVec3 direction) {
    MyoushuJNI.NxOgre_Character_setRawNextMovementDirection(swigCPtr, this, SWIGTYPE_p_NxVec3.getCPtr(direction));
  }

  public void setMovementVectorController(CharacterMovementVectorController arg0) {
    MyoushuJNI.NxOgre_Character_setMovementVectorController(swigCPtr, this, CharacterMovementVectorController.getCPtr(arg0), arg0);
  }

  public void setPosition(Vector3 arg0) {
    MyoushuJNI.NxOgre_Character_setPosition(swigCPtr, this, Vector3.getCPtr(arg0), arg0);
  }

  public String getName() {
    return MyoushuJNI.NxOgre_Character_getName(swigCPtr, this);
  }

  public SceneNode getNode() {
    long cPtr = MyoushuJNI.NxOgre_Character_getNode(swigCPtr, this);
    return (cPtr == 0) ? null : new SceneNode(cPtr, false);
  }

  public Entity getEntity() {
    long cPtr = MyoushuJNI.NxOgre_Character_getEntity(swigCPtr, this);
    return (cPtr == 0) ? null : new Entity(cPtr, false);
  }

  public SWIGTYPE_p_NxOgre__Scene getScene() {
    long cPtr = MyoushuJNI.NxOgre_Character_getScene(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_NxOgre__Scene(cPtr, false);
  }

  public SWIGTYPE_p_NxController getNxController() {
    long cPtr = MyoushuJNI.NxOgre_Character_getNxController(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_NxController(cPtr, false);
  }

  public float getMass() {
    return MyoushuJNI.NxOgre_Character_getMass(swigCPtr, this);
  }

  public enum Movement {
    MV_Idle,
    MV_Walk,
    MV_Run,
    MV_Fall,
    MV_Jump_Up,
    MV_Jump_Directional,
    MV_Crouch,
    MV_Crouch_Walk,
    MV_SideStep,
    MV_Ladder,
    MV_Vehicle,
    MV_None;

    public final int swigValue() {
      return swigValue;
    }

    public static Movement swigToEnum(int swigValue) {
      Movement[] swigValues = Movement.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (Movement swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + Movement.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private Movement() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private Movement(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private Movement(Movement swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  public enum Direction {
    DR_Forward,
    DR_Backward,
    DR_StepLeft,
    DR_StepRight,
    DR_Jump_Up,
    DR_Jump_Directional,
    DR_Ladder_Up,
    DR_Ladder_Down,
    DR_None;

    public final int swigValue() {
      return swigValue;
    }

    public static Direction swigToEnum(int swigValue) {
      Direction[] swigValues = Direction.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (Direction swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + Direction.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private Direction() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private Direction(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private Direction(Direction swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
