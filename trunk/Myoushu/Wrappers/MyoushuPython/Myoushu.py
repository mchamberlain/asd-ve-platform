# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.39
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Myoushu', [dirname(__file__)])
        except ImportError:
            import _Myoushu
            return _Myoushu
        if fp is not None:
            try:
                _mod = imp.load_module('_Myoushu', fp, pathname, description)
            finally:
                fp.close()
                return _mod
    _Myoushu = swig_import_helper()
    del swig_import_helper
else:
    import _Myoushu
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _Myoushu.SwigPyIterator_value(self)
    def incr(self, n = 1): return _Myoushu.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _Myoushu.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _Myoushu.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _Myoushu.SwigPyIterator_equal(self, *args)
    def copy(self): return _Myoushu.SwigPyIterator_copy(self)
    def next(self): return _Myoushu.SwigPyIterator_next(self)
    def __next__(self): return _Myoushu.SwigPyIterator___next__(self)
    def previous(self): return _Myoushu.SwigPyIterator_previous(self)
    def advance(self, *args): return _Myoushu.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _Myoushu.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _Myoushu.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _Myoushu.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _Myoushu.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _Myoushu.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _Myoushu.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _Myoushu.VectorInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Myoushu.VectorInt___nonzero__(self)
    def __bool__(self): return _Myoushu.VectorInt___bool__(self)
    def __len__(self): return _Myoushu.VectorInt___len__(self)
    def pop(self): return _Myoushu.VectorInt_pop(self)
    def __getslice__(self, *args): return _Myoushu.VectorInt___getslice__(self, *args)
    def __setslice__(self, *args): return _Myoushu.VectorInt___setslice__(self, *args)
    def __delslice__(self, *args): return _Myoushu.VectorInt___delslice__(self, *args)
    def __delitem__(self, *args): return _Myoushu.VectorInt___delitem__(self, *args)
    def __getitem__(self, *args): return _Myoushu.VectorInt___getitem__(self, *args)
    def __setitem__(self, *args): return _Myoushu.VectorInt___setitem__(self, *args)
    def append(self, *args): return _Myoushu.VectorInt_append(self, *args)
    def empty(self): return _Myoushu.VectorInt_empty(self)
    def size(self): return _Myoushu.VectorInt_size(self)
    def clear(self): return _Myoushu.VectorInt_clear(self)
    def swap(self, *args): return _Myoushu.VectorInt_swap(self, *args)
    def get_allocator(self): return _Myoushu.VectorInt_get_allocator(self)
    def begin(self): return _Myoushu.VectorInt_begin(self)
    def end(self): return _Myoushu.VectorInt_end(self)
    def rbegin(self): return _Myoushu.VectorInt_rbegin(self)
    def rend(self): return _Myoushu.VectorInt_rend(self)
    def pop_back(self): return _Myoushu.VectorInt_pop_back(self)
    def erase(self, *args): return _Myoushu.VectorInt_erase(self, *args)
    def __init__(self, *args): 
        this = _Myoushu.new_VectorInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Myoushu.VectorInt_push_back(self, *args)
    def front(self): return _Myoushu.VectorInt_front(self)
    def back(self): return _Myoushu.VectorInt_back(self)
    def assign(self, *args): return _Myoushu.VectorInt_assign(self, *args)
    def resize(self, *args): return _Myoushu.VectorInt_resize(self, *args)
    def insert(self, *args): return _Myoushu.VectorInt_insert(self, *args)
    def reserve(self, *args): return _Myoushu.VectorInt_reserve(self, *args)
    def capacity(self): return _Myoushu.VectorInt_capacity(self)
    __swig_destroy__ = _Myoushu.delete_VectorInt
    __del__ = lambda self : None;
VectorInt_swigregister = _Myoushu.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

class VectorUInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorUInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorUInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _Myoushu.VectorUInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Myoushu.VectorUInt___nonzero__(self)
    def __bool__(self): return _Myoushu.VectorUInt___bool__(self)
    def __len__(self): return _Myoushu.VectorUInt___len__(self)
    def pop(self): return _Myoushu.VectorUInt_pop(self)
    def __getslice__(self, *args): return _Myoushu.VectorUInt___getslice__(self, *args)
    def __setslice__(self, *args): return _Myoushu.VectorUInt___setslice__(self, *args)
    def __delslice__(self, *args): return _Myoushu.VectorUInt___delslice__(self, *args)
    def __delitem__(self, *args): return _Myoushu.VectorUInt___delitem__(self, *args)
    def __getitem__(self, *args): return _Myoushu.VectorUInt___getitem__(self, *args)
    def __setitem__(self, *args): return _Myoushu.VectorUInt___setitem__(self, *args)
    def append(self, *args): return _Myoushu.VectorUInt_append(self, *args)
    def empty(self): return _Myoushu.VectorUInt_empty(self)
    def size(self): return _Myoushu.VectorUInt_size(self)
    def clear(self): return _Myoushu.VectorUInt_clear(self)
    def swap(self, *args): return _Myoushu.VectorUInt_swap(self, *args)
    def get_allocator(self): return _Myoushu.VectorUInt_get_allocator(self)
    def begin(self): return _Myoushu.VectorUInt_begin(self)
    def end(self): return _Myoushu.VectorUInt_end(self)
    def rbegin(self): return _Myoushu.VectorUInt_rbegin(self)
    def rend(self): return _Myoushu.VectorUInt_rend(self)
    def pop_back(self): return _Myoushu.VectorUInt_pop_back(self)
    def erase(self, *args): return _Myoushu.VectorUInt_erase(self, *args)
    def __init__(self, *args): 
        this = _Myoushu.new_VectorUInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Myoushu.VectorUInt_push_back(self, *args)
    def front(self): return _Myoushu.VectorUInt_front(self)
    def back(self): return _Myoushu.VectorUInt_back(self)
    def assign(self, *args): return _Myoushu.VectorUInt_assign(self, *args)
    def resize(self, *args): return _Myoushu.VectorUInt_resize(self, *args)
    def insert(self, *args): return _Myoushu.VectorUInt_insert(self, *args)
    def reserve(self, *args): return _Myoushu.VectorUInt_reserve(self, *args)
    def capacity(self): return _Myoushu.VectorUInt_capacity(self)
    __swig_destroy__ = _Myoushu.delete_VectorUInt
    __del__ = lambda self : None;
VectorUInt_swigregister = _Myoushu.VectorUInt_swigregister
VectorUInt_swigregister(VectorUInt)

class VectorChar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorChar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorChar, name)
    __repr__ = _swig_repr
    def iterator(self): return _Myoushu.VectorChar_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Myoushu.VectorChar___nonzero__(self)
    def __bool__(self): return _Myoushu.VectorChar___bool__(self)
    def __len__(self): return _Myoushu.VectorChar___len__(self)
    def pop(self): return _Myoushu.VectorChar_pop(self)
    def __getslice__(self, *args): return _Myoushu.VectorChar___getslice__(self, *args)
    def __setslice__(self, *args): return _Myoushu.VectorChar___setslice__(self, *args)
    def __delslice__(self, *args): return _Myoushu.VectorChar___delslice__(self, *args)
    def __delitem__(self, *args): return _Myoushu.VectorChar___delitem__(self, *args)
    def __getitem__(self, *args): return _Myoushu.VectorChar___getitem__(self, *args)
    def __setitem__(self, *args): return _Myoushu.VectorChar___setitem__(self, *args)
    def append(self, *args): return _Myoushu.VectorChar_append(self, *args)
    def empty(self): return _Myoushu.VectorChar_empty(self)
    def size(self): return _Myoushu.VectorChar_size(self)
    def clear(self): return _Myoushu.VectorChar_clear(self)
    def swap(self, *args): return _Myoushu.VectorChar_swap(self, *args)
    def get_allocator(self): return _Myoushu.VectorChar_get_allocator(self)
    def begin(self): return _Myoushu.VectorChar_begin(self)
    def end(self): return _Myoushu.VectorChar_end(self)
    def rbegin(self): return _Myoushu.VectorChar_rbegin(self)
    def rend(self): return _Myoushu.VectorChar_rend(self)
    def pop_back(self): return _Myoushu.VectorChar_pop_back(self)
    def erase(self, *args): return _Myoushu.VectorChar_erase(self, *args)
    def __init__(self, *args): 
        this = _Myoushu.new_VectorChar(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Myoushu.VectorChar_push_back(self, *args)
    def front(self): return _Myoushu.VectorChar_front(self)
    def back(self): return _Myoushu.VectorChar_back(self)
    def assign(self, *args): return _Myoushu.VectorChar_assign(self, *args)
    def resize(self, *args): return _Myoushu.VectorChar_resize(self, *args)
    def insert(self, *args): return _Myoushu.VectorChar_insert(self, *args)
    def reserve(self, *args): return _Myoushu.VectorChar_reserve(self, *args)
    def capacity(self): return _Myoushu.VectorChar_capacity(self)
    __swig_destroy__ = _Myoushu.delete_VectorChar
    __del__ = lambda self : None;
VectorChar_swigregister = _Myoushu.VectorChar_swigregister
VectorChar_swigregister(VectorChar)

class VectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDouble, name)
    __repr__ = _swig_repr
    def iterator(self): return _Myoushu.VectorDouble_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Myoushu.VectorDouble___nonzero__(self)
    def __bool__(self): return _Myoushu.VectorDouble___bool__(self)
    def __len__(self): return _Myoushu.VectorDouble___len__(self)
    def pop(self): return _Myoushu.VectorDouble_pop(self)
    def __getslice__(self, *args): return _Myoushu.VectorDouble___getslice__(self, *args)
    def __setslice__(self, *args): return _Myoushu.VectorDouble___setslice__(self, *args)
    def __delslice__(self, *args): return _Myoushu.VectorDouble___delslice__(self, *args)
    def __delitem__(self, *args): return _Myoushu.VectorDouble___delitem__(self, *args)
    def __getitem__(self, *args): return _Myoushu.VectorDouble___getitem__(self, *args)
    def __setitem__(self, *args): return _Myoushu.VectorDouble___setitem__(self, *args)
    def append(self, *args): return _Myoushu.VectorDouble_append(self, *args)
    def empty(self): return _Myoushu.VectorDouble_empty(self)
    def size(self): return _Myoushu.VectorDouble_size(self)
    def clear(self): return _Myoushu.VectorDouble_clear(self)
    def swap(self, *args): return _Myoushu.VectorDouble_swap(self, *args)
    def get_allocator(self): return _Myoushu.VectorDouble_get_allocator(self)
    def begin(self): return _Myoushu.VectorDouble_begin(self)
    def end(self): return _Myoushu.VectorDouble_end(self)
    def rbegin(self): return _Myoushu.VectorDouble_rbegin(self)
    def rend(self): return _Myoushu.VectorDouble_rend(self)
    def pop_back(self): return _Myoushu.VectorDouble_pop_back(self)
    def erase(self, *args): return _Myoushu.VectorDouble_erase(self, *args)
    def __init__(self, *args): 
        this = _Myoushu.new_VectorDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Myoushu.VectorDouble_push_back(self, *args)
    def front(self): return _Myoushu.VectorDouble_front(self)
    def back(self): return _Myoushu.VectorDouble_back(self)
    def assign(self, *args): return _Myoushu.VectorDouble_assign(self, *args)
    def resize(self, *args): return _Myoushu.VectorDouble_resize(self, *args)
    def insert(self, *args): return _Myoushu.VectorDouble_insert(self, *args)
    def reserve(self, *args): return _Myoushu.VectorDouble_reserve(self, *args)
    def capacity(self): return _Myoushu.VectorDouble_capacity(self)
    __swig_destroy__ = _Myoushu.delete_VectorDouble
    __del__ = lambda self : None;
VectorDouble_swigregister = _Myoushu.VectorDouble_swigregister
VectorDouble_swigregister(VectorDouble)

class VectorFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFloat, name)
    __repr__ = _swig_repr
    def iterator(self): return _Myoushu.VectorFloat_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Myoushu.VectorFloat___nonzero__(self)
    def __bool__(self): return _Myoushu.VectorFloat___bool__(self)
    def __len__(self): return _Myoushu.VectorFloat___len__(self)
    def pop(self): return _Myoushu.VectorFloat_pop(self)
    def __getslice__(self, *args): return _Myoushu.VectorFloat___getslice__(self, *args)
    def __setslice__(self, *args): return _Myoushu.VectorFloat___setslice__(self, *args)
    def __delslice__(self, *args): return _Myoushu.VectorFloat___delslice__(self, *args)
    def __delitem__(self, *args): return _Myoushu.VectorFloat___delitem__(self, *args)
    def __getitem__(self, *args): return _Myoushu.VectorFloat___getitem__(self, *args)
    def __setitem__(self, *args): return _Myoushu.VectorFloat___setitem__(self, *args)
    def append(self, *args): return _Myoushu.VectorFloat_append(self, *args)
    def empty(self): return _Myoushu.VectorFloat_empty(self)
    def size(self): return _Myoushu.VectorFloat_size(self)
    def clear(self): return _Myoushu.VectorFloat_clear(self)
    def swap(self, *args): return _Myoushu.VectorFloat_swap(self, *args)
    def get_allocator(self): return _Myoushu.VectorFloat_get_allocator(self)
    def begin(self): return _Myoushu.VectorFloat_begin(self)
    def end(self): return _Myoushu.VectorFloat_end(self)
    def rbegin(self): return _Myoushu.VectorFloat_rbegin(self)
    def rend(self): return _Myoushu.VectorFloat_rend(self)
    def pop_back(self): return _Myoushu.VectorFloat_pop_back(self)
    def erase(self, *args): return _Myoushu.VectorFloat_erase(self, *args)
    def __init__(self, *args): 
        this = _Myoushu.new_VectorFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Myoushu.VectorFloat_push_back(self, *args)
    def front(self): return _Myoushu.VectorFloat_front(self)
    def back(self): return _Myoushu.VectorFloat_back(self)
    def assign(self, *args): return _Myoushu.VectorFloat_assign(self, *args)
    def resize(self, *args): return _Myoushu.VectorFloat_resize(self, *args)
    def insert(self, *args): return _Myoushu.VectorFloat_insert(self, *args)
    def reserve(self, *args): return _Myoushu.VectorFloat_reserve(self, *args)
    def capacity(self): return _Myoushu.VectorFloat_capacity(self)
    __swig_destroy__ = _Myoushu.delete_VectorFloat
    __del__ = lambda self : None;
VectorFloat_swigregister = _Myoushu.VectorFloat_swigregister
VectorFloat_swigregister(VectorFloat)

class VectorLong(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorLong, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorLong, name)
    __repr__ = _swig_repr
    def iterator(self): return _Myoushu.VectorLong_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Myoushu.VectorLong___nonzero__(self)
    def __bool__(self): return _Myoushu.VectorLong___bool__(self)
    def __len__(self): return _Myoushu.VectorLong___len__(self)
    def pop(self): return _Myoushu.VectorLong_pop(self)
    def __getslice__(self, *args): return _Myoushu.VectorLong___getslice__(self, *args)
    def __setslice__(self, *args): return _Myoushu.VectorLong___setslice__(self, *args)
    def __delslice__(self, *args): return _Myoushu.VectorLong___delslice__(self, *args)
    def __delitem__(self, *args): return _Myoushu.VectorLong___delitem__(self, *args)
    def __getitem__(self, *args): return _Myoushu.VectorLong___getitem__(self, *args)
    def __setitem__(self, *args): return _Myoushu.VectorLong___setitem__(self, *args)
    def append(self, *args): return _Myoushu.VectorLong_append(self, *args)
    def empty(self): return _Myoushu.VectorLong_empty(self)
    def size(self): return _Myoushu.VectorLong_size(self)
    def clear(self): return _Myoushu.VectorLong_clear(self)
    def swap(self, *args): return _Myoushu.VectorLong_swap(self, *args)
    def get_allocator(self): return _Myoushu.VectorLong_get_allocator(self)
    def begin(self): return _Myoushu.VectorLong_begin(self)
    def end(self): return _Myoushu.VectorLong_end(self)
    def rbegin(self): return _Myoushu.VectorLong_rbegin(self)
    def rend(self): return _Myoushu.VectorLong_rend(self)
    def pop_back(self): return _Myoushu.VectorLong_pop_back(self)
    def erase(self, *args): return _Myoushu.VectorLong_erase(self, *args)
    def __init__(self, *args): 
        this = _Myoushu.new_VectorLong(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Myoushu.VectorLong_push_back(self, *args)
    def front(self): return _Myoushu.VectorLong_front(self)
    def back(self): return _Myoushu.VectorLong_back(self)
    def assign(self, *args): return _Myoushu.VectorLong_assign(self, *args)
    def resize(self, *args): return _Myoushu.VectorLong_resize(self, *args)
    def insert(self, *args): return _Myoushu.VectorLong_insert(self, *args)
    def reserve(self, *args): return _Myoushu.VectorLong_reserve(self, *args)
    def capacity(self): return _Myoushu.VectorLong_capacity(self)
    __swig_destroy__ = _Myoushu.delete_VectorLong
    __del__ = lambda self : None;
VectorLong_swigregister = _Myoushu.VectorLong_swigregister
VectorLong_swigregister(VectorLong)

class VectorBool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorBool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorBool, name)
    __repr__ = _swig_repr
    def iterator(self): return _Myoushu.VectorBool_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Myoushu.VectorBool___nonzero__(self)
    def __bool__(self): return _Myoushu.VectorBool___bool__(self)
    def __len__(self): return _Myoushu.VectorBool___len__(self)
    def pop(self): return _Myoushu.VectorBool_pop(self)
    def __getslice__(self, *args): return _Myoushu.VectorBool___getslice__(self, *args)
    def __setslice__(self, *args): return _Myoushu.VectorBool___setslice__(self, *args)
    def __delslice__(self, *args): return _Myoushu.VectorBool___delslice__(self, *args)
    def __delitem__(self, *args): return _Myoushu.VectorBool___delitem__(self, *args)
    def __getitem__(self, *args): return _Myoushu.VectorBool___getitem__(self, *args)
    def __setitem__(self, *args): return _Myoushu.VectorBool___setitem__(self, *args)
    def append(self, *args): return _Myoushu.VectorBool_append(self, *args)
    def empty(self): return _Myoushu.VectorBool_empty(self)
    def size(self): return _Myoushu.VectorBool_size(self)
    def clear(self): return _Myoushu.VectorBool_clear(self)
    def swap(self, *args): return _Myoushu.VectorBool_swap(self, *args)
    def get_allocator(self): return _Myoushu.VectorBool_get_allocator(self)
    def begin(self): return _Myoushu.VectorBool_begin(self)
    def end(self): return _Myoushu.VectorBool_end(self)
    def rbegin(self): return _Myoushu.VectorBool_rbegin(self)
    def rend(self): return _Myoushu.VectorBool_rend(self)
    def pop_back(self): return _Myoushu.VectorBool_pop_back(self)
    def erase(self, *args): return _Myoushu.VectorBool_erase(self, *args)
    def __init__(self, *args): 
        this = _Myoushu.new_VectorBool(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Myoushu.VectorBool_push_back(self, *args)
    def front(self): return _Myoushu.VectorBool_front(self)
    def back(self): return _Myoushu.VectorBool_back(self)
    def assign(self, *args): return _Myoushu.VectorBool_assign(self, *args)
    def resize(self, *args): return _Myoushu.VectorBool_resize(self, *args)
    def insert(self, *args): return _Myoushu.VectorBool_insert(self, *args)
    def reserve(self, *args): return _Myoushu.VectorBool_reserve(self, *args)
    def capacity(self): return _Myoushu.VectorBool_capacity(self)
    __swig_destroy__ = _Myoushu.delete_VectorBool
    __del__ = lambda self : None;
VectorBool_swigregister = _Myoushu.VectorBool_swigregister
VectorBool_swigregister(VectorBool)

class VectorString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorString, name)
    __repr__ = _swig_repr
    def iterator(self): return _Myoushu.VectorString_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Myoushu.VectorString___nonzero__(self)
    def __bool__(self): return _Myoushu.VectorString___bool__(self)
    def __len__(self): return _Myoushu.VectorString___len__(self)
    def pop(self): return _Myoushu.VectorString_pop(self)
    def __getslice__(self, *args): return _Myoushu.VectorString___getslice__(self, *args)
    def __setslice__(self, *args): return _Myoushu.VectorString___setslice__(self, *args)
    def __delslice__(self, *args): return _Myoushu.VectorString___delslice__(self, *args)
    def __delitem__(self, *args): return _Myoushu.VectorString___delitem__(self, *args)
    def __getitem__(self, *args): return _Myoushu.VectorString___getitem__(self, *args)
    def __setitem__(self, *args): return _Myoushu.VectorString___setitem__(self, *args)
    def append(self, *args): return _Myoushu.VectorString_append(self, *args)
    def empty(self): return _Myoushu.VectorString_empty(self)
    def size(self): return _Myoushu.VectorString_size(self)
    def clear(self): return _Myoushu.VectorString_clear(self)
    def swap(self, *args): return _Myoushu.VectorString_swap(self, *args)
    def get_allocator(self): return _Myoushu.VectorString_get_allocator(self)
    def begin(self): return _Myoushu.VectorString_begin(self)
    def end(self): return _Myoushu.VectorString_end(self)
    def rbegin(self): return _Myoushu.VectorString_rbegin(self)
    def rend(self): return _Myoushu.VectorString_rend(self)
    def pop_back(self): return _Myoushu.VectorString_pop_back(self)
    def erase(self, *args): return _Myoushu.VectorString_erase(self, *args)
    def __init__(self, *args): 
        this = _Myoushu.new_VectorString(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Myoushu.VectorString_push_back(self, *args)
    def front(self): return _Myoushu.VectorString_front(self)
    def back(self): return _Myoushu.VectorString_back(self)
    def assign(self, *args): return _Myoushu.VectorString_assign(self, *args)
    def resize(self, *args): return _Myoushu.VectorString_resize(self, *args)
    def insert(self, *args): return _Myoushu.VectorString_insert(self, *args)
    def reserve(self, *args): return _Myoushu.VectorString_reserve(self, *args)
    def capacity(self): return _Myoushu.VectorString_capacity(self)
    __swig_destroy__ = _Myoushu.delete_VectorString
    __del__ = lambda self : None;
VectorString_swigregister = _Myoushu.VectorString_swigregister
VectorString_swigregister(VectorString)

class VectorValue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorValue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorValue, name)
    __repr__ = _swig_repr
    def iterator(self): return _Myoushu.VectorValue_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Myoushu.VectorValue___nonzero__(self)
    def __bool__(self): return _Myoushu.VectorValue___bool__(self)
    def __len__(self): return _Myoushu.VectorValue___len__(self)
    def pop(self): return _Myoushu.VectorValue_pop(self)
    def __getslice__(self, *args): return _Myoushu.VectorValue___getslice__(self, *args)
    def __setslice__(self, *args): return _Myoushu.VectorValue___setslice__(self, *args)
    def __delslice__(self, *args): return _Myoushu.VectorValue___delslice__(self, *args)
    def __delitem__(self, *args): return _Myoushu.VectorValue___delitem__(self, *args)
    def __getitem__(self, *args): return _Myoushu.VectorValue___getitem__(self, *args)
    def __setitem__(self, *args): return _Myoushu.VectorValue___setitem__(self, *args)
    def append(self, *args): return _Myoushu.VectorValue_append(self, *args)
    def empty(self): return _Myoushu.VectorValue_empty(self)
    def size(self): return _Myoushu.VectorValue_size(self)
    def clear(self): return _Myoushu.VectorValue_clear(self)
    def swap(self, *args): return _Myoushu.VectorValue_swap(self, *args)
    def get_allocator(self): return _Myoushu.VectorValue_get_allocator(self)
    def begin(self): return _Myoushu.VectorValue_begin(self)
    def end(self): return _Myoushu.VectorValue_end(self)
    def rbegin(self): return _Myoushu.VectorValue_rbegin(self)
    def rend(self): return _Myoushu.VectorValue_rend(self)
    def pop_back(self): return _Myoushu.VectorValue_pop_back(self)
    def erase(self, *args): return _Myoushu.VectorValue_erase(self, *args)
    def __init__(self, *args): 
        this = _Myoushu.new_VectorValue(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Myoushu.VectorValue_push_back(self, *args)
    def front(self): return _Myoushu.VectorValue_front(self)
    def back(self): return _Myoushu.VectorValue_back(self)
    def assign(self, *args): return _Myoushu.VectorValue_assign(self, *args)
    def resize(self, *args): return _Myoushu.VectorValue_resize(self, *args)
    def insert(self, *args): return _Myoushu.VectorValue_insert(self, *args)
    def reserve(self, *args): return _Myoushu.VectorValue_reserve(self, *args)
    def capacity(self): return _Myoushu.VectorValue_capacity(self)
    __swig_destroy__ = _Myoushu.delete_VectorValue
    __del__ = lambda self : None;
VectorValue_swigregister = _Myoushu.VectorValue_swigregister
VectorValue_swigregister(VectorValue)

class ListInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListInt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_ListInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(self): return _Myoushu.ListInt_size(self)
    def empty(self): return _Myoushu.ListInt_empty(self)
    def clear(self): return _Myoushu.ListInt_clear(self)
    def push_back(self, *args): return _Myoushu.ListInt_push_back(self, *args)
    def pop_back(self): return _Myoushu.ListInt_pop_back(self)
    def front(self): return _Myoushu.ListInt_front(self)
    def back(self): return _Myoushu.ListInt_back(self)
    __swig_destroy__ = _Myoushu.delete_ListInt
    __del__ = lambda self : None;
ListInt_swigregister = _Myoushu.ListInt_swigregister
ListInt_swigregister(ListInt)

class ListUInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListUInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListUInt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_ListUInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(self): return _Myoushu.ListUInt_size(self)
    def empty(self): return _Myoushu.ListUInt_empty(self)
    def clear(self): return _Myoushu.ListUInt_clear(self)
    def push_back(self, *args): return _Myoushu.ListUInt_push_back(self, *args)
    def pop_back(self): return _Myoushu.ListUInt_pop_back(self)
    def front(self): return _Myoushu.ListUInt_front(self)
    def back(self): return _Myoushu.ListUInt_back(self)
    __swig_destroy__ = _Myoushu.delete_ListUInt
    __del__ = lambda self : None;
ListUInt_swigregister = _Myoushu.ListUInt_swigregister
ListUInt_swigregister(ListUInt)

class ListChar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListChar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListChar, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_ListChar(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(self): return _Myoushu.ListChar_size(self)
    def empty(self): return _Myoushu.ListChar_empty(self)
    def clear(self): return _Myoushu.ListChar_clear(self)
    def push_back(self, *args): return _Myoushu.ListChar_push_back(self, *args)
    def pop_back(self): return _Myoushu.ListChar_pop_back(self)
    def front(self): return _Myoushu.ListChar_front(self)
    def back(self): return _Myoushu.ListChar_back(self)
    __swig_destroy__ = _Myoushu.delete_ListChar
    __del__ = lambda self : None;
ListChar_swigregister = _Myoushu.ListChar_swigregister
ListChar_swigregister(ListChar)

class ListDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_ListDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(self): return _Myoushu.ListDouble_size(self)
    def empty(self): return _Myoushu.ListDouble_empty(self)
    def clear(self): return _Myoushu.ListDouble_clear(self)
    def push_back(self, *args): return _Myoushu.ListDouble_push_back(self, *args)
    def pop_back(self): return _Myoushu.ListDouble_pop_back(self)
    def front(self): return _Myoushu.ListDouble_front(self)
    def back(self): return _Myoushu.ListDouble_back(self)
    __swig_destroy__ = _Myoushu.delete_ListDouble
    __del__ = lambda self : None;
ListDouble_swigregister = _Myoushu.ListDouble_swigregister
ListDouble_swigregister(ListDouble)

class ListFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListFloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_ListFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(self): return _Myoushu.ListFloat_size(self)
    def empty(self): return _Myoushu.ListFloat_empty(self)
    def clear(self): return _Myoushu.ListFloat_clear(self)
    def push_back(self, *args): return _Myoushu.ListFloat_push_back(self, *args)
    def pop_back(self): return _Myoushu.ListFloat_pop_back(self)
    def front(self): return _Myoushu.ListFloat_front(self)
    def back(self): return _Myoushu.ListFloat_back(self)
    __swig_destroy__ = _Myoushu.delete_ListFloat
    __del__ = lambda self : None;
ListFloat_swigregister = _Myoushu.ListFloat_swigregister
ListFloat_swigregister(ListFloat)

class ListLong(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListLong, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListLong, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_ListLong(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(self): return _Myoushu.ListLong_size(self)
    def empty(self): return _Myoushu.ListLong_empty(self)
    def clear(self): return _Myoushu.ListLong_clear(self)
    def push_back(self, *args): return _Myoushu.ListLong_push_back(self, *args)
    def pop_back(self): return _Myoushu.ListLong_pop_back(self)
    def front(self): return _Myoushu.ListLong_front(self)
    def back(self): return _Myoushu.ListLong_back(self)
    __swig_destroy__ = _Myoushu.delete_ListLong
    __del__ = lambda self : None;
ListLong_swigregister = _Myoushu.ListLong_swigregister
ListLong_swigregister(ListLong)

class ListBool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListBool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListBool, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_ListBool(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(self): return _Myoushu.ListBool_size(self)
    def empty(self): return _Myoushu.ListBool_empty(self)
    def clear(self): return _Myoushu.ListBool_clear(self)
    def push_back(self, *args): return _Myoushu.ListBool_push_back(self, *args)
    def pop_back(self): return _Myoushu.ListBool_pop_back(self)
    def front(self): return _Myoushu.ListBool_front(self)
    def back(self): return _Myoushu.ListBool_back(self)
    __swig_destroy__ = _Myoushu.delete_ListBool
    __del__ = lambda self : None;
ListBool_swigregister = _Myoushu.ListBool_swigregister
ListBool_swigregister(ListBool)

class ListString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListString, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_ListString(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(self): return _Myoushu.ListString_size(self)
    def empty(self): return _Myoushu.ListString_empty(self)
    def clear(self): return _Myoushu.ListString_clear(self)
    def push_back(self, *args): return _Myoushu.ListString_push_back(self, *args)
    def pop_back(self): return _Myoushu.ListString_pop_back(self)
    def front(self): return _Myoushu.ListString_front(self)
    def back(self): return _Myoushu.ListString_back(self)
    __swig_destroy__ = _Myoushu.delete_ListString
    __del__ = lambda self : None;
ListString_swigregister = _Myoushu.ListString_swigregister
ListString_swigregister(ListString)

class ListValue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListValue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListValue, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_ListValue(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(self): return _Myoushu.ListValue_size(self)
    def empty(self): return _Myoushu.ListValue_empty(self)
    def clear(self): return _Myoushu.ListValue_clear(self)
    def push_back(self, *args): return _Myoushu.ListValue_push_back(self, *args)
    def pop_back(self): return _Myoushu.ListValue_pop_back(self)
    def front(self): return _Myoushu.ListValue_front(self)
    def back(self): return _Myoushu.ListValue_back(self)
    __swig_destroy__ = _Myoushu.delete_ListValue
    __del__ = lambda self : None;
ListValue_swigregister = _Myoushu.ListValue_swigregister
ListValue_swigregister(ListValue)

class ReferenceCounterBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReferenceCounterBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReferenceCounterBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_ReferenceCounterBase
    __del__ = lambda self : None;
    def setRefCountedObject(self, *args): return _Myoushu.ReferenceCounterBase_setRefCountedObject(self, *args)
    def duplicate(self): return _Myoushu.ReferenceCounterBase_duplicate(self)
    def release(self): return _Myoushu.ReferenceCounterBase_release(self)
    def referenceCount(self): return _Myoushu.ReferenceCounterBase_referenceCount(self)
ReferenceCounterBase_swigregister = _Myoushu.ReferenceCounterBase_swigregister
ReferenceCounterBase_swigregister(ReferenceCounterBase)

class RefCountedObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefCountedObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefCountedObject, name)
    __repr__ = _swig_repr
    def __init__(self, counter = None): 
        this = _Myoushu.new_RefCountedObject(counter)
        try: self.this.append(this)
        except: self.this = this
    def duplicate(self): return _Myoushu.RefCountedObject_duplicate(self)
    def release(self): return _Myoushu.RefCountedObject_release(self)
    def referenceCount(self): return _Myoushu.RefCountedObject_referenceCount(self)
RefCountedObject_swigregister = _Myoushu.RefCountedObject_swigregister
RefCountedObject_swigregister(RefCountedObject)

class AbstractConfiguration(RefCountedObject):
    __swig_setmethods__ = {}
    for _s in [RefCountedObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractConfiguration, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountedObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractConfiguration, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def hasProperty(self, *args): return _Myoushu.AbstractConfiguration_hasProperty(self, *args)
    def hasOption(self, *args): return _Myoushu.AbstractConfiguration_hasOption(self, *args)
    def getString(self, *args): return _Myoushu.AbstractConfiguration_getString(self, *args)
    def getRawString(self, *args): return _Myoushu.AbstractConfiguration_getRawString(self, *args)
    def getInt(self, *args): return _Myoushu.AbstractConfiguration_getInt(self, *args)
    def getDouble(self, *args): return _Myoushu.AbstractConfiguration_getDouble(self, *args)
    def getBool(self, *args): return _Myoushu.AbstractConfiguration_getBool(self, *args)
    def setString(self, *args): return _Myoushu.AbstractConfiguration_setString(self, *args)
    def setInt(self, *args): return _Myoushu.AbstractConfiguration_setInt(self, *args)
    def setDouble(self, *args): return _Myoushu.AbstractConfiguration_setDouble(self, *args)
    def setBool(self, *args): return _Myoushu.AbstractConfiguration_setBool(self, *args)
    def keys(self, *args): return _Myoushu.AbstractConfiguration_keys(self, *args)
    def createView(self, *args): return _Myoushu.AbstractConfiguration_createView(self, *args)
    def expand(self, *args): return _Myoushu.AbstractConfiguration_expand(self, *args)
AbstractConfiguration_swigregister = _Myoushu.AbstractConfiguration_swigregister
AbstractConfiguration_swigregister(AbstractConfiguration)

class MapConfiguration(AbstractConfiguration):
    __swig_setmethods__ = {}
    for _s in [AbstractConfiguration]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapConfiguration, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractConfiguration]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MapConfiguration, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_MapConfiguration()
        try: self.this.append(this)
        except: self.this = this
    def clear(self): return _Myoushu.MapConfiguration_clear(self)
MapConfiguration_swigregister = _Myoushu.MapConfiguration_swigregister
MapConfiguration_swigregister(MapConfiguration)

OGRE_PLATFORM_WIN32 = _Myoushu.OGRE_PLATFORM_WIN32
OGRE_PLATFORM_LINUX = _Myoushu.OGRE_PLATFORM_LINUX
OGRE_PLATFORM_APPLE = _Myoushu.OGRE_PLATFORM_APPLE
OGRE_COMPILER_MSVC = _Myoushu.OGRE_COMPILER_MSVC
OGRE_COMPILER_GNUC = _Myoushu.OGRE_COMPILER_GNUC
OGRE_COMPILER_BORL = _Myoushu.OGRE_COMPILER_BORL
OGRE_ENDIAN_LITTLE = _Myoushu.OGRE_ENDIAN_LITTLE
OGRE_ENDIAN_BIG = _Myoushu.OGRE_ENDIAN_BIG
OGRE_ARCHITECTURE_32 = _Myoushu.OGRE_ARCHITECTURE_32
OGRE_ARCHITECTURE_64 = _Myoushu.OGRE_ARCHITECTURE_64
OGRE_PLATFORM = _Myoushu.OGRE_PLATFORM
OGRE_ARCH_TYPE = _Myoushu.OGRE_ARCH_TYPE
OGRE_DEBUG_MODE = _Myoushu.OGRE_DEBUG_MODE
OGRE_PLATFORM_LIB = _Myoushu.OGRE_PLATFORM_LIB
OGRE_UNICODE_SUPPORT = _Myoushu.OGRE_UNICODE_SUPPORT
OGRE_ENDIAN = _Myoushu.OGRE_ENDIAN
OGRE_COMPILER = _Myoushu.OGRE_COMPILER
OGRE_COMP_VER = _Myoushu.OGRE_COMP_VER
class OgreException(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OgreException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OgreException, name)
    __repr__ = _swig_repr
    ERR_CANNOT_WRITE_TO_FILE = _Myoushu.OgreException_ERR_CANNOT_WRITE_TO_FILE
    ERR_INVALID_STATE = _Myoushu.OgreException_ERR_INVALID_STATE
    ERR_INVALIDPARAMS = _Myoushu.OgreException_ERR_INVALIDPARAMS
    ERR_RENDERINGAPI_ERROR = _Myoushu.OgreException_ERR_RENDERINGAPI_ERROR
    ERR_DUPLICATE_ITEM = _Myoushu.OgreException_ERR_DUPLICATE_ITEM
    ERR_ITEM_NOT_FOUND = _Myoushu.OgreException_ERR_ITEM_NOT_FOUND
    ERR_FILE_NOT_FOUND = _Myoushu.OgreException_ERR_FILE_NOT_FOUND
    ERR_INTERNAL_ERROR = _Myoushu.OgreException_ERR_INTERNAL_ERROR
    ERR_RT_ASSERTION_FAILED = _Myoushu.OgreException_ERR_RT_ASSERTION_FAILED
    ERR_NOT_IMPLEMENTED = _Myoushu.OgreException_ERR_NOT_IMPLEMENTED
    def __init__(self, *args): 
        this = _Myoushu.new_OgreException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_OgreException
    __del__ = lambda self : None;
    def getFullDescription(self): return _Myoushu.OgreException_getFullDescription(self)
    def getNumber(self): return _Myoushu.OgreException_getNumber(self)
    def getSource(self): return _Myoushu.OgreException_getSource(self)
    def getFile(self): return _Myoushu.OgreException_getFile(self)
    def getLine(self): return _Myoushu.OgreException_getLine(self)
    def getDescription(self): return _Myoushu.OgreException_getDescription(self)
    def what(self): return _Myoushu.OgreException_what(self)
OgreException_swigregister = _Myoushu.OgreException_swigregister
OgreException_swigregister(OgreException)

class UnimplementedException(OgreException):
    __swig_setmethods__ = {}
    for _s in [OgreException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnimplementedException, name, value)
    __swig_getmethods__ = {}
    for _s in [OgreException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnimplementedException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_UnimplementedException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_UnimplementedException
    __del__ = lambda self : None;
UnimplementedException_swigregister = _Myoushu.UnimplementedException_swigregister
UnimplementedException_swigregister(UnimplementedException)

class FileNotFoundException(OgreException):
    __swig_setmethods__ = {}
    for _s in [OgreException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileNotFoundException, name, value)
    __swig_getmethods__ = {}
    for _s in [OgreException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileNotFoundException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_FileNotFoundException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_FileNotFoundException
    __del__ = lambda self : None;
FileNotFoundException_swigregister = _Myoushu.FileNotFoundException_swigregister
FileNotFoundException_swigregister(FileNotFoundException)

class IOException(OgreException):
    __swig_setmethods__ = {}
    for _s in [OgreException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOException, name, value)
    __swig_getmethods__ = {}
    for _s in [OgreException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IOException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_IOException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_IOException
    __del__ = lambda self : None;
IOException_swigregister = _Myoushu.IOException_swigregister
IOException_swigregister(IOException)

class InvalidStateException(OgreException):
    __swig_setmethods__ = {}
    for _s in [OgreException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidStateException, name, value)
    __swig_getmethods__ = {}
    for _s in [OgreException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidStateException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_InvalidStateException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_InvalidStateException
    __del__ = lambda self : None;
InvalidStateException_swigregister = _Myoushu.InvalidStateException_swigregister
InvalidStateException_swigregister(InvalidStateException)

class InvalidParametersException(OgreException):
    __swig_setmethods__ = {}
    for _s in [OgreException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidParametersException, name, value)
    __swig_getmethods__ = {}
    for _s in [OgreException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidParametersException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_InvalidParametersException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_InvalidParametersException
    __del__ = lambda self : None;
InvalidParametersException_swigregister = _Myoushu.InvalidParametersException_swigregister
InvalidParametersException_swigregister(InvalidParametersException)

class ItemIdentityException(OgreException):
    __swig_setmethods__ = {}
    for _s in [OgreException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ItemIdentityException, name, value)
    __swig_getmethods__ = {}
    for _s in [OgreException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ItemIdentityException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_ItemIdentityException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ItemIdentityException
    __del__ = lambda self : None;
ItemIdentityException_swigregister = _Myoushu.ItemIdentityException_swigregister
ItemIdentityException_swigregister(ItemIdentityException)

class InternalErrorException(OgreException):
    __swig_setmethods__ = {}
    for _s in [OgreException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InternalErrorException, name, value)
    __swig_getmethods__ = {}
    for _s in [OgreException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InternalErrorException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_InternalErrorException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_InternalErrorException
    __del__ = lambda self : None;
InternalErrorException_swigregister = _Myoushu.InternalErrorException_swigregister
InternalErrorException_swigregister(InternalErrorException)

class RenderingAPIException(OgreException):
    __swig_setmethods__ = {}
    for _s in [OgreException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RenderingAPIException, name, value)
    __swig_getmethods__ = {}
    for _s in [OgreException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RenderingAPIException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_RenderingAPIException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_RenderingAPIException
    __del__ = lambda self : None;
RenderingAPIException_swigregister = _Myoushu.RenderingAPIException_swigregister
RenderingAPIException_swigregister(RenderingAPIException)

class RuntimeAssertionException(OgreException):
    __swig_setmethods__ = {}
    for _s in [OgreException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RuntimeAssertionException, name, value)
    __swig_getmethods__ = {}
    for _s in [OgreException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RuntimeAssertionException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_RuntimeAssertionException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_RuntimeAssertionException
    __del__ = lambda self : None;
RuntimeAssertionException_swigregister = _Myoushu.RuntimeAssertionException_swigregister
RuntimeAssertionException_swigregister(RuntimeAssertionException)

class ExceptionFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExceptionFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExceptionFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["create"] = lambda x: _Myoushu.ExceptionFactory_create
    if _newclass:create = staticmethod(_Myoushu.ExceptionFactory_create)
    __swig_destroy__ = _Myoushu.delete_ExceptionFactory
    __del__ = lambda self : None;
ExceptionFactory_swigregister = _Myoushu.ExceptionFactory_swigregister
ExceptionFactory_swigregister(ExceptionFactory)

def ExceptionFactory_create(*args):
  return _Myoushu.ExceptionFactory_create(*args)
ExceptionFactory_create = _Myoushu.ExceptionFactory_create

class StringUtil(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringUtil, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringUtil, name)
    __repr__ = _swig_repr
    __swig_getmethods__["trim"] = lambda x: _Myoushu.StringUtil_trim
    if _newclass:trim = staticmethod(_Myoushu.StringUtil_trim)
    __swig_getmethods__["split"] = lambda x: _Myoushu.StringUtil_split
    if _newclass:split = staticmethod(_Myoushu.StringUtil_split)
    __swig_getmethods__["toLowerCase"] = lambda x: _Myoushu.StringUtil_toLowerCase
    if _newclass:toLowerCase = staticmethod(_Myoushu.StringUtil_toLowerCase)
    __swig_getmethods__["toUpperCase"] = lambda x: _Myoushu.StringUtil_toUpperCase
    if _newclass:toUpperCase = staticmethod(_Myoushu.StringUtil_toUpperCase)
    __swig_getmethods__["startsWith"] = lambda x: _Myoushu.StringUtil_startsWith
    if _newclass:startsWith = staticmethod(_Myoushu.StringUtil_startsWith)
    __swig_getmethods__["endsWith"] = lambda x: _Myoushu.StringUtil_endsWith
    if _newclass:endsWith = staticmethod(_Myoushu.StringUtil_endsWith)
    __swig_getmethods__["standardisePath"] = lambda x: _Myoushu.StringUtil_standardisePath
    if _newclass:standardisePath = staticmethod(_Myoushu.StringUtil_standardisePath)
    __swig_getmethods__["splitFilename"] = lambda x: _Myoushu.StringUtil_splitFilename
    if _newclass:splitFilename = staticmethod(_Myoushu.StringUtil_splitFilename)
    __swig_getmethods__["splitFullFilename"] = lambda x: _Myoushu.StringUtil_splitFullFilename
    if _newclass:splitFullFilename = staticmethod(_Myoushu.StringUtil_splitFullFilename)
    __swig_getmethods__["splitBaseFilename"] = lambda x: _Myoushu.StringUtil_splitBaseFilename
    if _newclass:splitBaseFilename = staticmethod(_Myoushu.StringUtil_splitBaseFilename)
    __swig_getmethods__["match"] = lambda x: _Myoushu.StringUtil_match
    if _newclass:match = staticmethod(_Myoushu.StringUtil_match)
    def __init__(self): 
        this = _Myoushu.new_StringUtil()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_StringUtil
    __del__ = lambda self : None;
StringUtil_swigregister = _Myoushu.StringUtil_swigregister
StringUtil_swigregister(StringUtil)

def StringUtil_trim(*args):
  return _Myoushu.StringUtil_trim(*args)
StringUtil_trim = _Myoushu.StringUtil_trim

def StringUtil_split(*args):
  return _Myoushu.StringUtil_split(*args)
StringUtil_split = _Myoushu.StringUtil_split

def StringUtil_toLowerCase(*args):
  return _Myoushu.StringUtil_toLowerCase(*args)
StringUtil_toLowerCase = _Myoushu.StringUtil_toLowerCase

def StringUtil_toUpperCase(*args):
  return _Myoushu.StringUtil_toUpperCase(*args)
StringUtil_toUpperCase = _Myoushu.StringUtil_toUpperCase

def StringUtil_startsWith(*args):
  return _Myoushu.StringUtil_startsWith(*args)
StringUtil_startsWith = _Myoushu.StringUtil_startsWith

def StringUtil_endsWith(*args):
  return _Myoushu.StringUtil_endsWith(*args)
StringUtil_endsWith = _Myoushu.StringUtil_endsWith

def StringUtil_standardisePath(*args):
  return _Myoushu.StringUtil_standardisePath(*args)
StringUtil_standardisePath = _Myoushu.StringUtil_standardisePath

def StringUtil_splitFilename(*args):
  return _Myoushu.StringUtil_splitFilename(*args)
StringUtil_splitFilename = _Myoushu.StringUtil_splitFilename

def StringUtil_splitFullFilename(*args):
  return _Myoushu.StringUtil_splitFullFilename(*args)
StringUtil_splitFullFilename = _Myoushu.StringUtil_splitFullFilename

def StringUtil_splitBaseFilename(*args):
  return _Myoushu.StringUtil_splitBaseFilename(*args)
StringUtil_splitBaseFilename = _Myoushu.StringUtil_splitBaseFilename

def StringUtil_match(*args):
  return _Myoushu.StringUtil_match(*args)
StringUtil_match = _Myoushu.StringUtil_match
cvar = _Myoushu.cvar
StringUtil.BLANK = _Myoushu.cvar.StringUtil_BLANK

OGRE_MEMORY_TRACKER = _Myoushu.OGRE_MEMORY_TRACKER
OGRE_VERSION_MAJOR = _Myoushu.OGRE_VERSION_MAJOR
OGRE_VERSION_MINOR = _Myoushu.OGRE_VERSION_MINOR
OGRE_VERSION_PATCH = _Myoushu.OGRE_VERSION_PATCH
OGRE_VERSION_SUFFIX = _Myoushu.OGRE_VERSION_SUFFIX
OGRE_VERSION_NAME = _Myoushu.OGRE_VERSION_NAME
OGRE_VERSION = _Myoushu.OGRE_VERSION
OGRE_IS_NATIVE_WCHAR_T = _Myoushu.OGRE_IS_NATIVE_WCHAR_T
class UTFString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UTFString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UTFString, name)
    __repr__ = _swig_repr
    npos = _Myoushu.UTFString_npos
    def __init__(self, *args): 
        this = _Myoushu.new_UTFString(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_UTFString
    __del__ = lambda self : None;
    def size(self): return _Myoushu.UTFString_size(self)
    def length(self): return _Myoushu.UTFString_length(self)
    def length_Characters(self): return _Myoushu.UTFString_length_Characters(self)
    def max_size(self): return _Myoushu.UTFString_max_size(self)
    def reserve(self, *args): return _Myoushu.UTFString_reserve(self, *args)
    def resize(self, *args): return _Myoushu.UTFString_resize(self, *args)
    def swap(self, *args): return _Myoushu.UTFString_swap(self, *args)
    def empty(self): return _Myoushu.UTFString_empty(self)
    def c_str(self): return _Myoushu.UTFString_c_str(self)
    def data(self): return _Myoushu.UTFString_data(self)
    def capacity(self): return _Myoushu.UTFString_capacity(self)
    def clear(self): return _Myoushu.UTFString_clear(self)
    def substr(self, *args): return _Myoushu.UTFString_substr(self, *args)
    def push_back(self, *args): return _Myoushu.UTFString_push_back(self, *args)
    def inString(self, *args): return _Myoushu.UTFString_inString(self, *args)
    def asUTF8(self): return _Myoushu.UTFString_asUTF8(self)
    def asUTF8_c_str(self): return _Myoushu.UTFString_asUTF8_c_str(self)
    def asUTF32(self): return _Myoushu.UTFString_asUTF32(self)
    def asUTF32_c_str(self): return _Myoushu.UTFString_asUTF32_c_str(self)
    def asWStr(self): return _Myoushu.UTFString_asWStr(self)
    def asWStr_c_str(self): return _Myoushu.UTFString_asWStr_c_str(self)
    def at(self, *args): return _Myoushu.UTFString_at(self, *args)
    def getChar(self, *args): return _Myoushu.UTFString_getChar(self, *args)
    def setChar(self, *args): return _Myoushu.UTFString_setChar(self, *args)
    def begin(self, *args): return _Myoushu.UTFString_begin(self, *args)
    def end(self, *args): return _Myoushu.UTFString_end(self, *args)
    def rbegin(self, *args): return _Myoushu.UTFString_rbegin(self, *args)
    def rend(self, *args): return _Myoushu.UTFString_rend(self, *args)
    def assign(self, *args): return _Myoushu.UTFString_assign(self, *args)
    def append(self, *args): return _Myoushu.UTFString_append(self, *args)
    def insert(self, *args): return _Myoushu.UTFString_insert(self, *args)
    def erase(self, *args): return _Myoushu.UTFString_erase(self, *args)
    def replace(self, *args): return _Myoushu.UTFString_replace(self, *args)
    def compare(self, *args): return _Myoushu.UTFString_compare(self, *args)
    def find(self, *args): return _Myoushu.UTFString_find(self, *args)
    def rfind(self, *args): return _Myoushu.UTFString_rfind(self, *args)
    def find_first_of(self, *args): return _Myoushu.UTFString_find_first_of(self, *args)
    def find_first_not_of(self, *args): return _Myoushu.UTFString_find_first_not_of(self, *args)
    def find_last_of(self, *args): return _Myoushu.UTFString_find_last_of(self, *args)
    def find_last_not_of(self, *args): return _Myoushu.UTFString_find_last_not_of(self, *args)
    def __lt__(self, *args): return _Myoushu.UTFString___lt__(self, *args)
    def __le__(self, *args): return _Myoushu.UTFString___le__(self, *args)
    def __gt__(self, *args): return _Myoushu.UTFString___gt__(self, *args)
    def __ge__(self, *args): return _Myoushu.UTFString___ge__(self, *args)
    def __eq__(self, *args): return _Myoushu.UTFString___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.UTFString___ne__(self, *args)
    __swig_getmethods__["_utf16_independent_char"] = lambda x: _Myoushu.UTFString__utf16_independent_char
    if _newclass:_utf16_independent_char = staticmethod(_Myoushu.UTFString__utf16_independent_char)
    __swig_getmethods__["_utf16_surrogate_lead"] = lambda x: _Myoushu.UTFString__utf16_surrogate_lead
    if _newclass:_utf16_surrogate_lead = staticmethod(_Myoushu.UTFString__utf16_surrogate_lead)
    __swig_getmethods__["_utf16_surrogate_follow"] = lambda x: _Myoushu.UTFString__utf16_surrogate_follow
    if _newclass:_utf16_surrogate_follow = staticmethod(_Myoushu.UTFString__utf16_surrogate_follow)
    __swig_getmethods__["_utf16_char_length"] = lambda x: _Myoushu.UTFString__utf16_char_length
    if _newclass:_utf16_char_length = staticmethod(_Myoushu.UTFString__utf16_char_length)
    __swig_getmethods__["_utf16_to_utf32"] = lambda x: _Myoushu.UTFString__utf16_to_utf32
    if _newclass:_utf16_to_utf32 = staticmethod(_Myoushu.UTFString__utf16_to_utf32)
    __swig_getmethods__["_utf32_to_utf16"] = lambda x: _Myoushu.UTFString__utf32_to_utf16
    if _newclass:_utf32_to_utf16 = staticmethod(_Myoushu.UTFString__utf32_to_utf16)
    __swig_getmethods__["_utf8_start_char"] = lambda x: _Myoushu.UTFString__utf8_start_char
    if _newclass:_utf8_start_char = staticmethod(_Myoushu.UTFString__utf8_start_char)
    __swig_getmethods__["_utf8_char_length"] = lambda x: _Myoushu.UTFString__utf8_char_length
    if _newclass:_utf8_char_length = staticmethod(_Myoushu.UTFString__utf8_char_length)
    __swig_getmethods__["_utf8_to_utf32"] = lambda x: _Myoushu.UTFString__utf8_to_utf32
    if _newclass:_utf8_to_utf32 = staticmethod(_Myoushu.UTFString__utf8_to_utf32)
    __swig_getmethods__["_utf32_to_utf8"] = lambda x: _Myoushu.UTFString__utf32_to_utf8
    if _newclass:_utf32_to_utf8 = staticmethod(_Myoushu.UTFString__utf32_to_utf8)
    __swig_getmethods__["_verifyUTF8"] = lambda x: _Myoushu.UTFString__verifyUTF8
    if _newclass:_verifyUTF8 = staticmethod(_Myoushu.UTFString__verifyUTF8)
UTFString_swigregister = _Myoushu.UTFString_swigregister
UTFString_swigregister(UTFString)

def UTFString__utf16_independent_char(*args):
  return _Myoushu.UTFString__utf16_independent_char(*args)
UTFString__utf16_independent_char = _Myoushu.UTFString__utf16_independent_char

def UTFString__utf16_surrogate_lead(*args):
  return _Myoushu.UTFString__utf16_surrogate_lead(*args)
UTFString__utf16_surrogate_lead = _Myoushu.UTFString__utf16_surrogate_lead

def UTFString__utf16_surrogate_follow(*args):
  return _Myoushu.UTFString__utf16_surrogate_follow(*args)
UTFString__utf16_surrogate_follow = _Myoushu.UTFString__utf16_surrogate_follow

def UTFString__utf16_char_length(*args):
  return _Myoushu.UTFString__utf16_char_length(*args)
UTFString__utf16_char_length = _Myoushu.UTFString__utf16_char_length

def UTFString__utf16_to_utf32(*args):
  return _Myoushu.UTFString__utf16_to_utf32(*args)
UTFString__utf16_to_utf32 = _Myoushu.UTFString__utf16_to_utf32

def UTFString__utf32_to_utf16(*args):
  return _Myoushu.UTFString__utf32_to_utf16(*args)
UTFString__utf32_to_utf16 = _Myoushu.UTFString__utf32_to_utf16

def UTFString__utf8_start_char(*args):
  return _Myoushu.UTFString__utf8_start_char(*args)
UTFString__utf8_start_char = _Myoushu.UTFString__utf8_start_char

def UTFString__utf8_char_length(*args):
  return _Myoushu.UTFString__utf8_char_length(*args)
UTFString__utf8_char_length = _Myoushu.UTFString__utf8_char_length

def UTFString__utf8_to_utf32(*args):
  return _Myoushu.UTFString__utf8_to_utf32(*args)
UTFString__utf8_to_utf32 = _Myoushu.UTFString__utf8_to_utf32

def UTFString__utf32_to_utf8(*args):
  return _Myoushu.UTFString__utf32_to_utf8(*args)
UTFString__utf32_to_utf8 = _Myoushu.UTFString__utf32_to_utf8

def UTFString__verifyUTF8(*args):
  return _Myoushu.UTFString__verifyUTF8(*args)
UTFString__verifyUTF8 = _Myoushu.UTFString__verifyUTF8

CMPF_ALWAYS_FAIL = _Myoushu.CMPF_ALWAYS_FAIL
CMPF_ALWAYS_PASS = _Myoushu.CMPF_ALWAYS_PASS
CMPF_LESS = _Myoushu.CMPF_LESS
CMPF_LESS_EQUAL = _Myoushu.CMPF_LESS_EQUAL
CMPF_EQUAL = _Myoushu.CMPF_EQUAL
CMPF_NOT_EQUAL = _Myoushu.CMPF_NOT_EQUAL
CMPF_GREATER_EQUAL = _Myoushu.CMPF_GREATER_EQUAL
CMPF_GREATER = _Myoushu.CMPF_GREATER
TFO_NONE = _Myoushu.TFO_NONE
TFO_BILINEAR = _Myoushu.TFO_BILINEAR
TFO_TRILINEAR = _Myoushu.TFO_TRILINEAR
TFO_ANISOTROPIC = _Myoushu.TFO_ANISOTROPIC
FT_MIN = _Myoushu.FT_MIN
FT_MAG = _Myoushu.FT_MAG
FT_MIP = _Myoushu.FT_MIP
FO_NONE = _Myoushu.FO_NONE
FO_POINT = _Myoushu.FO_POINT
FO_LINEAR = _Myoushu.FO_LINEAR
FO_ANISOTROPIC = _Myoushu.FO_ANISOTROPIC
SO_FLAT = _Myoushu.SO_FLAT
SO_GOURAUD = _Myoushu.SO_GOURAUD
SO_PHONG = _Myoushu.SO_PHONG
FOG_NONE = _Myoushu.FOG_NONE
FOG_EXP = _Myoushu.FOG_EXP
FOG_EXP2 = _Myoushu.FOG_EXP2
FOG_LINEAR = _Myoushu.FOG_LINEAR
CULL_NONE = _Myoushu.CULL_NONE
CULL_CLOCKWISE = _Myoushu.CULL_CLOCKWISE
CULL_ANTICLOCKWISE = _Myoushu.CULL_ANTICLOCKWISE
MANUAL_CULL_NONE = _Myoushu.MANUAL_CULL_NONE
MANUAL_CULL_BACK = _Myoushu.MANUAL_CULL_BACK
MANUAL_CULL_FRONT = _Myoushu.MANUAL_CULL_FRONT
WFT_SINE = _Myoushu.WFT_SINE
WFT_TRIANGLE = _Myoushu.WFT_TRIANGLE
WFT_SQUARE = _Myoushu.WFT_SQUARE
WFT_SAWTOOTH = _Myoushu.WFT_SAWTOOTH
WFT_INVERSE_SAWTOOTH = _Myoushu.WFT_INVERSE_SAWTOOTH
WFT_PWM = _Myoushu.WFT_PWM
PM_POINTS = _Myoushu.PM_POINTS
PM_WIREFRAME = _Myoushu.PM_WIREFRAME
PM_SOLID = _Myoushu.PM_SOLID
SHADOWTYPE_NONE = _Myoushu.SHADOWTYPE_NONE
SHADOWDETAILTYPE_ADDITIVE = _Myoushu.SHADOWDETAILTYPE_ADDITIVE
SHADOWDETAILTYPE_MODULATIVE = _Myoushu.SHADOWDETAILTYPE_MODULATIVE
SHADOWDETAILTYPE_INTEGRATED = _Myoushu.SHADOWDETAILTYPE_INTEGRATED
SHADOWDETAILTYPE_STENCIL = _Myoushu.SHADOWDETAILTYPE_STENCIL
SHADOWDETAILTYPE_TEXTURE = _Myoushu.SHADOWDETAILTYPE_TEXTURE
SHADOWTYPE_STENCIL_MODULATIVE = _Myoushu.SHADOWTYPE_STENCIL_MODULATIVE
SHADOWTYPE_STENCIL_ADDITIVE = _Myoushu.SHADOWTYPE_STENCIL_ADDITIVE
SHADOWTYPE_TEXTURE_MODULATIVE = _Myoushu.SHADOWTYPE_TEXTURE_MODULATIVE
SHADOWTYPE_TEXTURE_ADDITIVE = _Myoushu.SHADOWTYPE_TEXTURE_ADDITIVE
SHADOWTYPE_TEXTURE_ADDITIVE_INTEGRATED = _Myoushu.SHADOWTYPE_TEXTURE_ADDITIVE_INTEGRATED
SHADOWTYPE_TEXTURE_MODULATIVE_INTEGRATED = _Myoushu.SHADOWTYPE_TEXTURE_MODULATIVE_INTEGRATED
TVC_NONE = _Myoushu.TVC_NONE
TVC_AMBIENT = _Myoushu.TVC_AMBIENT
TVC_DIFFUSE = _Myoushu.TVC_DIFFUSE
TVC_SPECULAR = _Myoushu.TVC_SPECULAR
TVC_EMISSIVE = _Myoushu.TVC_EMISSIVE
SM_DIRECTION = _Myoushu.SM_DIRECTION
SM_DISTANCE = _Myoushu.SM_DISTANCE
FBT_COLOUR = _Myoushu.FBT_COLOUR
FBT_DEPTH = _Myoushu.FBT_DEPTH
FBT_STENCIL = _Myoushu.FBT_STENCIL
class Box(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Box, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Box, name)
    __repr__ = _swig_repr
    __swig_setmethods__["left"] = _Myoushu.Box_left_set
    __swig_getmethods__["left"] = _Myoushu.Box_left_get
    if _newclass:left = _swig_property(_Myoushu.Box_left_get, _Myoushu.Box_left_set)
    __swig_setmethods__["top"] = _Myoushu.Box_top_set
    __swig_getmethods__["top"] = _Myoushu.Box_top_get
    if _newclass:top = _swig_property(_Myoushu.Box_top_get, _Myoushu.Box_top_set)
    __swig_setmethods__["right"] = _Myoushu.Box_right_set
    __swig_getmethods__["right"] = _Myoushu.Box_right_get
    if _newclass:right = _swig_property(_Myoushu.Box_right_get, _Myoushu.Box_right_set)
    __swig_setmethods__["bottom"] = _Myoushu.Box_bottom_set
    __swig_getmethods__["bottom"] = _Myoushu.Box_bottom_get
    if _newclass:bottom = _swig_property(_Myoushu.Box_bottom_get, _Myoushu.Box_bottom_set)
    __swig_setmethods__["front"] = _Myoushu.Box_front_set
    __swig_getmethods__["front"] = _Myoushu.Box_front_get
    if _newclass:front = _swig_property(_Myoushu.Box_front_get, _Myoushu.Box_front_set)
    __swig_setmethods__["back"] = _Myoushu.Box_back_set
    __swig_getmethods__["back"] = _Myoushu.Box_back_get
    if _newclass:back = _swig_property(_Myoushu.Box_back_get, _Myoushu.Box_back_set)
    def __init__(self, *args): 
        this = _Myoushu.new_Box(*args)
        try: self.this.append(this)
        except: self.this = this
    def contains(self, *args): return _Myoushu.Box_contains(self, *args)
    def getWidth(self): return _Myoushu.Box_getWidth(self)
    def getHeight(self): return _Myoushu.Box_getHeight(self)
    def getDepth(self): return _Myoushu.Box_getDepth(self)
    __swig_destroy__ = _Myoushu.delete_Box
    __del__ = lambda self : None;
Box_swigregister = _Myoushu.Box_swigregister
Box_swigregister(Box)

def __add__(*args):
  return _Myoushu.__add__(*args)
__add__ = _Myoushu.__add__

def __sub__(*args):
  return _Myoushu.__sub__(*args)
__sub__ = _Myoushu.__sub__

def __eq__(*args):
  return _Myoushu.__eq__(*args)
__eq__ = _Myoushu.__eq__

def __ne__(*args):
  return _Myoushu.__ne__(*args)
__ne__ = _Myoushu.__ne__

def __lt__(*args):
  return _Myoushu.__lt__(*args)
__lt__ = _Myoushu.__lt__

def __le__(*args):
  return _Myoushu.__le__(*args)
__le__ = _Myoushu.__le__

def __gt__(*args):
  return _Myoushu.__gt__(*args)
__gt__ = _Myoushu.__gt__

def __ge__(*args):
  return _Myoushu.__ge__(*args)
__ge__ = _Myoushu.__ge__

def __lshift__(*args):
  return _Myoushu.__lshift__(*args)
__lshift__ = _Myoushu.__lshift__


def findCommandLineOpts(*args):
  return _Myoushu.findCommandLineOpts(*args)
findCommandLineOpts = _Myoushu.findCommandLineOpts
CLIPPED_NONE = _Myoushu.CLIPPED_NONE
CLIPPED_SOME = _Myoushu.CLIPPED_SOME
CLIPPED_ALL = _Myoushu.CLIPPED_ALL
class Radian(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Radian, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Radian, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_Radian(*args)
        try: self.this.append(this)
        except: self.this = this
    def valueDegrees(self): return _Myoushu.Radian_valueDegrees(self)
    def valueRadians(self): return _Myoushu.Radian_valueRadians(self)
    def valueAngleUnits(self): return _Myoushu.Radian_valueAngleUnits(self)
    def __pos__(self): return _Myoushu.Radian___pos__(self)
    def __add__(self, *args): return _Myoushu.Radian___add__(self, *args)
    def __iadd__(self, *args): return _Myoushu.Radian___iadd__(self, *args)
    def __neg__(self): return _Myoushu.Radian___neg__(self)
    def __sub__(self, *args): return _Myoushu.Radian___sub__(self, *args)
    def __isub__(self, *args): return _Myoushu.Radian___isub__(self, *args)
    def __mul__(self, *args): return _Myoushu.Radian___mul__(self, *args)
    def __imul__(self, *args): return _Myoushu.Radian___imul__(self, *args)
    def __div__(self, *args): return _Myoushu.Radian___div__(self, *args)
    def __idiv__(self, *args): return _Myoushu.Radian___idiv__(self, *args)
    def __lt__(self, *args): return _Myoushu.Radian___lt__(self, *args)
    def __le__(self, *args): return _Myoushu.Radian___le__(self, *args)
    def __eq__(self, *args): return _Myoushu.Radian___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.Radian___ne__(self, *args)
    def __ge__(self, *args): return _Myoushu.Radian___ge__(self, *args)
    def __gt__(self, *args): return _Myoushu.Radian___gt__(self, *args)
    __swig_destroy__ = _Myoushu.delete_Radian
    __del__ = lambda self : None;
Radian_swigregister = _Myoushu.Radian_swigregister
Radian_swigregister(Radian)

class Degree(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Degree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Degree, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_Degree(*args)
        try: self.this.append(this)
        except: self.this = this
    def valueDegrees(self): return _Myoushu.Degree_valueDegrees(self)
    def valueRadians(self): return _Myoushu.Degree_valueRadians(self)
    def valueAngleUnits(self): return _Myoushu.Degree_valueAngleUnits(self)
    def __pos__(self): return _Myoushu.Degree___pos__(self)
    def __add__(self, *args): return _Myoushu.Degree___add__(self, *args)
    def __iadd__(self, *args): return _Myoushu.Degree___iadd__(self, *args)
    def __neg__(self): return _Myoushu.Degree___neg__(self)
    def __sub__(self, *args): return _Myoushu.Degree___sub__(self, *args)
    def __isub__(self, *args): return _Myoushu.Degree___isub__(self, *args)
    def __mul__(self, *args): return _Myoushu.Degree___mul__(self, *args)
    def __imul__(self, *args): return _Myoushu.Degree___imul__(self, *args)
    def __div__(self, *args): return _Myoushu.Degree___div__(self, *args)
    def __idiv__(self, *args): return _Myoushu.Degree___idiv__(self, *args)
    def __lt__(self, *args): return _Myoushu.Degree___lt__(self, *args)
    def __le__(self, *args): return _Myoushu.Degree___le__(self, *args)
    def __eq__(self, *args): return _Myoushu.Degree___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.Degree___ne__(self, *args)
    def __ge__(self, *args): return _Myoushu.Degree___ge__(self, *args)
    def __gt__(self, *args): return _Myoushu.Degree___gt__(self, *args)
    __swig_destroy__ = _Myoushu.delete_Degree
    __del__ = lambda self : None;
Degree_swigregister = _Myoushu.Degree_swigregister
Degree_swigregister(Degree)

class Angle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Angle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Angle, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_Angle(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Angle
    __del__ = lambda self : None;
Angle_swigregister = _Myoushu.Angle_swigregister
Angle_swigregister(Angle)

class Math(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Math, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Math, name)
    __repr__ = _swig_repr
    AU_DEGREE = _Myoushu.Math_AU_DEGREE
    AU_RADIAN = _Myoushu.Math_AU_RADIAN
    def __init__(self, trigTableSize = 4096): 
        this = _Myoushu.new_Math(trigTableSize)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Math
    __del__ = lambda self : None;
    __swig_getmethods__["IAbs"] = lambda x: _Myoushu.Math_IAbs
    if _newclass:IAbs = staticmethod(_Myoushu.Math_IAbs)
    __swig_getmethods__["ICeil"] = lambda x: _Myoushu.Math_ICeil
    if _newclass:ICeil = staticmethod(_Myoushu.Math_ICeil)
    __swig_getmethods__["IFloor"] = lambda x: _Myoushu.Math_IFloor
    if _newclass:IFloor = staticmethod(_Myoushu.Math_IFloor)
    __swig_getmethods__["ISign"] = lambda x: _Myoushu.Math_ISign
    if _newclass:ISign = staticmethod(_Myoushu.Math_ISign)
    __swig_getmethods__["Abs"] = lambda x: _Myoushu.Math_Abs
    if _newclass:Abs = staticmethod(_Myoushu.Math_Abs)
    __swig_getmethods__["ACos"] = lambda x: _Myoushu.Math_ACos
    if _newclass:ACos = staticmethod(_Myoushu.Math_ACos)
    __swig_getmethods__["ASin"] = lambda x: _Myoushu.Math_ASin
    if _newclass:ASin = staticmethod(_Myoushu.Math_ASin)
    __swig_getmethods__["ATan"] = lambda x: _Myoushu.Math_ATan
    if _newclass:ATan = staticmethod(_Myoushu.Math_ATan)
    __swig_getmethods__["ATan2"] = lambda x: _Myoushu.Math_ATan2
    if _newclass:ATan2 = staticmethod(_Myoushu.Math_ATan2)
    __swig_getmethods__["Ceil"] = lambda x: _Myoushu.Math_Ceil
    if _newclass:Ceil = staticmethod(_Myoushu.Math_Ceil)
    __swig_getmethods__["Cos"] = lambda x: _Myoushu.Math_Cos
    if _newclass:Cos = staticmethod(_Myoushu.Math_Cos)
    __swig_getmethods__["Exp"] = lambda x: _Myoushu.Math_Exp
    if _newclass:Exp = staticmethod(_Myoushu.Math_Exp)
    __swig_getmethods__["Floor"] = lambda x: _Myoushu.Math_Floor
    if _newclass:Floor = staticmethod(_Myoushu.Math_Floor)
    __swig_getmethods__["Log"] = lambda x: _Myoushu.Math_Log
    if _newclass:Log = staticmethod(_Myoushu.Math_Log)
    __swig_getmethods__["Pow"] = lambda x: _Myoushu.Math_Pow
    if _newclass:Pow = staticmethod(_Myoushu.Math_Pow)
    __swig_getmethods__["Sign"] = lambda x: _Myoushu.Math_Sign
    if _newclass:Sign = staticmethod(_Myoushu.Math_Sign)
    __swig_getmethods__["Sin"] = lambda x: _Myoushu.Math_Sin
    if _newclass:Sin = staticmethod(_Myoushu.Math_Sin)
    __swig_getmethods__["Sqr"] = lambda x: _Myoushu.Math_Sqr
    if _newclass:Sqr = staticmethod(_Myoushu.Math_Sqr)
    __swig_getmethods__["Sqrt"] = lambda x: _Myoushu.Math_Sqrt
    if _newclass:Sqrt = staticmethod(_Myoushu.Math_Sqrt)
    __swig_getmethods__["InvSqrt"] = lambda x: _Myoushu.Math_InvSqrt
    if _newclass:InvSqrt = staticmethod(_Myoushu.Math_InvSqrt)
    __swig_getmethods__["UnitRandom"] = lambda x: _Myoushu.Math_UnitRandom
    if _newclass:UnitRandom = staticmethod(_Myoushu.Math_UnitRandom)
    __swig_getmethods__["RangeRandom"] = lambda x: _Myoushu.Math_RangeRandom
    if _newclass:RangeRandom = staticmethod(_Myoushu.Math_RangeRandom)
    __swig_getmethods__["SymmetricRandom"] = lambda x: _Myoushu.Math_SymmetricRandom
    if _newclass:SymmetricRandom = staticmethod(_Myoushu.Math_SymmetricRandom)
    __swig_getmethods__["Tan"] = lambda x: _Myoushu.Math_Tan
    if _newclass:Tan = staticmethod(_Myoushu.Math_Tan)
    __swig_getmethods__["DegreesToRadians"] = lambda x: _Myoushu.Math_DegreesToRadians
    if _newclass:DegreesToRadians = staticmethod(_Myoushu.Math_DegreesToRadians)
    __swig_getmethods__["RadiansToDegrees"] = lambda x: _Myoushu.Math_RadiansToDegrees
    if _newclass:RadiansToDegrees = staticmethod(_Myoushu.Math_RadiansToDegrees)
    __swig_getmethods__["setAngleUnit"] = lambda x: _Myoushu.Math_setAngleUnit
    if _newclass:setAngleUnit = staticmethod(_Myoushu.Math_setAngleUnit)
    __swig_getmethods__["getAngleUnit"] = lambda x: _Myoushu.Math_getAngleUnit
    if _newclass:getAngleUnit = staticmethod(_Myoushu.Math_getAngleUnit)
    __swig_getmethods__["AngleUnitsToRadians"] = lambda x: _Myoushu.Math_AngleUnitsToRadians
    if _newclass:AngleUnitsToRadians = staticmethod(_Myoushu.Math_AngleUnitsToRadians)
    __swig_getmethods__["RadiansToAngleUnits"] = lambda x: _Myoushu.Math_RadiansToAngleUnits
    if _newclass:RadiansToAngleUnits = staticmethod(_Myoushu.Math_RadiansToAngleUnits)
    __swig_getmethods__["AngleUnitsToDegrees"] = lambda x: _Myoushu.Math_AngleUnitsToDegrees
    if _newclass:AngleUnitsToDegrees = staticmethod(_Myoushu.Math_AngleUnitsToDegrees)
    __swig_getmethods__["DegreesToAngleUnits"] = lambda x: _Myoushu.Math_DegreesToAngleUnits
    if _newclass:DegreesToAngleUnits = staticmethod(_Myoushu.Math_DegreesToAngleUnits)
    __swig_getmethods__["pointInTri2D"] = lambda x: _Myoushu.Math_pointInTri2D
    if _newclass:pointInTri2D = staticmethod(_Myoushu.Math_pointInTri2D)
    __swig_getmethods__["pointInTri3D"] = lambda x: _Myoushu.Math_pointInTri3D
    if _newclass:pointInTri3D = staticmethod(_Myoushu.Math_pointInTri3D)
    __swig_getmethods__["intersects"] = lambda x: _Myoushu.Math_intersects
    if _newclass:intersects = staticmethod(_Myoushu.Math_intersects)
    __swig_getmethods__["RealEqual"] = lambda x: _Myoushu.Math_RealEqual
    if _newclass:RealEqual = staticmethod(_Myoushu.Math_RealEqual)
    __swig_getmethods__["calculateTangentSpaceVector"] = lambda x: _Myoushu.Math_calculateTangentSpaceVector
    if _newclass:calculateTangentSpaceVector = staticmethod(_Myoushu.Math_calculateTangentSpaceVector)
    __swig_getmethods__["buildReflectionMatrix"] = lambda x: _Myoushu.Math_buildReflectionMatrix
    if _newclass:buildReflectionMatrix = staticmethod(_Myoushu.Math_buildReflectionMatrix)
    __swig_getmethods__["calculateFaceNormal"] = lambda x: _Myoushu.Math_calculateFaceNormal
    if _newclass:calculateFaceNormal = staticmethod(_Myoushu.Math_calculateFaceNormal)
    __swig_getmethods__["calculateBasicFaceNormal"] = lambda x: _Myoushu.Math_calculateBasicFaceNormal
    if _newclass:calculateBasicFaceNormal = staticmethod(_Myoushu.Math_calculateBasicFaceNormal)
    __swig_getmethods__["calculateFaceNormalWithoutNormalize"] = lambda x: _Myoushu.Math_calculateFaceNormalWithoutNormalize
    if _newclass:calculateFaceNormalWithoutNormalize = staticmethod(_Myoushu.Math_calculateFaceNormalWithoutNormalize)
    __swig_getmethods__["calculateBasicFaceNormalWithoutNormalize"] = lambda x: _Myoushu.Math_calculateBasicFaceNormalWithoutNormalize
    if _newclass:calculateBasicFaceNormalWithoutNormalize = staticmethod(_Myoushu.Math_calculateBasicFaceNormalWithoutNormalize)
    __swig_getmethods__["gaussianDistribution"] = lambda x: _Myoushu.Math_gaussianDistribution
    if _newclass:gaussianDistribution = staticmethod(_Myoushu.Math_gaussianDistribution)
    __swig_getmethods__["makeViewMatrix"] = lambda x: _Myoushu.Math_makeViewMatrix
    if _newclass:makeViewMatrix = staticmethod(_Myoushu.Math_makeViewMatrix)
Math_swigregister = _Myoushu.Math_swigregister
Math_swigregister(Math)

def Math_IAbs(*args):
  return _Myoushu.Math_IAbs(*args)
Math_IAbs = _Myoushu.Math_IAbs

def Math_ICeil(*args):
  return _Myoushu.Math_ICeil(*args)
Math_ICeil = _Myoushu.Math_ICeil

def Math_IFloor(*args):
  return _Myoushu.Math_IFloor(*args)
Math_IFloor = _Myoushu.Math_IFloor

def Math_ISign(*args):
  return _Myoushu.Math_ISign(*args)
Math_ISign = _Myoushu.Math_ISign

def Math_Abs(*args):
  return _Myoushu.Math_Abs(*args)
Math_Abs = _Myoushu.Math_Abs

def Math_ACos(*args):
  return _Myoushu.Math_ACos(*args)
Math_ACos = _Myoushu.Math_ACos

def Math_ASin(*args):
  return _Myoushu.Math_ASin(*args)
Math_ASin = _Myoushu.Math_ASin

def Math_ATan(*args):
  return _Myoushu.Math_ATan(*args)
Math_ATan = _Myoushu.Math_ATan

def Math_ATan2(*args):
  return _Myoushu.Math_ATan2(*args)
Math_ATan2 = _Myoushu.Math_ATan2

def Math_Ceil(*args):
  return _Myoushu.Math_Ceil(*args)
Math_Ceil = _Myoushu.Math_Ceil

def Math_Cos(*args):
  return _Myoushu.Math_Cos(*args)
Math_Cos = _Myoushu.Math_Cos

def Math_Exp(*args):
  return _Myoushu.Math_Exp(*args)
Math_Exp = _Myoushu.Math_Exp

def Math_Floor(*args):
  return _Myoushu.Math_Floor(*args)
Math_Floor = _Myoushu.Math_Floor

def Math_Log(*args):
  return _Myoushu.Math_Log(*args)
Math_Log = _Myoushu.Math_Log

def Math_Pow(*args):
  return _Myoushu.Math_Pow(*args)
Math_Pow = _Myoushu.Math_Pow

def Math_Sign(*args):
  return _Myoushu.Math_Sign(*args)
Math_Sign = _Myoushu.Math_Sign

def Math_Sin(*args):
  return _Myoushu.Math_Sin(*args)
Math_Sin = _Myoushu.Math_Sin

def Math_Sqr(*args):
  return _Myoushu.Math_Sqr(*args)
Math_Sqr = _Myoushu.Math_Sqr

def Math_Sqrt(*args):
  return _Myoushu.Math_Sqrt(*args)
Math_Sqrt = _Myoushu.Math_Sqrt

def Math_InvSqrt(*args):
  return _Myoushu.Math_InvSqrt(*args)
Math_InvSqrt = _Myoushu.Math_InvSqrt

def Math_UnitRandom():
  return _Myoushu.Math_UnitRandom()
Math_UnitRandom = _Myoushu.Math_UnitRandom

def Math_RangeRandom(*args):
  return _Myoushu.Math_RangeRandom(*args)
Math_RangeRandom = _Myoushu.Math_RangeRandom

def Math_SymmetricRandom():
  return _Myoushu.Math_SymmetricRandom()
Math_SymmetricRandom = _Myoushu.Math_SymmetricRandom

def Math_Tan(*args):
  return _Myoushu.Math_Tan(*args)
Math_Tan = _Myoushu.Math_Tan

def Math_DegreesToRadians(*args):
  return _Myoushu.Math_DegreesToRadians(*args)
Math_DegreesToRadians = _Myoushu.Math_DegreesToRadians

def Math_RadiansToDegrees(*args):
  return _Myoushu.Math_RadiansToDegrees(*args)
Math_RadiansToDegrees = _Myoushu.Math_RadiansToDegrees

def Math_setAngleUnit(*args):
  return _Myoushu.Math_setAngleUnit(*args)
Math_setAngleUnit = _Myoushu.Math_setAngleUnit

def Math_getAngleUnit():
  return _Myoushu.Math_getAngleUnit()
Math_getAngleUnit = _Myoushu.Math_getAngleUnit

def Math_AngleUnitsToRadians(*args):
  return _Myoushu.Math_AngleUnitsToRadians(*args)
Math_AngleUnitsToRadians = _Myoushu.Math_AngleUnitsToRadians

def Math_RadiansToAngleUnits(*args):
  return _Myoushu.Math_RadiansToAngleUnits(*args)
Math_RadiansToAngleUnits = _Myoushu.Math_RadiansToAngleUnits

def Math_AngleUnitsToDegrees(*args):
  return _Myoushu.Math_AngleUnitsToDegrees(*args)
Math_AngleUnitsToDegrees = _Myoushu.Math_AngleUnitsToDegrees

def Math_DegreesToAngleUnits(*args):
  return _Myoushu.Math_DegreesToAngleUnits(*args)
Math_DegreesToAngleUnits = _Myoushu.Math_DegreesToAngleUnits

def Math_pointInTri2D(*args):
  return _Myoushu.Math_pointInTri2D(*args)
Math_pointInTri2D = _Myoushu.Math_pointInTri2D

def Math_pointInTri3D(*args):
  return _Myoushu.Math_pointInTri3D(*args)
Math_pointInTri3D = _Myoushu.Math_pointInTri3D

def Math_intersects(*args):
  return _Myoushu.Math_intersects(*args)
Math_intersects = _Myoushu.Math_intersects

def Math_RealEqual(*args):
  return _Myoushu.Math_RealEqual(*args)
Math_RealEqual = _Myoushu.Math_RealEqual

def Math_calculateTangentSpaceVector(*args):
  return _Myoushu.Math_calculateTangentSpaceVector(*args)
Math_calculateTangentSpaceVector = _Myoushu.Math_calculateTangentSpaceVector

def Math_buildReflectionMatrix(*args):
  return _Myoushu.Math_buildReflectionMatrix(*args)
Math_buildReflectionMatrix = _Myoushu.Math_buildReflectionMatrix

def Math_calculateFaceNormal(*args):
  return _Myoushu.Math_calculateFaceNormal(*args)
Math_calculateFaceNormal = _Myoushu.Math_calculateFaceNormal

def Math_calculateBasicFaceNormal(*args):
  return _Myoushu.Math_calculateBasicFaceNormal(*args)
Math_calculateBasicFaceNormal = _Myoushu.Math_calculateBasicFaceNormal

def Math_calculateFaceNormalWithoutNormalize(*args):
  return _Myoushu.Math_calculateFaceNormalWithoutNormalize(*args)
Math_calculateFaceNormalWithoutNormalize = _Myoushu.Math_calculateFaceNormalWithoutNormalize

def Math_calculateBasicFaceNormalWithoutNormalize(*args):
  return _Myoushu.Math_calculateBasicFaceNormalWithoutNormalize(*args)
Math_calculateBasicFaceNormalWithoutNormalize = _Myoushu.Math_calculateBasicFaceNormalWithoutNormalize

def Math_gaussianDistribution(*args):
  return _Myoushu.Math_gaussianDistribution(*args)
Math_gaussianDistribution = _Myoushu.Math_gaussianDistribution

def Math_makeViewMatrix(*args):
  return _Myoushu.Math_makeViewMatrix(*args)
Math_makeViewMatrix = _Myoushu.Math_makeViewMatrix
Math.POS_INFINITY = _Myoushu.cvar.Math_POS_INFINITY
Math.NEG_INFINITY = _Myoushu.cvar.Math_NEG_INFINITY
Math.PI = _Myoushu.cvar.Math_PI
Math.TWO_PI = _Myoushu.cvar.Math_TWO_PI
Math.HALF_PI = _Myoushu.cvar.Math_HALF_PI
Math.fDeg2Rad = _Myoushu.cvar.Math_fDeg2Rad
Math.fRad2Deg = _Myoushu.cvar.Math_fRad2Deg

class Vector2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _Myoushu.Vector2_x_set
    __swig_getmethods__["x"] = _Myoushu.Vector2_x_get
    if _newclass:x = _swig_property(_Myoushu.Vector2_x_get, _Myoushu.Vector2_x_set)
    __swig_setmethods__["y"] = _Myoushu.Vector2_y_set
    __swig_getmethods__["y"] = _Myoushu.Vector2_y_get
    if _newclass:y = _swig_property(_Myoushu.Vector2_y_get, _Myoushu.Vector2_y_set)
    def __init__(self, *args): 
        this = _Myoushu.new_Vector2(*args)
        try: self.this.append(this)
        except: self.this = this
    def ptr(self, *args): return _Myoushu.Vector2_ptr(self, *args)
    def __eq__(self, *args): return _Myoushu.Vector2___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.Vector2___ne__(self, *args)
    def __add__(self, *args): return _Myoushu.Vector2___add__(self, *args)
    def __sub__(self, *args): return _Myoushu.Vector2___sub__(self, *args)
    def __mul__(self, *args): return _Myoushu.Vector2___mul__(self, *args)
    def __div__(self, *args): return _Myoushu.Vector2___div__(self, *args)
    def __pos__(self): return _Myoushu.Vector2___pos__(self)
    def __neg__(self): return _Myoushu.Vector2___neg__(self)
    def __iadd__(self, *args): return _Myoushu.Vector2___iadd__(self, *args)
    def __isub__(self, *args): return _Myoushu.Vector2___isub__(self, *args)
    def __imul__(self, *args): return _Myoushu.Vector2___imul__(self, *args)
    def __idiv__(self, *args): return _Myoushu.Vector2___idiv__(self, *args)
    def length(self): return _Myoushu.Vector2_length(self)
    def squaredLength(self): return _Myoushu.Vector2_squaredLength(self)
    def dotProduct(self, *args): return _Myoushu.Vector2_dotProduct(self, *args)
    def normalise(self): return _Myoushu.Vector2_normalise(self)
    def midPoint(self, *args): return _Myoushu.Vector2_midPoint(self, *args)
    def __lt__(self, *args): return _Myoushu.Vector2___lt__(self, *args)
    def __gt__(self, *args): return _Myoushu.Vector2___gt__(self, *args)
    def makeFloor(self, *args): return _Myoushu.Vector2_makeFloor(self, *args)
    def makeCeil(self, *args): return _Myoushu.Vector2_makeCeil(self, *args)
    def perpendicular(self): return _Myoushu.Vector2_perpendicular(self)
    def crossProduct(self, *args): return _Myoushu.Vector2_crossProduct(self, *args)
    def randomDeviant(self, *args): return _Myoushu.Vector2_randomDeviant(self, *args)
    def isZeroLength(self): return _Myoushu.Vector2_isZeroLength(self)
    def normalisedCopy(self): return _Myoushu.Vector2_normalisedCopy(self)
    def reflect(self, *args): return _Myoushu.Vector2_reflect(self, *args)
    __swig_destroy__ = _Myoushu.delete_Vector2
    __del__ = lambda self : None;
Vector2_swigregister = _Myoushu.Vector2_swigregister
Vector2_swigregister(Vector2)

def __div__(*args):
  return _Myoushu.__div__(*args)
__div__ = _Myoushu.__div__
Vector2.ZERO = _Myoushu.cvar.Vector2_ZERO
Vector2.UNIT_X = _Myoushu.cvar.Vector2_UNIT_X
Vector2.UNIT_Y = _Myoushu.cvar.Vector2_UNIT_Y
Vector2.NEGATIVE_UNIT_X = _Myoushu.cvar.Vector2_NEGATIVE_UNIT_X
Vector2.NEGATIVE_UNIT_Y = _Myoushu.cvar.Vector2_NEGATIVE_UNIT_Y
Vector2.UNIT_SCALE = _Myoushu.cvar.Vector2_UNIT_SCALE

class Vector3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _Myoushu.Vector3_x_set
    __swig_getmethods__["x"] = _Myoushu.Vector3_x_get
    if _newclass:x = _swig_property(_Myoushu.Vector3_x_get, _Myoushu.Vector3_x_set)
    __swig_setmethods__["y"] = _Myoushu.Vector3_y_set
    __swig_getmethods__["y"] = _Myoushu.Vector3_y_get
    if _newclass:y = _swig_property(_Myoushu.Vector3_y_get, _Myoushu.Vector3_y_set)
    __swig_setmethods__["z"] = _Myoushu.Vector3_z_set
    __swig_getmethods__["z"] = _Myoushu.Vector3_z_get
    if _newclass:z = _swig_property(_Myoushu.Vector3_z_get, _Myoushu.Vector3_z_set)
    def __init__(self, *args): 
        this = _Myoushu.new_Vector3(*args)
        try: self.this.append(this)
        except: self.this = this
    def ptr(self, *args): return _Myoushu.Vector3_ptr(self, *args)
    def __eq__(self, *args): return _Myoushu.Vector3___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.Vector3___ne__(self, *args)
    def __add__(self, *args): return _Myoushu.Vector3___add__(self, *args)
    def __sub__(self, *args): return _Myoushu.Vector3___sub__(self, *args)
    def __mul__(self, *args): return _Myoushu.Vector3___mul__(self, *args)
    def __div__(self, *args): return _Myoushu.Vector3___div__(self, *args)
    def __pos__(self): return _Myoushu.Vector3___pos__(self)
    def __neg__(self): return _Myoushu.Vector3___neg__(self)
    def __iadd__(self, *args): return _Myoushu.Vector3___iadd__(self, *args)
    def __isub__(self, *args): return _Myoushu.Vector3___isub__(self, *args)
    def __imul__(self, *args): return _Myoushu.Vector3___imul__(self, *args)
    def __idiv__(self, *args): return _Myoushu.Vector3___idiv__(self, *args)
    def length(self): return _Myoushu.Vector3_length(self)
    def squaredLength(self): return _Myoushu.Vector3_squaredLength(self)
    def distance(self, *args): return _Myoushu.Vector3_distance(self, *args)
    def squaredDistance(self, *args): return _Myoushu.Vector3_squaredDistance(self, *args)
    def dotProduct(self, *args): return _Myoushu.Vector3_dotProduct(self, *args)
    def absDotProduct(self, *args): return _Myoushu.Vector3_absDotProduct(self, *args)
    def normalise(self): return _Myoushu.Vector3_normalise(self)
    def crossProduct(self, *args): return _Myoushu.Vector3_crossProduct(self, *args)
    def midPoint(self, *args): return _Myoushu.Vector3_midPoint(self, *args)
    def __lt__(self, *args): return _Myoushu.Vector3___lt__(self, *args)
    def __gt__(self, *args): return _Myoushu.Vector3___gt__(self, *args)
    def makeFloor(self, *args): return _Myoushu.Vector3_makeFloor(self, *args)
    def makeCeil(self, *args): return _Myoushu.Vector3_makeCeil(self, *args)
    def perpendicular(self): return _Myoushu.Vector3_perpendicular(self)
    def randomDeviant(self, *args): return _Myoushu.Vector3_randomDeviant(self, *args)
    def angleBetween(self, *args): return _Myoushu.Vector3_angleBetween(self, *args)
    def getRotationTo(self, *args): return _Myoushu.Vector3_getRotationTo(self, *args)
    def isZeroLength(self): return _Myoushu.Vector3_isZeroLength(self)
    def normalisedCopy(self): return _Myoushu.Vector3_normalisedCopy(self)
    def reflect(self, *args): return _Myoushu.Vector3_reflect(self, *args)
    def positionEquals(self, *args): return _Myoushu.Vector3_positionEquals(self, *args)
    def positionCloses(self, *args): return _Myoushu.Vector3_positionCloses(self, *args)
    def directionEquals(self, *args): return _Myoushu.Vector3_directionEquals(self, *args)
    __swig_destroy__ = _Myoushu.delete_Vector3
    __del__ = lambda self : None;
Vector3_swigregister = _Myoushu.Vector3_swigregister
Vector3_swigregister(Vector3)
Vector3.ZERO = _Myoushu.cvar.Vector3_ZERO
Vector3.UNIT_X = _Myoushu.cvar.Vector3_UNIT_X
Vector3.UNIT_Y = _Myoushu.cvar.Vector3_UNIT_Y
Vector3.UNIT_Z = _Myoushu.cvar.Vector3_UNIT_Z
Vector3.NEGATIVE_UNIT_X = _Myoushu.cvar.Vector3_NEGATIVE_UNIT_X
Vector3.NEGATIVE_UNIT_Y = _Myoushu.cvar.Vector3_NEGATIVE_UNIT_Y
Vector3.NEGATIVE_UNIT_Z = _Myoushu.cvar.Vector3_NEGATIVE_UNIT_Z
Vector3.UNIT_SCALE = _Myoushu.cvar.Vector3_UNIT_SCALE

class Vector4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector4, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _Myoushu.Vector4_x_set
    __swig_getmethods__["x"] = _Myoushu.Vector4_x_get
    if _newclass:x = _swig_property(_Myoushu.Vector4_x_get, _Myoushu.Vector4_x_set)
    __swig_setmethods__["y"] = _Myoushu.Vector4_y_set
    __swig_getmethods__["y"] = _Myoushu.Vector4_y_get
    if _newclass:y = _swig_property(_Myoushu.Vector4_y_get, _Myoushu.Vector4_y_set)
    __swig_setmethods__["z"] = _Myoushu.Vector4_z_set
    __swig_getmethods__["z"] = _Myoushu.Vector4_z_get
    if _newclass:z = _swig_property(_Myoushu.Vector4_z_get, _Myoushu.Vector4_z_set)
    __swig_setmethods__["w"] = _Myoushu.Vector4_w_set
    __swig_getmethods__["w"] = _Myoushu.Vector4_w_get
    if _newclass:w = _swig_property(_Myoushu.Vector4_w_get, _Myoushu.Vector4_w_set)
    def __init__(self, *args): 
        this = _Myoushu.new_Vector4(*args)
        try: self.this.append(this)
        except: self.this = this
    def ptr(self, *args): return _Myoushu.Vector4_ptr(self, *args)
    def __eq__(self, *args): return _Myoushu.Vector4___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.Vector4___ne__(self, *args)
    def __add__(self, *args): return _Myoushu.Vector4___add__(self, *args)
    def __sub__(self, *args): return _Myoushu.Vector4___sub__(self, *args)
    def __mul__(self, *args): return _Myoushu.Vector4___mul__(self, *args)
    def __div__(self, *args): return _Myoushu.Vector4___div__(self, *args)
    def __pos__(self): return _Myoushu.Vector4___pos__(self)
    def __neg__(self): return _Myoushu.Vector4___neg__(self)
    def __iadd__(self, *args): return _Myoushu.Vector4___iadd__(self, *args)
    def __isub__(self, *args): return _Myoushu.Vector4___isub__(self, *args)
    def __imul__(self, *args): return _Myoushu.Vector4___imul__(self, *args)
    def __idiv__(self, *args): return _Myoushu.Vector4___idiv__(self, *args)
    def dotProduct(self, *args): return _Myoushu.Vector4_dotProduct(self, *args)
    __swig_destroy__ = _Myoushu.delete_Vector4
    __del__ = lambda self : None;
Vector4_swigregister = _Myoushu.Vector4_swigregister
Vector4_swigregister(Vector4)
Vector4.ZERO = _Myoushu.cvar.Vector4_ZERO

class Matrix3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix3, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_Matrix3(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetColumn(self, *args): return _Myoushu.Matrix3_GetColumn(self, *args)
    def SetColumn(self, *args): return _Myoushu.Matrix3_SetColumn(self, *args)
    def FromAxes(self, *args): return _Myoushu.Matrix3_FromAxes(self, *args)
    def __eq__(self, *args): return _Myoushu.Matrix3___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.Matrix3___ne__(self, *args)
    def __add__(self, *args): return _Myoushu.Matrix3___add__(self, *args)
    def __sub__(self, *args): return _Myoushu.Matrix3___sub__(self, *args)
    def __neg__(self): return _Myoushu.Matrix3___neg__(self)
    def __mul__(self, *args): return _Myoushu.Matrix3___mul__(self, *args)
    def Transpose(self): return _Myoushu.Matrix3_Transpose(self)
    def Inverse(self, *args): return _Myoushu.Matrix3_Inverse(self, *args)
    def Determinant(self): return _Myoushu.Matrix3_Determinant(self)
    def SingularValueDecomposition(self, *args): return _Myoushu.Matrix3_SingularValueDecomposition(self, *args)
    def SingularValueComposition(self, *args): return _Myoushu.Matrix3_SingularValueComposition(self, *args)
    def Orthonormalize(self): return _Myoushu.Matrix3_Orthonormalize(self)
    def QDUDecomposition(self, *args): return _Myoushu.Matrix3_QDUDecomposition(self, *args)
    def SpectralNorm(self): return _Myoushu.Matrix3_SpectralNorm(self)
    def ToAxisAngle(self, *args): return _Myoushu.Matrix3_ToAxisAngle(self, *args)
    def FromAxisAngle(self, *args): return _Myoushu.Matrix3_FromAxisAngle(self, *args)
    def ToEulerAnglesXYZ(self, *args): return _Myoushu.Matrix3_ToEulerAnglesXYZ(self, *args)
    def ToEulerAnglesXZY(self, *args): return _Myoushu.Matrix3_ToEulerAnglesXZY(self, *args)
    def ToEulerAnglesYXZ(self, *args): return _Myoushu.Matrix3_ToEulerAnglesYXZ(self, *args)
    def ToEulerAnglesYZX(self, *args): return _Myoushu.Matrix3_ToEulerAnglesYZX(self, *args)
    def ToEulerAnglesZXY(self, *args): return _Myoushu.Matrix3_ToEulerAnglesZXY(self, *args)
    def ToEulerAnglesZYX(self, *args): return _Myoushu.Matrix3_ToEulerAnglesZYX(self, *args)
    def FromEulerAnglesXYZ(self, *args): return _Myoushu.Matrix3_FromEulerAnglesXYZ(self, *args)
    def FromEulerAnglesXZY(self, *args): return _Myoushu.Matrix3_FromEulerAnglesXZY(self, *args)
    def FromEulerAnglesYXZ(self, *args): return _Myoushu.Matrix3_FromEulerAnglesYXZ(self, *args)
    def FromEulerAnglesYZX(self, *args): return _Myoushu.Matrix3_FromEulerAnglesYZX(self, *args)
    def FromEulerAnglesZXY(self, *args): return _Myoushu.Matrix3_FromEulerAnglesZXY(self, *args)
    def FromEulerAnglesZYX(self, *args): return _Myoushu.Matrix3_FromEulerAnglesZYX(self, *args)
    def EigenSolveSymmetric(self, *args): return _Myoushu.Matrix3_EigenSolveSymmetric(self, *args)
    __swig_getmethods__["TensorProduct"] = lambda x: _Myoushu.Matrix3_TensorProduct
    if _newclass:TensorProduct = staticmethod(_Myoushu.Matrix3_TensorProduct)
    def hasScale(self): return _Myoushu.Matrix3_hasScale(self)
    __swig_destroy__ = _Myoushu.delete_Matrix3
    __del__ = lambda self : None;
Matrix3_swigregister = _Myoushu.Matrix3_swigregister
Matrix3_swigregister(Matrix3)

def Matrix3_TensorProduct(*args):
  return _Myoushu.Matrix3_TensorProduct(*args)
Matrix3_TensorProduct = _Myoushu.Matrix3_TensorProduct
Matrix3.EPSILON = _Myoushu.cvar.Matrix3_EPSILON
Matrix3.ZERO = _Myoushu.cvar.Matrix3_ZERO
Matrix3.IDENTITY = _Myoushu.cvar.Matrix3_IDENTITY

class Matrix4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix4, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_Matrix4(*args)
        try: self.this.append(this)
        except: self.this = this
    def concatenate(self, *args): return _Myoushu.Matrix4_concatenate(self, *args)
    def __add__(self, *args): return _Myoushu.Matrix4___add__(self, *args)
    def __sub__(self, *args): return _Myoushu.Matrix4___sub__(self, *args)
    def __eq__(self, *args): return _Myoushu.Matrix4___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.Matrix4___ne__(self, *args)
    def transpose(self): return _Myoushu.Matrix4_transpose(self)
    def setTrans(self, *args): return _Myoushu.Matrix4_setTrans(self, *args)
    def makeTrans(self, *args): return _Myoushu.Matrix4_makeTrans(self, *args)
    __swig_getmethods__["getTrans"] = lambda x: _Myoushu.Matrix4_getTrans
    if _newclass:getTrans = staticmethod(_Myoushu.Matrix4_getTrans)
    def setScale(self, *args): return _Myoushu.Matrix4_setScale(self, *args)
    __swig_getmethods__["getScale"] = lambda x: _Myoushu.Matrix4_getScale
    if _newclass:getScale = staticmethod(_Myoushu.Matrix4_getScale)
    def extract3x3Matrix(self, *args): return _Myoushu.Matrix4_extract3x3Matrix(self, *args)
    def hasScale(self): return _Myoushu.Matrix4_hasScale(self)
    def hasNegativeScale(self): return _Myoushu.Matrix4_hasNegativeScale(self)
    def extractQuaternion(self): return _Myoushu.Matrix4_extractQuaternion(self)
    def __mul__(self, *args): return _Myoushu.Matrix4___mul__(self, *args)
    def adjoint(self): return _Myoushu.Matrix4_adjoint(self)
    def determinant(self): return _Myoushu.Matrix4_determinant(self)
    def inverse(self): return _Myoushu.Matrix4_inverse(self)
    def makeTransform(self, *args): return _Myoushu.Matrix4_makeTransform(self, *args)
    def makeInverseTransform(self, *args): return _Myoushu.Matrix4_makeInverseTransform(self, *args)
    def isAffine(self): return _Myoushu.Matrix4_isAffine(self)
    def inverseAffine(self): return _Myoushu.Matrix4_inverseAffine(self)
    def concatenateAffine(self, *args): return _Myoushu.Matrix4_concatenateAffine(self, *args)
    def transformAffine(self, *args): return _Myoushu.Matrix4_transformAffine(self, *args)
    __swig_destroy__ = _Myoushu.delete_Matrix4
    __del__ = lambda self : None;
Matrix4_swigregister = _Myoushu.Matrix4_swigregister
Matrix4_swigregister(Matrix4)

def Matrix4_getTrans(*args):
  return _Myoushu.Matrix4_getTrans(*args)
Matrix4_getTrans = _Myoushu.Matrix4_getTrans

def Matrix4_getScale(*args):
  return _Myoushu.Matrix4_getScale(*args)
Matrix4_getScale = _Myoushu.Matrix4_getScale
Matrix4.ZERO = _Myoushu.cvar.Matrix4_ZERO
Matrix4.IDENTITY = _Myoushu.cvar.Matrix4_IDENTITY
Matrix4.CLIPSPACE2DTOIMAGESPACE = _Myoushu.cvar.Matrix4_CLIPSPACE2DTOIMAGESPACE

class Quaternion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quaternion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Quaternion, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_Quaternion(*args)
        try: self.this.append(this)
        except: self.this = this
    def ptr(self, *args): return _Myoushu.Quaternion_ptr(self, *args)
    def FromRotationMatrix(self, *args): return _Myoushu.Quaternion_FromRotationMatrix(self, *args)
    def ToRotationMatrix(self, *args): return _Myoushu.Quaternion_ToRotationMatrix(self, *args)
    def FromAngleAxis(self, *args): return _Myoushu.Quaternion_FromAngleAxis(self, *args)
    def ToAngleAxis(self, *args): return _Myoushu.Quaternion_ToAngleAxis(self, *args)
    def FromAxes(self, *args): return _Myoushu.Quaternion_FromAxes(self, *args)
    def ToAxes(self, *args): return _Myoushu.Quaternion_ToAxes(self, *args)
    def xAxis(self): return _Myoushu.Quaternion_xAxis(self)
    def yAxis(self): return _Myoushu.Quaternion_yAxis(self)
    def zAxis(self): return _Myoushu.Quaternion_zAxis(self)
    def __add__(self, *args): return _Myoushu.Quaternion___add__(self, *args)
    def __sub__(self, *args): return _Myoushu.Quaternion___sub__(self, *args)
    def __neg__(self): return _Myoushu.Quaternion___neg__(self)
    def __eq__(self, *args): return _Myoushu.Quaternion___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.Quaternion___ne__(self, *args)
    def Dot(self, *args): return _Myoushu.Quaternion_Dot(self, *args)
    def Norm(self): return _Myoushu.Quaternion_Norm(self)
    def normalise(self): return _Myoushu.Quaternion_normalise(self)
    def Inverse(self): return _Myoushu.Quaternion_Inverse(self)
    def UnitInverse(self): return _Myoushu.Quaternion_UnitInverse(self)
    def Exp(self): return _Myoushu.Quaternion_Exp(self)
    def Log(self): return _Myoushu.Quaternion_Log(self)
    def __mul__(self, *args): return _Myoushu.Quaternion___mul__(self, *args)
    def getRoll(self, reprojectAxis = True): return _Myoushu.Quaternion_getRoll(self, reprojectAxis)
    def getPitch(self, reprojectAxis = True): return _Myoushu.Quaternion_getPitch(self, reprojectAxis)
    def getYaw(self, reprojectAxis = True): return _Myoushu.Quaternion_getYaw(self, reprojectAxis)
    def equals(self, *args): return _Myoushu.Quaternion_equals(self, *args)
    __swig_getmethods__["Slerp"] = lambda x: _Myoushu.Quaternion_Slerp
    if _newclass:Slerp = staticmethod(_Myoushu.Quaternion_Slerp)
    __swig_getmethods__["SlerpExtraSpins"] = lambda x: _Myoushu.Quaternion_SlerpExtraSpins
    if _newclass:SlerpExtraSpins = staticmethod(_Myoushu.Quaternion_SlerpExtraSpins)
    __swig_getmethods__["Intermediate"] = lambda x: _Myoushu.Quaternion_Intermediate
    if _newclass:Intermediate = staticmethod(_Myoushu.Quaternion_Intermediate)
    __swig_getmethods__["Squad"] = lambda x: _Myoushu.Quaternion_Squad
    if _newclass:Squad = staticmethod(_Myoushu.Quaternion_Squad)
    __swig_getmethods__["nlerp"] = lambda x: _Myoushu.Quaternion_nlerp
    if _newclass:nlerp = staticmethod(_Myoushu.Quaternion_nlerp)
    __swig_setmethods__["w"] = _Myoushu.Quaternion_w_set
    __swig_getmethods__["w"] = _Myoushu.Quaternion_w_get
    if _newclass:w = _swig_property(_Myoushu.Quaternion_w_get, _Myoushu.Quaternion_w_set)
    __swig_setmethods__["x"] = _Myoushu.Quaternion_x_set
    __swig_getmethods__["x"] = _Myoushu.Quaternion_x_get
    if _newclass:x = _swig_property(_Myoushu.Quaternion_x_get, _Myoushu.Quaternion_x_set)
    __swig_setmethods__["y"] = _Myoushu.Quaternion_y_set
    __swig_getmethods__["y"] = _Myoushu.Quaternion_y_get
    if _newclass:y = _swig_property(_Myoushu.Quaternion_y_get, _Myoushu.Quaternion_y_set)
    __swig_setmethods__["z"] = _Myoushu.Quaternion_z_set
    __swig_getmethods__["z"] = _Myoushu.Quaternion_z_get
    if _newclass:z = _swig_property(_Myoushu.Quaternion_z_get, _Myoushu.Quaternion_z_set)
    __swig_destroy__ = _Myoushu.delete_Quaternion
    __del__ = lambda self : None;
Quaternion_swigregister = _Myoushu.Quaternion_swigregister
Quaternion_swigregister(Quaternion)

def __mul__(*args):
  return _Myoushu.__mul__(*args)
__mul__ = _Myoushu.__mul__

def Quaternion_Slerp(*args):
  return _Myoushu.Quaternion_Slerp(*args)
Quaternion_Slerp = _Myoushu.Quaternion_Slerp

def Quaternion_SlerpExtraSpins(*args):
  return _Myoushu.Quaternion_SlerpExtraSpins(*args)
Quaternion_SlerpExtraSpins = _Myoushu.Quaternion_SlerpExtraSpins

def Quaternion_Intermediate(*args):
  return _Myoushu.Quaternion_Intermediate(*args)
Quaternion_Intermediate = _Myoushu.Quaternion_Intermediate

def Quaternion_Squad(*args):
  return _Myoushu.Quaternion_Squad(*args)
Quaternion_Squad = _Myoushu.Quaternion_Squad

def Quaternion_nlerp(*args):
  return _Myoushu.Quaternion_nlerp(*args)
Quaternion_nlerp = _Myoushu.Quaternion_nlerp
Quaternion.ms_fEpsilon = _Myoushu.cvar.Quaternion_ms_fEpsilon
Quaternion.ZERO = _Myoushu.cvar.Quaternion_ZERO
Quaternion.IDENTITY = _Myoushu.cvar.Quaternion_IDENTITY

class MovableObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MovableObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MovableObject, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_MovableObject
    __del__ = lambda self : None;
    def _notifyCreator(self, *args): return _Myoushu.MovableObject__notifyCreator(self, *args)
    def _getCreator(self): return _Myoushu.MovableObject__getCreator(self)
    def _notifyManager(self, *args): return _Myoushu.MovableObject__notifyManager(self, *args)
    def _getManager(self): return _Myoushu.MovableObject__getManager(self)
    def getName(self): return _Myoushu.MovableObject_getName(self)
    def getMovableType(self): return _Myoushu.MovableObject_getMovableType(self)
    def getParentNode(self): return _Myoushu.MovableObject_getParentNode(self)
    def getParentSceneNode(self): return _Myoushu.MovableObject_getParentSceneNode(self)
    def _notifyAttached(self, *args): return _Myoushu.MovableObject__notifyAttached(self, *args)
    def isAttached(self): return _Myoushu.MovableObject_isAttached(self)
    def detatchFromParent(self): return _Myoushu.MovableObject_detatchFromParent(self)
    def isInScene(self): return _Myoushu.MovableObject_isInScene(self)
    def _notifyMoved(self): return _Myoushu.MovableObject__notifyMoved(self)
    def _notifyCurrentCamera(self, *args): return _Myoushu.MovableObject__notifyCurrentCamera(self, *args)
    def getBoundingBox(self): return _Myoushu.MovableObject_getBoundingBox(self)
    def getBoundingRadius(self): return _Myoushu.MovableObject_getBoundingRadius(self)
    def getWorldBoundingBox(self, derive = False): return _Myoushu.MovableObject_getWorldBoundingBox(self, derive)
    def getWorldBoundingSphere(self, derive = False): return _Myoushu.MovableObject_getWorldBoundingSphere(self, derive)
    def _updateRenderQueue(self, *args): return _Myoushu.MovableObject__updateRenderQueue(self, *args)
    def setVisible(self, *args): return _Myoushu.MovableObject_setVisible(self, *args)
    def getVisible(self): return _Myoushu.MovableObject_getVisible(self)
    def isVisible(self): return _Myoushu.MovableObject_isVisible(self)
    def setRenderingDistance(self, *args): return _Myoushu.MovableObject_setRenderingDistance(self, *args)
    def getRenderingDistance(self): return _Myoushu.MovableObject_getRenderingDistance(self)
    def setUserObject(self, *args): return _Myoushu.MovableObject_setUserObject(self, *args)
    def getUserObject(self): return _Myoushu.MovableObject_getUserObject(self)
    def setUserAny(self, *args): return _Myoushu.MovableObject_setUserAny(self, *args)
    def getUserAny(self): return _Myoushu.MovableObject_getUserAny(self)
    def setRenderQueueGroup(self, *args): return _Myoushu.MovableObject_setRenderQueueGroup(self, *args)
    def getRenderQueueGroup(self): return _Myoushu.MovableObject_getRenderQueueGroup(self)
    def _getParentNodeFullTransform(self): return _Myoushu.MovableObject__getParentNodeFullTransform(self)
    def setQueryFlags(self, *args): return _Myoushu.MovableObject_setQueryFlags(self, *args)
    def addQueryFlags(self, *args): return _Myoushu.MovableObject_addQueryFlags(self, *args)
    def removeQueryFlags(self, *args): return _Myoushu.MovableObject_removeQueryFlags(self, *args)
    def getQueryFlags(self): return _Myoushu.MovableObject_getQueryFlags(self)
    __swig_getmethods__["setDefaultQueryFlags"] = lambda x: _Myoushu.MovableObject_setDefaultQueryFlags
    if _newclass:setDefaultQueryFlags = staticmethod(_Myoushu.MovableObject_setDefaultQueryFlags)
    __swig_getmethods__["getDefaultQueryFlags"] = lambda x: _Myoushu.MovableObject_getDefaultQueryFlags
    if _newclass:getDefaultQueryFlags = staticmethod(_Myoushu.MovableObject_getDefaultQueryFlags)
    def setVisibilityFlags(self, *args): return _Myoushu.MovableObject_setVisibilityFlags(self, *args)
    def addVisibilityFlags(self, *args): return _Myoushu.MovableObject_addVisibilityFlags(self, *args)
    def removeVisibilityFlags(self, *args): return _Myoushu.MovableObject_removeVisibilityFlags(self, *args)
    def getVisibilityFlags(self): return _Myoushu.MovableObject_getVisibilityFlags(self)
    __swig_getmethods__["setDefaultVisibilityFlags"] = lambda x: _Myoushu.MovableObject_setDefaultVisibilityFlags
    if _newclass:setDefaultVisibilityFlags = staticmethod(_Myoushu.MovableObject_setDefaultVisibilityFlags)
    __swig_getmethods__["getDefaultVisibilityFlags"] = lambda x: _Myoushu.MovableObject_getDefaultVisibilityFlags
    if _newclass:getDefaultVisibilityFlags = staticmethod(_Myoushu.MovableObject_getDefaultVisibilityFlags)
    def setListener(self, *args): return _Myoushu.MovableObject_setListener(self, *args)
    def getListener(self): return _Myoushu.MovableObject_getListener(self)
    def queryLights(self): return _Myoushu.MovableObject_queryLights(self)
    def _getLightList(self): return _Myoushu.MovableObject__getLightList(self)
    def getEdgeList(self): return _Myoushu.MovableObject_getEdgeList(self)
    def hasEdgeList(self): return _Myoushu.MovableObject_hasEdgeList(self)
    def getLightCapBounds(self): return _Myoushu.MovableObject_getLightCapBounds(self)
    def getDarkCapBounds(self, *args): return _Myoushu.MovableObject_getDarkCapBounds(self, *args)
    def setCastShadows(self, *args): return _Myoushu.MovableObject_setCastShadows(self, *args)
    def getCastShadows(self): return _Myoushu.MovableObject_getCastShadows(self)
    def getPointExtrusionDistance(self, *args): return _Myoushu.MovableObject_getPointExtrusionDistance(self, *args)
    def getTypeFlags(self): return _Myoushu.MovableObject_getTypeFlags(self)
    def visitRenderables(self, *args): return _Myoushu.MovableObject_visitRenderables(self, *args)
    def setDebugDisplayEnabled(self, *args): return _Myoushu.MovableObject_setDebugDisplayEnabled(self, *args)
    def isDebugDisplayEnabled(self): return _Myoushu.MovableObject_isDebugDisplayEnabled(self)
MovableObject_swigregister = _Myoushu.MovableObject_swigregister
MovableObject_swigregister(MovableObject)

def MovableObject_setDefaultQueryFlags(*args):
  return _Myoushu.MovableObject_setDefaultQueryFlags(*args)
MovableObject_setDefaultQueryFlags = _Myoushu.MovableObject_setDefaultQueryFlags

def MovableObject_getDefaultQueryFlags():
  return _Myoushu.MovableObject_getDefaultQueryFlags()
MovableObject_getDefaultQueryFlags = _Myoushu.MovableObject_getDefaultQueryFlags

def MovableObject_setDefaultVisibilityFlags(*args):
  return _Myoushu.MovableObject_setDefaultVisibilityFlags(*args)
MovableObject_setDefaultVisibilityFlags = _Myoushu.MovableObject_setDefaultVisibilityFlags

def MovableObject_getDefaultVisibilityFlags():
  return _Myoushu.MovableObject_getDefaultVisibilityFlags()
MovableObject_getDefaultVisibilityFlags = _Myoushu.MovableObject_getDefaultVisibilityFlags

class MovableObjectFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MovableObjectFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MovableObjectFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_MovableObjectFactory
    __del__ = lambda self : None;
    def getType(self): return _Myoushu.MovableObjectFactory_getType(self)
    def createInstance(self, *args): return _Myoushu.MovableObjectFactory_createInstance(self, *args)
    def destroyInstance(self, *args): return _Myoushu.MovableObjectFactory_destroyInstance(self, *args)
    def requestTypeFlags(self): return _Myoushu.MovableObjectFactory_requestTypeFlags(self)
    def _notifyTypeFlags(self, *args): return _Myoushu.MovableObjectFactory__notifyTypeFlags(self, *args)
    def getTypeFlags(self): return _Myoushu.MovableObjectFactory_getTypeFlags(self)
MovableObjectFactory_swigregister = _Myoushu.MovableObjectFactory_swigregister
MovableObjectFactory_swigregister(MovableObjectFactory)

class Node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    TS_LOCAL = _Myoushu.Node_TS_LOCAL
    TS_PARENT = _Myoushu.Node_TS_PARENT
    TS_WORLD = _Myoushu.Node_TS_WORLD
    __swig_destroy__ = _Myoushu.delete_Node
    __del__ = lambda self : None;
    def getName(self): return _Myoushu.Node_getName(self)
    def getParent(self): return _Myoushu.Node_getParent(self)
    def getOrientation(self): return _Myoushu.Node_getOrientation(self)
    def setOrientation(self, *args): return _Myoushu.Node_setOrientation(self, *args)
    def resetOrientation(self): return _Myoushu.Node_resetOrientation(self)
    def setPosition(self, *args): return _Myoushu.Node_setPosition(self, *args)
    def getPosition(self): return _Myoushu.Node_getPosition(self)
    def setScale(self, *args): return _Myoushu.Node_setScale(self, *args)
    def getScale(self): return _Myoushu.Node_getScale(self)
    def setInheritOrientation(self, *args): return _Myoushu.Node_setInheritOrientation(self, *args)
    def getInheritOrientation(self): return _Myoushu.Node_getInheritOrientation(self)
    def setInheritScale(self, *args): return _Myoushu.Node_setInheritScale(self, *args)
    def getInheritScale(self): return _Myoushu.Node_getInheritScale(self)
    def scale(self, *args): return _Myoushu.Node_scale(self, *args)
    def translate(self, *args): return _Myoushu.Node_translate(self, *args)
    def roll(self, *args): return _Myoushu.Node_roll(self, *args)
    def pitch(self, *args): return _Myoushu.Node_pitch(self, *args)
    def yaw(self, *args): return _Myoushu.Node_yaw(self, *args)
    def rotate(self, *args): return _Myoushu.Node_rotate(self, *args)
    def getLocalAxes(self): return _Myoushu.Node_getLocalAxes(self)
    def createChild(self, *args): return _Myoushu.Node_createChild(self, *args)
    def addChild(self, *args): return _Myoushu.Node_addChild(self, *args)
    def numChildren(self): return _Myoushu.Node_numChildren(self)
    def getChild(self, *args): return _Myoushu.Node_getChild(self, *args)
    def getChildIterator(self, *args): return _Myoushu.Node_getChildIterator(self, *args)
    def removeChild(self, *args): return _Myoushu.Node_removeChild(self, *args)
    def removeAllChildren(self): return _Myoushu.Node_removeAllChildren(self)
    def _getDerivedOrientation(self): return _Myoushu.Node__getDerivedOrientation(self)
    def _getDerivedPosition(self): return _Myoushu.Node__getDerivedPosition(self)
    def _getDerivedScale(self): return _Myoushu.Node__getDerivedScale(self)
    def _getFullTransform(self): return _Myoushu.Node__getFullTransform(self)
    def _update(self, *args): return _Myoushu.Node__update(self, *args)
    def setListener(self, *args): return _Myoushu.Node_setListener(self, *args)
    def getListener(self): return _Myoushu.Node_getListener(self)
    def getMaterial(self): return _Myoushu.Node_getMaterial(self)
    def getRenderOperation(self, *args): return _Myoushu.Node_getRenderOperation(self, *args)
    def getWorldTransforms(self, *args): return _Myoushu.Node_getWorldTransforms(self, *args)
    def setInitialState(self): return _Myoushu.Node_setInitialState(self)
    def resetToInitialState(self): return _Myoushu.Node_resetToInitialState(self)
    def getInitialPosition(self): return _Myoushu.Node_getInitialPosition(self)
    def getInitialOrientation(self): return _Myoushu.Node_getInitialOrientation(self)
    def getInitialScale(self): return _Myoushu.Node_getInitialScale(self)
    def getSquaredViewDepth(self, *args): return _Myoushu.Node_getSquaredViewDepth(self, *args)
    def needUpdate(self, forceParentUpdate = False): return _Myoushu.Node_needUpdate(self, forceParentUpdate)
    def requestUpdate(self, *args): return _Myoushu.Node_requestUpdate(self, *args)
    def cancelUpdate(self, *args): return _Myoushu.Node_cancelUpdate(self, *args)
    __swig_getmethods__["queueNeedUpdate"] = lambda x: _Myoushu.Node_queueNeedUpdate
    if _newclass:queueNeedUpdate = staticmethod(_Myoushu.Node_queueNeedUpdate)
    __swig_getmethods__["processQueuedUpdates"] = lambda x: _Myoushu.Node_processQueuedUpdates
    if _newclass:processQueuedUpdates = staticmethod(_Myoushu.Node_processQueuedUpdates)
    def getLights(self): return _Myoushu.Node_getLights(self)
Node_swigregister = _Myoushu.Node_swigregister
Node_swigregister(Node)

def Node_queueNeedUpdate(*args):
  return _Myoushu.Node_queueNeedUpdate(*args)
Node_queueNeedUpdate = _Myoushu.Node_queueNeedUpdate

def Node_processQueuedUpdates():
  return _Myoushu.Node_processQueuedUpdates()
Node_processQueuedUpdates = _Myoushu.Node_processQueuedUpdates

class ColourValue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColourValue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColourValue, name)
    __repr__ = _swig_repr
    def __init__(self, red = 1.0, green = 1.0, blue = 1.0, alpha = 1.0): 
        this = _Myoushu.new_ColourValue(red, green, blue, alpha)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _Myoushu.ColourValue___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.ColourValue___ne__(self, *args)
    __swig_setmethods__["r"] = _Myoushu.ColourValue_r_set
    __swig_getmethods__["r"] = _Myoushu.ColourValue_r_get
    if _newclass:r = _swig_property(_Myoushu.ColourValue_r_get, _Myoushu.ColourValue_r_set)
    __swig_setmethods__["g"] = _Myoushu.ColourValue_g_set
    __swig_getmethods__["g"] = _Myoushu.ColourValue_g_get
    if _newclass:g = _swig_property(_Myoushu.ColourValue_g_get, _Myoushu.ColourValue_g_set)
    __swig_setmethods__["b"] = _Myoushu.ColourValue_b_set
    __swig_getmethods__["b"] = _Myoushu.ColourValue_b_get
    if _newclass:b = _swig_property(_Myoushu.ColourValue_b_get, _Myoushu.ColourValue_b_set)
    __swig_setmethods__["a"] = _Myoushu.ColourValue_a_set
    __swig_getmethods__["a"] = _Myoushu.ColourValue_a_get
    if _newclass:a = _swig_property(_Myoushu.ColourValue_a_get, _Myoushu.ColourValue_a_set)
    def getAsRGBA(self): return _Myoushu.ColourValue_getAsRGBA(self)
    def getAsARGB(self): return _Myoushu.ColourValue_getAsARGB(self)
    def getAsBGRA(self): return _Myoushu.ColourValue_getAsBGRA(self)
    def getAsABGR(self): return _Myoushu.ColourValue_getAsABGR(self)
    def setAsRGBA(self, *args): return _Myoushu.ColourValue_setAsRGBA(self, *args)
    def setAsARGB(self, *args): return _Myoushu.ColourValue_setAsARGB(self, *args)
    def setAsBGRA(self, *args): return _Myoushu.ColourValue_setAsBGRA(self, *args)
    def setAsABGR(self, *args): return _Myoushu.ColourValue_setAsABGR(self, *args)
    def saturate(self): return _Myoushu.ColourValue_saturate(self)
    def saturateCopy(self): return _Myoushu.ColourValue_saturateCopy(self)
    def ptr(self, *args): return _Myoushu.ColourValue_ptr(self, *args)
    def __add__(self, *args): return _Myoushu.ColourValue___add__(self, *args)
    def __sub__(self, *args): return _Myoushu.ColourValue___sub__(self, *args)
    def __mul__(self, *args): return _Myoushu.ColourValue___mul__(self, *args)
    def __div__(self, *args): return _Myoushu.ColourValue___div__(self, *args)
    def __iadd__(self, *args): return _Myoushu.ColourValue___iadd__(self, *args)
    def __isub__(self, *args): return _Myoushu.ColourValue___isub__(self, *args)
    def __imul__(self, *args): return _Myoushu.ColourValue___imul__(self, *args)
    def __idiv__(self, *args): return _Myoushu.ColourValue___idiv__(self, *args)
    def setHSB(self, *args): return _Myoushu.ColourValue_setHSB(self, *args)
    def getHSB(self, *args): return _Myoushu.ColourValue_getHSB(self, *args)
    __swig_destroy__ = _Myoushu.delete_ColourValue
    __del__ = lambda self : None;
ColourValue_swigregister = _Myoushu.ColourValue_swigregister
ColourValue_swigregister(ColourValue)
ColourValue.ZERO = _Myoushu.cvar.ColourValue_ZERO
ColourValue.Black = _Myoushu.cvar.ColourValue_Black
ColourValue.White = _Myoushu.cvar.ColourValue_White
ColourValue.Red = _Myoushu.cvar.ColourValue_Red
ColourValue.Green = _Myoushu.cvar.ColourValue_Green
ColourValue.Blue = _Myoushu.cvar.ColourValue_Blue

class Light(MovableObject):
    __swig_setmethods__ = {}
    for _s in [MovableObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Light, name, value)
    __swig_getmethods__ = {}
    for _s in [MovableObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Light, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tempSquareDist"] = _Myoushu.Light_tempSquareDist_set
    __swig_getmethods__["tempSquareDist"] = _Myoushu.Light_tempSquareDist_get
    if _newclass:tempSquareDist = _swig_property(_Myoushu.Light_tempSquareDist_get, _Myoushu.Light_tempSquareDist_set)
    def _calcTempSquareDist(self, *args): return _Myoushu.Light__calcTempSquareDist(self, *args)
    LT_POINT = _Myoushu.Light_LT_POINT
    LT_DIRECTIONAL = _Myoushu.Light_LT_DIRECTIONAL
    LT_SPOTLIGHT = _Myoushu.Light_LT_SPOTLIGHT
    def __init__(self, *args): 
        this = _Myoushu.new_Light(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Light
    __del__ = lambda self : None;
    def setType(self, *args): return _Myoushu.Light_setType(self, *args)
    def getType(self): return _Myoushu.Light_getType(self)
    def setDiffuseColour(self, *args): return _Myoushu.Light_setDiffuseColour(self, *args)
    def getDiffuseColour(self): return _Myoushu.Light_getDiffuseColour(self)
    def setSpecularColour(self, *args): return _Myoushu.Light_setSpecularColour(self, *args)
    def getSpecularColour(self): return _Myoushu.Light_getSpecularColour(self)
    def setAttenuation(self, *args): return _Myoushu.Light_setAttenuation(self, *args)
    def getAttenuationRange(self): return _Myoushu.Light_getAttenuationRange(self)
    def getAttenuationConstant(self): return _Myoushu.Light_getAttenuationConstant(self)
    def getAttenuationLinear(self): return _Myoushu.Light_getAttenuationLinear(self)
    def getAttenuationQuadric(self): return _Myoushu.Light_getAttenuationQuadric(self)
    def setPosition(self, *args): return _Myoushu.Light_setPosition(self, *args)
    def getPosition(self): return _Myoushu.Light_getPosition(self)
    def setDirection(self, *args): return _Myoushu.Light_setDirection(self, *args)
    def getDirection(self): return _Myoushu.Light_getDirection(self)
    def setSpotlightRange(self, *args): return _Myoushu.Light_setSpotlightRange(self, *args)
    def getSpotlightInnerAngle(self): return _Myoushu.Light_getSpotlightInnerAngle(self)
    def getSpotlightOuterAngle(self): return _Myoushu.Light_getSpotlightOuterAngle(self)
    def getSpotlightFalloff(self): return _Myoushu.Light_getSpotlightFalloff(self)
    def setSpotlightInnerAngle(self, *args): return _Myoushu.Light_setSpotlightInnerAngle(self, *args)
    def setSpotlightOuterAngle(self, *args): return _Myoushu.Light_setSpotlightOuterAngle(self, *args)
    def setSpotlightFalloff(self, *args): return _Myoushu.Light_setSpotlightFalloff(self, *args)
    def setPowerScale(self, *args): return _Myoushu.Light_setPowerScale(self, *args)
    def getPowerScale(self): return _Myoushu.Light_getPowerScale(self)
    def _notifyAttached(self, *args): return _Myoushu.Light__notifyAttached(self, *args)
    def _notifyMoved(self): return _Myoushu.Light__notifyMoved(self)
    def getBoundingBox(self): return _Myoushu.Light_getBoundingBox(self)
    def _updateRenderQueue(self, *args): return _Myoushu.Light__updateRenderQueue(self, *args)
    def getMovableType(self): return _Myoushu.Light_getMovableType(self)
    def getDerivedPosition(self, cameraRelativeIfSet = False): return _Myoushu.Light_getDerivedPosition(self, cameraRelativeIfSet)
    def getDerivedDirection(self): return _Myoushu.Light_getDerivedDirection(self)
    def setVisible(self, *args): return _Myoushu.Light_setVisible(self, *args)
    def getBoundingRadius(self): return _Myoushu.Light_getBoundingRadius(self)
    def getAs4DVector(self, cameraRelativeIfSet = False): return _Myoushu.Light_getAs4DVector(self, cameraRelativeIfSet)
    def _getNearClipVolume(self, *args): return _Myoushu.Light__getNearClipVolume(self, *args)
    def _getFrustumClipVolumes(self, *args): return _Myoushu.Light__getFrustumClipVolumes(self, *args)
    def getTypeFlags(self): return _Myoushu.Light_getTypeFlags(self)
    def createAnimableValue(self, *args): return _Myoushu.Light_createAnimableValue(self, *args)
    def setCustomShadowCameraSetup(self, *args): return _Myoushu.Light_setCustomShadowCameraSetup(self, *args)
    def resetCustomShadowCameraSetup(self): return _Myoushu.Light_resetCustomShadowCameraSetup(self)
    def getCustomShadowCameraSetup(self): return _Myoushu.Light_getCustomShadowCameraSetup(self)
    def visitRenderables(self, *args): return _Myoushu.Light_visitRenderables(self, *args)
    def _getIndexInFrame(self): return _Myoushu.Light__getIndexInFrame(self)
    def _notifyIndexInFrame(self, *args): return _Myoushu.Light__notifyIndexInFrame(self, *args)
    def setShadowFarDistance(self, *args): return _Myoushu.Light_setShadowFarDistance(self, *args)
    def resetShadowFarDistance(self): return _Myoushu.Light_resetShadowFarDistance(self)
    def getShadowFarDistance(self): return _Myoushu.Light_getShadowFarDistance(self)
    def getShadowFarDistanceSquared(self): return _Myoushu.Light_getShadowFarDistanceSquared(self)
    def _setCameraRelative(self, *args): return _Myoushu.Light__setCameraRelative(self, *args)
Light_swigregister = _Myoushu.Light_swigregister
Light_swigregister(Light)

class LightFactory(MovableObjectFactory):
    __swig_setmethods__ = {}
    for _s in [MovableObjectFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [MovableObjectFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LightFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_LightFactory
    __del__ = lambda self : None;
    __swig_setmethods__["FACTORY_TYPE_NAME"] = _Myoushu.LightFactory_FACTORY_TYPE_NAME_set
    __swig_getmethods__["FACTORY_TYPE_NAME"] = _Myoushu.LightFactory_FACTORY_TYPE_NAME_get
    if _newclass:FACTORY_TYPE_NAME = _swig_property(_Myoushu.LightFactory_FACTORY_TYPE_NAME_get, _Myoushu.LightFactory_FACTORY_TYPE_NAME_set)
    def getType(self): return _Myoushu.LightFactory_getType(self)
    def destroyInstance(self, *args): return _Myoushu.LightFactory_destroyInstance(self, *args)
LightFactory_swigregister = _Myoushu.LightFactory_swigregister
LightFactory_swigregister(LightFactory)

PT_ORTHOGRAPHIC = _Myoushu.PT_ORTHOGRAPHIC
PT_PERSPECTIVE = _Myoushu.PT_PERSPECTIVE
FRUSTUM_PLANE_NEAR = _Myoushu.FRUSTUM_PLANE_NEAR
FRUSTUM_PLANE_FAR = _Myoushu.FRUSTUM_PLANE_FAR
FRUSTUM_PLANE_LEFT = _Myoushu.FRUSTUM_PLANE_LEFT
FRUSTUM_PLANE_RIGHT = _Myoushu.FRUSTUM_PLANE_RIGHT
FRUSTUM_PLANE_TOP = _Myoushu.FRUSTUM_PLANE_TOP
FRUSTUM_PLANE_BOTTOM = _Myoushu.FRUSTUM_PLANE_BOTTOM
class Frustum(MovableObject):
    __swig_setmethods__ = {}
    for _s in [MovableObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Frustum, name, value)
    __swig_getmethods__ = {}
    for _s in [MovableObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Frustum, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Frustum()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Frustum
    __del__ = lambda self : None;
    def setFOVy(self, *args): return _Myoushu.Frustum_setFOVy(self, *args)
    def getFOVy(self): return _Myoushu.Frustum_getFOVy(self)
    def setNearClipDistance(self, *args): return _Myoushu.Frustum_setNearClipDistance(self, *args)
    def getNearClipDistance(self): return _Myoushu.Frustum_getNearClipDistance(self)
    def setFarClipDistance(self, *args): return _Myoushu.Frustum_setFarClipDistance(self, *args)
    def getFarClipDistance(self): return _Myoushu.Frustum_getFarClipDistance(self)
    def setAspectRatio(self, *args): return _Myoushu.Frustum_setAspectRatio(self, *args)
    def getAspectRatio(self): return _Myoushu.Frustum_getAspectRatio(self)
    def setFrustumOffset(self, *args): return _Myoushu.Frustum_setFrustumOffset(self, *args)
    def getFrustumOffset(self): return _Myoushu.Frustum_getFrustumOffset(self)
    def setFocalLength(self, focalLength = 1.0): return _Myoushu.Frustum_setFocalLength(self, focalLength)
    def getFocalLength(self): return _Myoushu.Frustum_getFocalLength(self)
    def setFrustumExtents(self, *args): return _Myoushu.Frustum_setFrustumExtents(self, *args)
    def resetFrustumExtents(self): return _Myoushu.Frustum_resetFrustumExtents(self)
    def getFrustumExtents(self, *args): return _Myoushu.Frustum_getFrustumExtents(self, *args)
    def getProjectionMatrixRS(self): return _Myoushu.Frustum_getProjectionMatrixRS(self)
    def getProjectionMatrixWithRSDepth(self): return _Myoushu.Frustum_getProjectionMatrixWithRSDepth(self)
    def getProjectionMatrix(self): return _Myoushu.Frustum_getProjectionMatrix(self)
    def getViewMatrix(self): return _Myoushu.Frustum_getViewMatrix(self)
    def calcViewMatrixRelative(self, *args): return _Myoushu.Frustum_calcViewMatrixRelative(self, *args)
    def setCustomViewMatrix(self, *args): return _Myoushu.Frustum_setCustomViewMatrix(self, *args)
    def isCustomViewMatrixEnabled(self): return _Myoushu.Frustum_isCustomViewMatrixEnabled(self)
    def setCustomProjectionMatrix(self, *args): return _Myoushu.Frustum_setCustomProjectionMatrix(self, *args)
    def isCustomProjectionMatrixEnabled(self): return _Myoushu.Frustum_isCustomProjectionMatrixEnabled(self)
    def getFrustumPlanes(self): return _Myoushu.Frustum_getFrustumPlanes(self)
    def getFrustumPlane(self, *args): return _Myoushu.Frustum_getFrustumPlane(self, *args)
    def isVisible(self, *args): return _Myoushu.Frustum_isVisible(self, *args)
    def getTypeFlags(self): return _Myoushu.Frustum_getTypeFlags(self)
    def getBoundingBox(self): return _Myoushu.Frustum_getBoundingBox(self)
    def getBoundingRadius(self): return _Myoushu.Frustum_getBoundingRadius(self)
    def _updateRenderQueue(self, *args): return _Myoushu.Frustum__updateRenderQueue(self, *args)
    def getMovableType(self): return _Myoushu.Frustum_getMovableType(self)
    def _notifyCurrentCamera(self, *args): return _Myoushu.Frustum__notifyCurrentCamera(self, *args)
    def getMaterial(self): return _Myoushu.Frustum_getMaterial(self)
    def getRenderOperation(self, *args): return _Myoushu.Frustum_getRenderOperation(self, *args)
    def getWorldTransforms(self, *args): return _Myoushu.Frustum_getWorldTransforms(self, *args)
    def getSquaredViewDepth(self, *args): return _Myoushu.Frustum_getSquaredViewDepth(self, *args)
    def getLights(self): return _Myoushu.Frustum_getLights(self)
    def getWorldSpaceCorners(self): return _Myoushu.Frustum_getWorldSpaceCorners(self)
    def setProjectionType(self, *args): return _Myoushu.Frustum_setProjectionType(self, *args)
    def getProjectionType(self): return _Myoushu.Frustum_getProjectionType(self)
    def setOrthoWindow(self, *args): return _Myoushu.Frustum_setOrthoWindow(self, *args)
    def setOrthoWindowHeight(self, *args): return _Myoushu.Frustum_setOrthoWindowHeight(self, *args)
    def setOrthoWindowWidth(self, *args): return _Myoushu.Frustum_setOrthoWindowWidth(self, *args)
    def getOrthoWindowHeight(self): return _Myoushu.Frustum_getOrthoWindowHeight(self)
    def getOrthoWindowWidth(self): return _Myoushu.Frustum_getOrthoWindowWidth(self)
    def enableReflection(self, *args): return _Myoushu.Frustum_enableReflection(self, *args)
    def disableReflection(self): return _Myoushu.Frustum_disableReflection(self)
    def isReflected(self): return _Myoushu.Frustum_isReflected(self)
    def getReflectionMatrix(self): return _Myoushu.Frustum_getReflectionMatrix(self)
    def getReflectionPlane(self): return _Myoushu.Frustum_getReflectionPlane(self)
    def projectSphere(self, *args): return _Myoushu.Frustum_projectSphere(self, *args)
    def enableCustomNearClipPlane(self, *args): return _Myoushu.Frustum_enableCustomNearClipPlane(self, *args)
    def disableCustomNearClipPlane(self): return _Myoushu.Frustum_disableCustomNearClipPlane(self)
    def isCustomNearClipPlaneEnabled(self): return _Myoushu.Frustum_isCustomNearClipPlaneEnabled(self)
    def visitRenderables(self, *args): return _Myoushu.Frustum_visitRenderables(self, *args)
    def getPositionForViewUpdate(self): return _Myoushu.Frustum_getPositionForViewUpdate(self)
    def getOrientationForViewUpdate(self): return _Myoushu.Frustum_getOrientationForViewUpdate(self)
Frustum_swigregister = _Myoushu.Frustum_swigregister
Frustum_swigregister(Frustum)
Frustum.INFINITE_FAR_PLANE_ADJUST = _Myoushu.cvar.Frustum_INFINITE_FAR_PLANE_ADJUST

class Camera(Frustum):
    __swig_setmethods__ = {}
    for _s in [Frustum]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Camera, name, value)
    __swig_getmethods__ = {}
    for _s in [Frustum]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Camera, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_Camera(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Camera
    __del__ = lambda self : None;
    def getSceneManager(self): return _Myoushu.Camera_getSceneManager(self)
    def getName(self): return _Myoushu.Camera_getName(self)
    def setPolygonMode(self, *args): return _Myoushu.Camera_setPolygonMode(self, *args)
    def getPolygonMode(self): return _Myoushu.Camera_getPolygonMode(self)
    def setPosition(self, *args): return _Myoushu.Camera_setPosition(self, *args)
    def getPosition(self): return _Myoushu.Camera_getPosition(self)
    def move(self, *args): return _Myoushu.Camera_move(self, *args)
    def moveRelative(self, *args): return _Myoushu.Camera_moveRelative(self, *args)
    def setDirection(self, *args): return _Myoushu.Camera_setDirection(self, *args)
    def getDirection(self): return _Myoushu.Camera_getDirection(self)
    def getUp(self): return _Myoushu.Camera_getUp(self)
    def getRight(self): return _Myoushu.Camera_getRight(self)
    def lookAt(self, *args): return _Myoushu.Camera_lookAt(self, *args)
    def roll(self, *args): return _Myoushu.Camera_roll(self, *args)
    def yaw(self, *args): return _Myoushu.Camera_yaw(self, *args)
    def pitch(self, *args): return _Myoushu.Camera_pitch(self, *args)
    def rotate(self, *args): return _Myoushu.Camera_rotate(self, *args)
    def setFixedYawAxis(self, *args): return _Myoushu.Camera_setFixedYawAxis(self, *args)
    def getOrientation(self): return _Myoushu.Camera_getOrientation(self)
    def setOrientation(self, *args): return _Myoushu.Camera_setOrientation(self, *args)
    def _renderScene(self, *args): return _Myoushu.Camera__renderScene(self, *args)
    def _notifyRenderedFaces(self, *args): return _Myoushu.Camera__notifyRenderedFaces(self, *args)
    def _notifyRenderedBatches(self, *args): return _Myoushu.Camera__notifyRenderedBatches(self, *args)
    def _getNumRenderedFaces(self): return _Myoushu.Camera__getNumRenderedFaces(self)
    def _getNumRenderedBatches(self): return _Myoushu.Camera__getNumRenderedBatches(self)
    def getDerivedOrientation(self): return _Myoushu.Camera_getDerivedOrientation(self)
    def getDerivedPosition(self): return _Myoushu.Camera_getDerivedPosition(self)
    def getDerivedDirection(self): return _Myoushu.Camera_getDerivedDirection(self)
    def getDerivedUp(self): return _Myoushu.Camera_getDerivedUp(self)
    def getDerivedRight(self): return _Myoushu.Camera_getDerivedRight(self)
    def getRealOrientation(self): return _Myoushu.Camera_getRealOrientation(self)
    def getRealPosition(self): return _Myoushu.Camera_getRealPosition(self)
    def getRealDirection(self): return _Myoushu.Camera_getRealDirection(self)
    def getRealUp(self): return _Myoushu.Camera_getRealUp(self)
    def getRealRight(self): return _Myoushu.Camera_getRealRight(self)
    def getMovableType(self): return _Myoushu.Camera_getMovableType(self)
    def setAutoTracking(self, *args): return _Myoushu.Camera_setAutoTracking(self, *args)
    def setLodBias(self, factor = 1.0): return _Myoushu.Camera_setLodBias(self, factor)
    def getLodBias(self): return _Myoushu.Camera_getLodBias(self)
    def setLodCamera(self, *args): return _Myoushu.Camera_setLodCamera(self, *args)
    def getLodCamera(self): return _Myoushu.Camera_getLodCamera(self)
    def getCameraToViewportRay(self, *args): return _Myoushu.Camera_getCameraToViewportRay(self, *args)
    def getCameraToViewportBoxVolume(self, *args): return _Myoushu.Camera_getCameraToViewportBoxVolume(self, *args)
    def _getLodBiasInverse(self): return _Myoushu.Camera__getLodBiasInverse(self)
    def _autoTrack(self): return _Myoushu.Camera__autoTrack(self)
    def setWindow(self, *args): return _Myoushu.Camera_setWindow(self, *args)
    def resetWindow(self): return _Myoushu.Camera_resetWindow(self)
    def isWindowSet(self): return _Myoushu.Camera_isWindowSet(self)
    def getWindowPlanes(self): return _Myoushu.Camera_getWindowPlanes(self)
    def getBoundingRadius(self): return _Myoushu.Camera_getBoundingRadius(self)
    def getAutoTrackTarget(self): return _Myoushu.Camera_getAutoTrackTarget(self)
    def getAutoTrackOffset(self): return _Myoushu.Camera_getAutoTrackOffset(self)
    def getViewport(self): return _Myoushu.Camera_getViewport(self)
    def _notifyViewport(self, *args): return _Myoushu.Camera__notifyViewport(self, *args)
    def setAutoAspectRatio(self, *args): return _Myoushu.Camera_setAutoAspectRatio(self, *args)
    def getAutoAspectRatio(self): return _Myoushu.Camera_getAutoAspectRatio(self)
    def setCullingFrustum(self, *args): return _Myoushu.Camera_setCullingFrustum(self, *args)
    def getCullingFrustum(self): return _Myoushu.Camera_getCullingFrustum(self)
    def forwardIntersect(self, *args): return _Myoushu.Camera_forwardIntersect(self, *args)
    def isVisible(self, *args): return _Myoushu.Camera_isVisible(self, *args)
    def getWorldSpaceCorners(self): return _Myoushu.Camera_getWorldSpaceCorners(self)
    def getFrustumPlane(self, *args): return _Myoushu.Camera_getFrustumPlane(self, *args)
    def projectSphere(self, *args): return _Myoushu.Camera_projectSphere(self, *args)
    def getNearClipDistance(self): return _Myoushu.Camera_getNearClipDistance(self)
    def getFarClipDistance(self): return _Myoushu.Camera_getFarClipDistance(self)
    def getViewMatrix(self, *args): return _Myoushu.Camera_getViewMatrix(self, *args)
    def setUseRenderingDistance(self, *args): return _Myoushu.Camera_setUseRenderingDistance(self, *args)
    def getUseRenderingDistance(self): return _Myoushu.Camera_getUseRenderingDistance(self)
    def synchroniseBaseSettingsWith(self, *args): return _Myoushu.Camera_synchroniseBaseSettingsWith(self, *args)
    def getPositionForViewUpdate(self): return _Myoushu.Camera_getPositionForViewUpdate(self)
    def getOrientationForViewUpdate(self): return _Myoushu.Camera_getOrientationForViewUpdate(self)
Camera_swigregister = _Myoushu.Camera_swigregister
Camera_swigregister(Camera)

class Entity(MovableObject):
    __swig_setmethods__ = {}
    for _s in [MovableObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Entity, name, value)
    __swig_getmethods__ = {}
    for _s in [MovableObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Entity, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_Entity
    __del__ = lambda self : None;
    def getMesh(self): return _Myoushu.Entity_getMesh(self)
    def getSubEntity(self, *args): return _Myoushu.Entity_getSubEntity(self, *args)
    def getNumSubEntities(self): return _Myoushu.Entity_getNumSubEntities(self)
    def clone(self, *args): return _Myoushu.Entity_clone(self, *args)
    def setMaterialName(self, *args): return _Myoushu.Entity_setMaterialName(self, *args)
    def _notifyCurrentCamera(self, *args): return _Myoushu.Entity__notifyCurrentCamera(self, *args)
    def setRenderQueueGroup(self, *args): return _Myoushu.Entity_setRenderQueueGroup(self, *args)
    def getBoundingBox(self): return _Myoushu.Entity_getBoundingBox(self)
    def getChildObjectsBoundingBox(self): return _Myoushu.Entity_getChildObjectsBoundingBox(self)
    def _updateRenderQueue(self, *args): return _Myoushu.Entity__updateRenderQueue(self, *args)
    def getMovableType(self): return _Myoushu.Entity_getMovableType(self)
    def getAnimationState(self, *args): return _Myoushu.Entity_getAnimationState(self, *args)
    def getAllAnimationStates(self): return _Myoushu.Entity_getAllAnimationStates(self)
    def setDisplaySkeleton(self, *args): return _Myoushu.Entity_setDisplaySkeleton(self, *args)
    def getDisplaySkeleton(self): return _Myoushu.Entity_getDisplaySkeleton(self)
    def getManualLodLevel(self, *args): return _Myoushu.Entity_getManualLodLevel(self, *args)
    def getNumManualLodLevels(self): return _Myoushu.Entity_getNumManualLodLevels(self)
    def getCurrentLodIndex(self): return _Myoushu.Entity_getCurrentLodIndex(self)
    def setMeshLodBias(self, *args): return _Myoushu.Entity_setMeshLodBias(self, *args)
    def setMaterialLodBias(self, *args): return _Myoushu.Entity_setMaterialLodBias(self, *args)
    def setPolygonModeOverrideable(self, *args): return _Myoushu.Entity_setPolygonModeOverrideable(self, *args)
    def attachObjectToBone(self, *args): return _Myoushu.Entity_attachObjectToBone(self, *args)
    def detachObjectFromBone(self, *args): return _Myoushu.Entity_detachObjectFromBone(self, *args)
    def detachAllObjectsFromBone(self): return _Myoushu.Entity_detachAllObjectsFromBone(self)
    def getAttachedObjectIterator(self): return _Myoushu.Entity_getAttachedObjectIterator(self)
    def getBoundingRadius(self): return _Myoushu.Entity_getBoundingRadius(self)
    def getWorldBoundingBox(self, derive = False): return _Myoushu.Entity_getWorldBoundingBox(self, derive)
    def getWorldBoundingSphere(self, derive = False): return _Myoushu.Entity_getWorldBoundingSphere(self, derive)
    def getEdgeList(self): return _Myoushu.Entity_getEdgeList(self)
    def hasEdgeList(self): return _Myoushu.Entity_hasEdgeList(self)
    def _getBoneMatrices(self): return _Myoushu.Entity__getBoneMatrices(self)
    def _getNumBoneMatrices(self): return _Myoushu.Entity__getNumBoneMatrices(self)
    def hasSkeleton(self): return _Myoushu.Entity_hasSkeleton(self)
    def getSkeleton(self): return _Myoushu.Entity_getSkeleton(self)
    def isHardwareAnimationEnabled(self): return _Myoushu.Entity_isHardwareAnimationEnabled(self)
    def _notifyAttached(self, *args): return _Myoushu.Entity__notifyAttached(self, *args)
    def getSoftwareAnimationRequests(self): return _Myoushu.Entity_getSoftwareAnimationRequests(self)
    def getSoftwareAnimationNormalsRequests(self): return _Myoushu.Entity_getSoftwareAnimationNormalsRequests(self)
    def addSoftwareAnimationRequest(self, *args): return _Myoushu.Entity_addSoftwareAnimationRequest(self, *args)
    def removeSoftwareAnimationRequest(self, *args): return _Myoushu.Entity_removeSoftwareAnimationRequest(self, *args)
    def shareSkeletonInstanceWith(self, *args): return _Myoushu.Entity_shareSkeletonInstanceWith(self, *args)
    def hasVertexAnimation(self): return _Myoushu.Entity_hasVertexAnimation(self)
    def stopSharingSkeletonInstance(self): return _Myoushu.Entity_stopSharingSkeletonInstance(self)
    def sharesSkeletonInstance(self): return _Myoushu.Entity_sharesSkeletonInstance(self)
    def getSkeletonInstanceSharingSet(self): return _Myoushu.Entity_getSkeletonInstanceSharingSet(self)
    def refreshAvailableAnimationState(self): return _Myoushu.Entity_refreshAvailableAnimationState(self)
    def _updateAnimation(self): return _Myoushu.Entity__updateAnimation(self)
    def _isAnimated(self): return _Myoushu.Entity__isAnimated(self)
    def _isSkeletonAnimated(self): return _Myoushu.Entity__isSkeletonAnimated(self)
    def _getSkelAnimVertexData(self): return _Myoushu.Entity__getSkelAnimVertexData(self)
    def _getSoftwareVertexAnimVertexData(self): return _Myoushu.Entity__getSoftwareVertexAnimVertexData(self)
    def _getHardwareVertexAnimVertexData(self): return _Myoushu.Entity__getHardwareVertexAnimVertexData(self)
    def _getSkelAnimTempBufferInfo(self): return _Myoushu.Entity__getSkelAnimTempBufferInfo(self)
    def _getVertexAnimTempBufferInfo(self): return _Myoushu.Entity__getVertexAnimTempBufferInfo(self)
    def getTypeFlags(self): return _Myoushu.Entity_getTypeFlags(self)
    def getVertexDataForBinding(self): return _Myoushu.Entity_getVertexDataForBinding(self)
    BIND_ORIGINAL = _Myoushu.Entity_BIND_ORIGINAL
    BIND_SOFTWARE_SKELETAL = _Myoushu.Entity_BIND_SOFTWARE_SKELETAL
    BIND_SOFTWARE_MORPH = _Myoushu.Entity_BIND_SOFTWARE_MORPH
    BIND_HARDWARE_MORPH = _Myoushu.Entity_BIND_HARDWARE_MORPH
    def chooseVertexDataForBinding(self, *args): return _Myoushu.Entity_chooseVertexDataForBinding(self, *args)
    def _getBuffersMarkedForAnimation(self): return _Myoushu.Entity__getBuffersMarkedForAnimation(self)
    def _markBuffersUsedForAnimation(self): return _Myoushu.Entity__markBuffersUsedForAnimation(self)
    def isInitialised(self): return _Myoushu.Entity_isInitialised(self)
    def _initialise(self, forceReinitialise = False): return _Myoushu.Entity__initialise(self, forceReinitialise)
    def _deinitialise(self): return _Myoushu.Entity__deinitialise(self)
    def backgroundLoadingComplete(self, *args): return _Myoushu.Entity_backgroundLoadingComplete(self, *args)
    def visitRenderables(self, *args): return _Myoushu.Entity_visitRenderables(self, *args)
Entity_swigregister = _Myoushu.Entity_swigregister
Entity_swigregister(Entity)

class EntityFactory(MovableObjectFactory):
    __swig_setmethods__ = {}
    for _s in [MovableObjectFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EntityFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [MovableObjectFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EntityFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_EntityFactory
    __del__ = lambda self : None;
    __swig_setmethods__["FACTORY_TYPE_NAME"] = _Myoushu.EntityFactory_FACTORY_TYPE_NAME_set
    __swig_getmethods__["FACTORY_TYPE_NAME"] = _Myoushu.EntityFactory_FACTORY_TYPE_NAME_get
    if _newclass:FACTORY_TYPE_NAME = _swig_property(_Myoushu.EntityFactory_FACTORY_TYPE_NAME_get, _Myoushu.EntityFactory_FACTORY_TYPE_NAME_set)
    def getType(self): return _Myoushu.EntityFactory_getType(self)
    def destroyInstance(self, *args): return _Myoushu.EntityFactory_destroyInstance(self, *args)
EntityFactory_swigregister = _Myoushu.EntityFactory_swigregister
EntityFactory_swigregister(EntityFactory)

class SceneNode(Node):
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SceneNode, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SceneNode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_SceneNode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_SceneNode
    __del__ = lambda self : None;
    def attachObject(self, *args): return _Myoushu.SceneNode_attachObject(self, *args)
    def numAttachedObjects(self): return _Myoushu.SceneNode_numAttachedObjects(self)
    def getAttachedObject(self, *args): return _Myoushu.SceneNode_getAttachedObject(self, *args)
    def detachObject(self, *args): return _Myoushu.SceneNode_detachObject(self, *args)
    def detachAllObjects(self): return _Myoushu.SceneNode_detachAllObjects(self)
    def isInSceneGraph(self): return _Myoushu.SceneNode_isInSceneGraph(self)
    def _notifyRootNode(self): return _Myoushu.SceneNode__notifyRootNode(self)
    def _update(self, *args): return _Myoushu.SceneNode__update(self, *args)
    def _updateBounds(self): return _Myoushu.SceneNode__updateBounds(self)
    def _findVisibleObjects(self, *args): return _Myoushu.SceneNode__findVisibleObjects(self, *args)
    def _getWorldAABB(self): return _Myoushu.SceneNode__getWorldAABB(self)
    def getAttachedObjectIterator(self, *args): return _Myoushu.SceneNode_getAttachedObjectIterator(self, *args)
    def getCreator(self): return _Myoushu.SceneNode_getCreator(self)
    def removeAndDestroyChild(self, *args): return _Myoushu.SceneNode_removeAndDestroyChild(self, *args)
    def removeAndDestroyAllChildren(self): return _Myoushu.SceneNode_removeAndDestroyAllChildren(self)
    def showBoundingBox(self, *args): return _Myoushu.SceneNode_showBoundingBox(self, *args)
    def _addBoundingBoxToQueue(self, *args): return _Myoushu.SceneNode__addBoundingBoxToQueue(self, *args)
    def getShowBoundingBox(self): return _Myoushu.SceneNode_getShowBoundingBox(self)
    def createChildSceneNode(self, *args): return _Myoushu.SceneNode_createChildSceneNode(self, *args)
    def findLights(self, *args): return _Myoushu.SceneNode_findLights(self, *args)
    def setFixedYawAxis(self, *args): return _Myoushu.SceneNode_setFixedYawAxis(self, *args)
    def yaw(self, *args): return _Myoushu.SceneNode_yaw(self, *args)
    def setDirection(self, *args): return _Myoushu.SceneNode_setDirection(self, *args)
    def lookAt(self, *args): return _Myoushu.SceneNode_lookAt(self, *args)
    def setAutoTracking(self, *args): return _Myoushu.SceneNode_setAutoTracking(self, *args)
    def getAutoTrackTarget(self): return _Myoushu.SceneNode_getAutoTrackTarget(self)
    def getAutoTrackOffset(self): return _Myoushu.SceneNode_getAutoTrackOffset(self)
    def getAutoTrackLocalDirection(self): return _Myoushu.SceneNode_getAutoTrackLocalDirection(self)
    def _autoTrack(self): return _Myoushu.SceneNode__autoTrack(self)
    def getParentSceneNode(self): return _Myoushu.SceneNode_getParentSceneNode(self)
    def setVisible(self, *args): return _Myoushu.SceneNode_setVisible(self, *args)
    def flipVisibility(self, cascade = True): return _Myoushu.SceneNode_flipVisibility(self, cascade)
    def setDebugDisplayEnabled(self, *args): return _Myoushu.SceneNode_setDebugDisplayEnabled(self, *args)
SceneNode_swigregister = _Myoushu.SceneNode_swigregister
SceneNode_swigregister(SceneNode)

class ParticleSystem(MovableObject):
    __swig_setmethods__ = {}
    for _s in [MovableObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [MovableObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleSystem, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_ParticleSystem(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ParticleSystem
    __del__ = lambda self : None;
    def setRenderer(self, *args): return _Myoushu.ParticleSystem_setRenderer(self, *args)
    def getRenderer(self): return _Myoushu.ParticleSystem_getRenderer(self)
    def getRendererName(self): return _Myoushu.ParticleSystem_getRendererName(self)
    def addEmitter(self, *args): return _Myoushu.ParticleSystem_addEmitter(self, *args)
    def getEmitter(self, *args): return _Myoushu.ParticleSystem_getEmitter(self, *args)
    def getNumEmitters(self): return _Myoushu.ParticleSystem_getNumEmitters(self)
    def removeEmitter(self, *args): return _Myoushu.ParticleSystem_removeEmitter(self, *args)
    def removeAllEmitters(self): return _Myoushu.ParticleSystem_removeAllEmitters(self)
    def addAffector(self, *args): return _Myoushu.ParticleSystem_addAffector(self, *args)
    def getAffector(self, *args): return _Myoushu.ParticleSystem_getAffector(self, *args)
    def getNumAffectors(self): return _Myoushu.ParticleSystem_getNumAffectors(self)
    def removeAffector(self, *args): return _Myoushu.ParticleSystem_removeAffector(self, *args)
    def removeAllAffectors(self): return _Myoushu.ParticleSystem_removeAllAffectors(self)
    def clear(self): return _Myoushu.ParticleSystem_clear(self)
    def getNumParticles(self): return _Myoushu.ParticleSystem_getNumParticles(self)
    def createParticle(self): return _Myoushu.ParticleSystem_createParticle(self)
    def createEmitterParticle(self, *args): return _Myoushu.ParticleSystem_createEmitterParticle(self, *args)
    def getParticle(self, *args): return _Myoushu.ParticleSystem_getParticle(self, *args)
    def getParticleQuota(self): return _Myoushu.ParticleSystem_getParticleQuota(self)
    def setParticleQuota(self, *args): return _Myoushu.ParticleSystem_setParticleQuota(self, *args)
    def getEmittedEmitterQuota(self): return _Myoushu.ParticleSystem_getEmittedEmitterQuota(self)
    def setEmittedEmitterQuota(self, *args): return _Myoushu.ParticleSystem_setEmittedEmitterQuota(self, *args)
    def _update(self, *args): return _Myoushu.ParticleSystem__update(self, *args)
    def setMaterialName(self, *args): return _Myoushu.ParticleSystem_setMaterialName(self, *args)
    def getMaterialName(self): return _Myoushu.ParticleSystem_getMaterialName(self)
    def _notifyCurrentCamera(self, *args): return _Myoushu.ParticleSystem__notifyCurrentCamera(self, *args)
    def _notifyAttached(self, *args): return _Myoushu.ParticleSystem__notifyAttached(self, *args)
    def getBoundingBox(self): return _Myoushu.ParticleSystem_getBoundingBox(self)
    def getBoundingRadius(self): return _Myoushu.ParticleSystem_getBoundingRadius(self)
    def _updateRenderQueue(self, *args): return _Myoushu.ParticleSystem__updateRenderQueue(self, *args)
    def visitRenderables(self, *args): return _Myoushu.ParticleSystem_visitRenderables(self, *args)
    def fastForward(self, *args): return _Myoushu.ParticleSystem_fastForward(self, *args)
    def setSpeedFactor(self, *args): return _Myoushu.ParticleSystem_setSpeedFactor(self, *args)
    def getSpeedFactor(self): return _Myoushu.ParticleSystem_getSpeedFactor(self)
    def setIterationInterval(self, *args): return _Myoushu.ParticleSystem_setIterationInterval(self, *args)
    def getIterationInterval(self): return _Myoushu.ParticleSystem_getIterationInterval(self)
    __swig_getmethods__["setDefaultIterationInterval"] = lambda x: _Myoushu.ParticleSystem_setDefaultIterationInterval
    if _newclass:setDefaultIterationInterval = staticmethod(_Myoushu.ParticleSystem_setDefaultIterationInterval)
    __swig_getmethods__["getDefaultIterationInterval"] = lambda x: _Myoushu.ParticleSystem_getDefaultIterationInterval
    if _newclass:getDefaultIterationInterval = staticmethod(_Myoushu.ParticleSystem_getDefaultIterationInterval)
    def setNonVisibleUpdateTimeout(self, *args): return _Myoushu.ParticleSystem_setNonVisibleUpdateTimeout(self, *args)
    def getNonVisibleUpdateTimeout(self): return _Myoushu.ParticleSystem_getNonVisibleUpdateTimeout(self)
    __swig_getmethods__["setDefaultNonVisibleUpdateTimeout"] = lambda x: _Myoushu.ParticleSystem_setDefaultNonVisibleUpdateTimeout
    if _newclass:setDefaultNonVisibleUpdateTimeout = staticmethod(_Myoushu.ParticleSystem_setDefaultNonVisibleUpdateTimeout)
    __swig_getmethods__["getDefaultNonVisibleUpdateTimeout"] = lambda x: _Myoushu.ParticleSystem_getDefaultNonVisibleUpdateTimeout
    if _newclass:getDefaultNonVisibleUpdateTimeout = staticmethod(_Myoushu.ParticleSystem_getDefaultNonVisibleUpdateTimeout)
    def getMovableType(self): return _Myoushu.ParticleSystem_getMovableType(self)
    def _notifyParticleResized(self): return _Myoushu.ParticleSystem__notifyParticleResized(self)
    def _notifyParticleRotated(self): return _Myoushu.ParticleSystem__notifyParticleRotated(self)
    def setDefaultDimensions(self, *args): return _Myoushu.ParticleSystem_setDefaultDimensions(self, *args)
    def setDefaultWidth(self, *args): return _Myoushu.ParticleSystem_setDefaultWidth(self, *args)
    def getDefaultWidth(self): return _Myoushu.ParticleSystem_getDefaultWidth(self)
    def setDefaultHeight(self, *args): return _Myoushu.ParticleSystem_setDefaultHeight(self, *args)
    def getDefaultHeight(self): return _Myoushu.ParticleSystem_getDefaultHeight(self)
    def getCullIndividually(self): return _Myoushu.ParticleSystem_getCullIndividually(self)
    def setCullIndividually(self, *args): return _Myoushu.ParticleSystem_setCullIndividually(self, *args)
    def getResourceGroupName(self): return _Myoushu.ParticleSystem_getResourceGroupName(self)
    def getOrigin(self): return _Myoushu.ParticleSystem_getOrigin(self)
    def _notifyOrigin(self, *args): return _Myoushu.ParticleSystem__notifyOrigin(self, *args)
    def setRenderQueueGroup(self, *args): return _Myoushu.ParticleSystem_setRenderQueueGroup(self, *args)
    def setSortingEnabled(self, *args): return _Myoushu.ParticleSystem_setSortingEnabled(self, *args)
    def getSortingEnabled(self): return _Myoushu.ParticleSystem_getSortingEnabled(self)
    def setBounds(self, *args): return _Myoushu.ParticleSystem_setBounds(self, *args)
    def setBoundsAutoUpdated(self, *args): return _Myoushu.ParticleSystem_setBoundsAutoUpdated(self, *args)
    def setKeepParticlesInLocalSpace(self, *args): return _Myoushu.ParticleSystem_setKeepParticlesInLocalSpace(self, *args)
    def getKeepParticlesInLocalSpace(self): return _Myoushu.ParticleSystem_getKeepParticlesInLocalSpace(self)
    def _updateBounds(self): return _Myoushu.ParticleSystem__updateBounds(self)
    def getTypeFlags(self): return _Myoushu.ParticleSystem_getTypeFlags(self)
ParticleSystem_swigregister = _Myoushu.ParticleSystem_swigregister
ParticleSystem_swigregister(ParticleSystem)

def ParticleSystem_setDefaultIterationInterval(*args):
  return _Myoushu.ParticleSystem_setDefaultIterationInterval(*args)
ParticleSystem_setDefaultIterationInterval = _Myoushu.ParticleSystem_setDefaultIterationInterval

def ParticleSystem_getDefaultIterationInterval():
  return _Myoushu.ParticleSystem_getDefaultIterationInterval()
ParticleSystem_getDefaultIterationInterval = _Myoushu.ParticleSystem_getDefaultIterationInterval

def ParticleSystem_setDefaultNonVisibleUpdateTimeout(*args):
  return _Myoushu.ParticleSystem_setDefaultNonVisibleUpdateTimeout(*args)
ParticleSystem_setDefaultNonVisibleUpdateTimeout = _Myoushu.ParticleSystem_setDefaultNonVisibleUpdateTimeout

def ParticleSystem_getDefaultNonVisibleUpdateTimeout():
  return _Myoushu.ParticleSystem_getDefaultNonVisibleUpdateTimeout()
ParticleSystem_getDefaultNonVisibleUpdateTimeout = _Myoushu.ParticleSystem_getDefaultNonVisibleUpdateTimeout

class Viewport(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Viewport, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Viewport, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_Viewport(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Viewport
    __del__ = lambda self : None;
    def _updateDimensions(self): return _Myoushu.Viewport__updateDimensions(self)
    def update(self): return _Myoushu.Viewport_update(self)
    def getTarget(self): return _Myoushu.Viewport_getTarget(self)
    def getCamera(self): return _Myoushu.Viewport_getCamera(self)
    def setCamera(self, *args): return _Myoushu.Viewport_setCamera(self, *args)
    def getZOrder(self): return _Myoushu.Viewport_getZOrder(self)
    def getLeft(self): return _Myoushu.Viewport_getLeft(self)
    def getTop(self): return _Myoushu.Viewport_getTop(self)
    def getWidth(self): return _Myoushu.Viewport_getWidth(self)
    def getHeight(self): return _Myoushu.Viewport_getHeight(self)
    def getActualLeft(self): return _Myoushu.Viewport_getActualLeft(self)
    def getActualTop(self): return _Myoushu.Viewport_getActualTop(self)
    def getActualWidth(self): return _Myoushu.Viewport_getActualWidth(self)
    def getActualHeight(self): return _Myoushu.Viewport_getActualHeight(self)
    def setDimensions(self, *args): return _Myoushu.Viewport_setDimensions(self, *args)
    def setBackgroundColour(self, *args): return _Myoushu.Viewport_setBackgroundColour(self, *args)
    def getBackgroundColour(self): return _Myoushu.Viewport_getBackgroundColour(self)
    def setClearEveryFrame(self, *args): return _Myoushu.Viewport_setClearEveryFrame(self, *args)
    def getClearEveryFrame(self): return _Myoushu.Viewport_getClearEveryFrame(self)
    def getClearBuffers(self): return _Myoushu.Viewport_getClearBuffers(self)
    def setMaterialScheme(self, *args): return _Myoushu.Viewport_setMaterialScheme(self, *args)
    def getMaterialScheme(self): return _Myoushu.Viewport_getMaterialScheme(self)
    def getActualDimensions(self, *args): return _Myoushu.Viewport_getActualDimensions(self, *args)
    def _isUpdated(self): return _Myoushu.Viewport__isUpdated(self)
    def _clearUpdatedFlag(self): return _Myoushu.Viewport__clearUpdatedFlag(self)
    def _getNumRenderedFaces(self): return _Myoushu.Viewport__getNumRenderedFaces(self)
    def _getNumRenderedBatches(self): return _Myoushu.Viewport__getNumRenderedBatches(self)
    def setOverlaysEnabled(self, *args): return _Myoushu.Viewport_setOverlaysEnabled(self, *args)
    def getOverlaysEnabled(self): return _Myoushu.Viewport_getOverlaysEnabled(self)
    def setSkiesEnabled(self, *args): return _Myoushu.Viewport_setSkiesEnabled(self, *args)
    def getSkiesEnabled(self): return _Myoushu.Viewport_getSkiesEnabled(self)
    def setShadowsEnabled(self, *args): return _Myoushu.Viewport_setShadowsEnabled(self, *args)
    def getShadowsEnabled(self): return _Myoushu.Viewport_getShadowsEnabled(self)
    def setVisibilityMask(self, *args): return _Myoushu.Viewport_setVisibilityMask(self, *args)
    def getVisibilityMask(self): return _Myoushu.Viewport_getVisibilityMask(self)
    def setRenderQueueInvocationSequenceName(self, *args): return _Myoushu.Viewport_setRenderQueueInvocationSequenceName(self, *args)
    def getRenderQueueInvocationSequenceName(self): return _Myoushu.Viewport_getRenderQueueInvocationSequenceName(self)
    def _getRenderQueueInvocationSequence(self): return _Myoushu.Viewport__getRenderQueueInvocationSequence(self)
Viewport_swigregister = _Myoushu.Viewport_swigregister
Viewport_swigregister(Viewport)

OGRE_NUM_RENDERTARGET_GROUPS = _Myoushu.OGRE_NUM_RENDERTARGET_GROUPS
OGRE_DEFAULT_RT_GROUP = _Myoushu.OGRE_DEFAULT_RT_GROUP
OGRE_REND_TO_TEX_RT_GROUP = _Myoushu.OGRE_REND_TO_TEX_RT_GROUP
class RenderTarget(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RenderTarget, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RenderTarget, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SF_NONE = _Myoushu.RenderTarget_SF_NONE
    SF_FPS = _Myoushu.RenderTarget_SF_FPS
    SF_AVG_FPS = _Myoushu.RenderTarget_SF_AVG_FPS
    SF_BEST_FPS = _Myoushu.RenderTarget_SF_BEST_FPS
    SF_WORST_FPS = _Myoushu.RenderTarget_SF_WORST_FPS
    SF_TRIANGLE_COUNT = _Myoushu.RenderTarget_SF_TRIANGLE_COUNT
    SF_ALL = _Myoushu.RenderTarget_SF_ALL
    FB_FRONT = _Myoushu.RenderTarget_FB_FRONT
    FB_BACK = _Myoushu.RenderTarget_FB_BACK
    FB_AUTO = _Myoushu.RenderTarget_FB_AUTO
    __swig_destroy__ = _Myoushu.delete_RenderTarget
    __del__ = lambda self : None;
    def getName(self): return _Myoushu.RenderTarget_getName(self)
    def getMetrics(self, *args): return _Myoushu.RenderTarget_getMetrics(self, *args)
    def getWidth(self): return _Myoushu.RenderTarget_getWidth(self)
    def getHeight(self): return _Myoushu.RenderTarget_getHeight(self)
    def getColourDepth(self): return _Myoushu.RenderTarget_getColourDepth(self)
    def update(self, swapBuffers = True): return _Myoushu.RenderTarget_update(self, swapBuffers)
    def swapBuffers(self, waitForVSync = True): return _Myoushu.RenderTarget_swapBuffers(self, waitForVSync)
    def addViewport(self, *args): return _Myoushu.RenderTarget_addViewport(self, *args)
    def getNumViewports(self): return _Myoushu.RenderTarget_getNumViewports(self)
    def getViewport(self, *args): return _Myoushu.RenderTarget_getViewport(self, *args)
    def removeViewport(self, *args): return _Myoushu.RenderTarget_removeViewport(self, *args)
    def removeAllViewports(self): return _Myoushu.RenderTarget_removeAllViewports(self)
    def getStatistics(self, *args): return _Myoushu.RenderTarget_getStatistics(self, *args)
    def getLastFPS(self): return _Myoushu.RenderTarget_getLastFPS(self)
    def getAverageFPS(self): return _Myoushu.RenderTarget_getAverageFPS(self)
    def getBestFPS(self): return _Myoushu.RenderTarget_getBestFPS(self)
    def getWorstFPS(self): return _Myoushu.RenderTarget_getWorstFPS(self)
    def getBestFrameTime(self): return _Myoushu.RenderTarget_getBestFrameTime(self)
    def getWorstFrameTime(self): return _Myoushu.RenderTarget_getWorstFrameTime(self)
    def resetStatistics(self): return _Myoushu.RenderTarget_resetStatistics(self)
    def getCustomAttribute(self, *args): return _Myoushu.RenderTarget_getCustomAttribute(self, *args)
    def addListener(self, *args): return _Myoushu.RenderTarget_addListener(self, *args)
    def removeListener(self, *args): return _Myoushu.RenderTarget_removeListener(self, *args)
    def removeAllListeners(self): return _Myoushu.RenderTarget_removeAllListeners(self)
    def setPriority(self, *args): return _Myoushu.RenderTarget_setPriority(self, *args)
    def getPriority(self): return _Myoushu.RenderTarget_getPriority(self)
    def isActive(self): return _Myoushu.RenderTarget_isActive(self)
    def setActive(self, *args): return _Myoushu.RenderTarget_setActive(self, *args)
    def setAutoUpdated(self, *args): return _Myoushu.RenderTarget_setAutoUpdated(self, *args)
    def isAutoUpdated(self): return _Myoushu.RenderTarget_isAutoUpdated(self)
    def copyContentsToMemory(self, *args): return _Myoushu.RenderTarget_copyContentsToMemory(self, *args)
    def suggestPixelFormat(self): return _Myoushu.RenderTarget_suggestPixelFormat(self)
    def writeContentsToFile(self, *args): return _Myoushu.RenderTarget_writeContentsToFile(self, *args)
    def writeContentsToTimestampedFile(self, *args): return _Myoushu.RenderTarget_writeContentsToTimestampedFile(self, *args)
    def requiresTextureFlipping(self): return _Myoushu.RenderTarget_requiresTextureFlipping(self)
    def getTriangleCount(self): return _Myoushu.RenderTarget_getTriangleCount(self)
    def getBatchCount(self): return _Myoushu.RenderTarget_getBatchCount(self)
    def _notifyCameraRemoved(self, *args): return _Myoushu.RenderTarget__notifyCameraRemoved(self, *args)
    def isPrimary(self): return _Myoushu.RenderTarget_isPrimary(self)
    def isHardwareGammaEnabled(self): return _Myoushu.RenderTarget_isHardwareGammaEnabled(self)
    def getFSAA(self): return _Myoushu.RenderTarget_getFSAA(self)
    def _getImpl(self): return _Myoushu.RenderTarget__getImpl(self)
RenderTarget_swigregister = _Myoushu.RenderTarget_swigregister
RenderTarget_swigregister(RenderTarget)

class RenderWindow(RenderTarget):
    __swig_setmethods__ = {}
    for _s in [RenderTarget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RenderWindow, name, value)
    __swig_getmethods__ = {}
    for _s in [RenderTarget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RenderWindow, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def create(self, *args): return _Myoushu.RenderWindow_create(self, *args)
    def setFullscreen(self, *args): return _Myoushu.RenderWindow_setFullscreen(self, *args)
    def destroy(self): return _Myoushu.RenderWindow_destroy(self)
    def resize(self, *args): return _Myoushu.RenderWindow_resize(self, *args)
    def windowMovedOrResized(self): return _Myoushu.RenderWindow_windowMovedOrResized(self)
    def reposition(self, *args): return _Myoushu.RenderWindow_reposition(self, *args)
    def isVisible(self): return _Myoushu.RenderWindow_isVisible(self)
    def setVisible(self, *args): return _Myoushu.RenderWindow_setVisible(self, *args)
    def isActive(self): return _Myoushu.RenderWindow_isActive(self)
    def isClosed(self): return _Myoushu.RenderWindow_isClosed(self)
    def isPrimary(self): return _Myoushu.RenderWindow_isPrimary(self)
    def isFullScreen(self): return _Myoushu.RenderWindow_isFullScreen(self)
    def getMetrics(self, *args): return _Myoushu.RenderWindow_getMetrics(self, *args)
    def suggestPixelFormat(self): return _Myoushu.RenderWindow_suggestPixelFormat(self)
    def isDeactivatedOnFocusChange(self): return _Myoushu.RenderWindow_isDeactivatedOnFocusChange(self)
    def setDeactivateOnFocusChange(self, *args): return _Myoushu.RenderWindow_setDeactivateOnFocusChange(self, *args)
    __swig_destroy__ = _Myoushu.delete_RenderWindow
    __del__ = lambda self : None;
RenderWindow_swigregister = _Myoushu.RenderWindow_swigregister
RenderWindow_swigregister(RenderWindow)

NX_USE_CHARACTER_API = _Myoushu.NX_USE_CHARACTER_API
SF_Binary = _Myoushu.SF_Binary

def NxThrow(*args):
  return _Myoushu.NxThrow(*args)
NxThrow = _Myoushu.NxThrow
SO_STARTS_WITH = _Myoushu.SO_STARTS_WITH
SO_ENDS_WITH = _Myoushu.SO_ENDS_WITH
CO_MORE_THAN = _Myoushu.CO_MORE_THAN
CO_LESS_THAN = _Myoushu.CO_LESS_THAN
CO_EXACTLY = _Myoushu.CO_EXACTLY
CO_NOT = _Myoushu.CO_NOT
Nx_Version_Major = _Myoushu.Nx_Version_Major
Nx_Version_Minor = _Myoushu.Nx_Version_Minor
Nx_Version_Commit = _Myoushu.Nx_Version_Commit
Nx_Version_Codename = _Myoushu.Nx_Version_Codename
class StringPairList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringPairList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringPairList, name)
    __repr__ = _swig_repr
    def parseCSString(self, *args): return _Myoushu.StringPairList_parseCSString(self, *args)
    def get(self, *args): return _Myoushu.StringPairList_get(self, *args)
    def end(self): return _Myoushu.StringPairList_end(self)
    def insert(self, *args): return _Myoushu.StringPairList_insert(self, *args)
    def begin(self): return _Myoushu.StringPairList_begin(self)
    def hasKey(self, *args): return _Myoushu.StringPairList_hasKey(self, *args)
    def getFirstOf(self, *args): return _Myoushu.StringPairList_getFirstOf(self, *args)
    def hasNext(self): return _Myoushu.StringPairList_hasNext(self)
    def next(self): return _Myoushu.StringPairList_next(self)
    def count(self): return _Myoushu.StringPairList_count(self)
    def empty(self): return _Myoushu.StringPairList_empty(self)
    def dumpToConsole(self): return _Myoushu.StringPairList_dumpToConsole(self)
    __swig_setmethods__["items"] = _Myoushu.StringPairList_items_set
    __swig_getmethods__["items"] = _Myoushu.StringPairList_items_get
    if _newclass:items = _swig_property(_Myoushu.StringPairList_items_get, _Myoushu.StringPairList_items_set)
    __swig_setmethods__["mIterator"] = _Myoushu.StringPairList_mIterator_set
    __swig_getmethods__["mIterator"] = _Myoushu.StringPairList_mIterator_get
    if _newclass:mIterator = _swig_property(_Myoushu.StringPairList_mIterator_get, _Myoushu.StringPairList_mIterator_set)
    def __init__(self): 
        this = _Myoushu.new_StringPairList()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_StringPairList
    __del__ = lambda self : None;
StringPairList_swigregister = _Myoushu.StringPairList_swigregister
StringPairList_swigregister(StringPairList)
NxVec3Axis = cvar.NxVec3Axis

class Params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Params, name)
    __repr__ = _swig_repr
    def process(self, *args): return _Myoushu.Params_process(self, *args)
    def fromString(self, *args): return _Myoushu.Params_fromString(self, *args)
    def setToDefault(self): return _Myoushu.Params_setToDefault(self)
    def __init__(self): 
        this = _Myoushu.new_Params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Params
    __del__ = lambda self : None;
Params_swigregister = _Myoushu.Params_swigregister
Params_swigregister(Params)

class Pose(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pose, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Pose, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_Pose(*args)
        try: self.this.append(this)
        except: self.this = this
    def id(self): return _Myoushu.Pose_id(self)
    def set(self, *args): return _Myoushu.Pose_set(self, *args)
    def isZero(self): return _Myoushu.Pose_isZero(self)
    def fromMat34(self, *args): return _Myoushu.Pose_fromMat34(self, *args)
    def toMat34(self): return _Myoushu.Pose_toMat34(self)
    def fromMat33(self, *args): return _Myoushu.Pose_fromMat33(self, *args)
    def toMat33(self): return _Myoushu.Pose_toMat33(self)
    def getVector3(self): return _Myoushu.Pose_getVector3(self)
    def getVec3(self): return _Myoushu.Pose_getVec3(self)
    def getQuaternion(self): return _Myoushu.Pose_getQuaternion(self)
    def getQuat(self): return _Myoushu.Pose_getQuat(self)
    __swig_setmethods__["v"] = _Myoushu.Pose_v_set
    __swig_getmethods__["v"] = _Myoushu.Pose_v_get
    if _newclass:v = _swig_property(_Myoushu.Pose_v_get, _Myoushu.Pose_v_set)
    __swig_setmethods__["q"] = _Myoushu.Pose_q_set
    __swig_getmethods__["q"] = _Myoushu.Pose_q_get
    if _newclass:q = _swig_property(_Myoushu.Pose_q_get, _Myoushu.Pose_q_set)
    __swig_destroy__ = _Myoushu.delete_Pose
    __del__ = lambda self : None;
Pose_swigregister = _Myoushu.Pose_swigregister
Pose_swigregister(Pose)

class ShapeParams(Params):
    __swig_setmethods__ = {}
    for _s in [Params]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeParams, name, value)
    __swig_getmethods__ = {}
    for _s in [Params]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeParams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mLocalPose"] = _Myoushu.ShapeParams_mLocalPose_set
    __swig_getmethods__["mLocalPose"] = _Myoushu.ShapeParams_mLocalPose_get
    if _newclass:mLocalPose = _swig_property(_Myoushu.ShapeParams_mLocalPose_get, _Myoushu.ShapeParams_mLocalPose_set)
    __swig_setmethods__["mGenerateCCD"] = _Myoushu.ShapeParams_mGenerateCCD_set
    __swig_getmethods__["mGenerateCCD"] = _Myoushu.ShapeParams_mGenerateCCD_get
    if _newclass:mGenerateCCD = _swig_property(_Myoushu.ShapeParams_mGenerateCCD_get, _Myoushu.ShapeParams_mGenerateCCD_set)
    __swig_setmethods__["mGenerateCCDDelta"] = _Myoushu.ShapeParams_mGenerateCCDDelta_set
    __swig_getmethods__["mGenerateCCDDelta"] = _Myoushu.ShapeParams_mGenerateCCDDelta_get
    if _newclass:mGenerateCCDDelta = _swig_property(_Myoushu.ShapeParams_mGenerateCCDDelta_get, _Myoushu.ShapeParams_mGenerateCCDDelta_set)
    __swig_setmethods__["mDynamicDynamicCCD"] = _Myoushu.ShapeParams_mDynamicDynamicCCD_set
    __swig_getmethods__["mDynamicDynamicCCD"] = _Myoushu.ShapeParams_mDynamicDynamicCCD_get
    if _newclass:mDynamicDynamicCCD = _swig_property(_Myoushu.ShapeParams_mDynamicDynamicCCD_get, _Myoushu.ShapeParams_mDynamicDynamicCCD_set)
    __swig_setmethods__["mCCDSkeleton"] = _Myoushu.ShapeParams_mCCDSkeleton_set
    __swig_getmethods__["mCCDSkeleton"] = _Myoushu.ShapeParams_mCCDSkeleton_get
    if _newclass:mCCDSkeleton = _swig_property(_Myoushu.ShapeParams_mCCDSkeleton_get, _Myoushu.ShapeParams_mCCDSkeleton_set)
    __swig_setmethods__["mMaterialAsIndex"] = _Myoushu.ShapeParams_mMaterialAsIndex_set
    __swig_getmethods__["mMaterialAsIndex"] = _Myoushu.ShapeParams_mMaterialAsIndex_get
    if _newclass:mMaterialAsIndex = _swig_property(_Myoushu.ShapeParams_mMaterialAsIndex_get, _Myoushu.ShapeParams_mMaterialAsIndex_set)
    __swig_setmethods__["mMaterialAsName"] = _Myoushu.ShapeParams_mMaterialAsName_set
    __swig_getmethods__["mMaterialAsName"] = _Myoushu.ShapeParams_mMaterialAsName_get
    if _newclass:mMaterialAsName = _swig_property(_Myoushu.ShapeParams_mMaterialAsName_get, _Myoushu.ShapeParams_mMaterialAsName_set)
    __swig_setmethods__["mGroupAsName"] = _Myoushu.ShapeParams_mGroupAsName_set
    __swig_getmethods__["mGroupAsName"] = _Myoushu.ShapeParams_mGroupAsName_get
    if _newclass:mGroupAsName = _swig_property(_Myoushu.ShapeParams_mGroupAsName_get, _Myoushu.ShapeParams_mGroupAsName_set)
    __swig_setmethods__["mGroupAsIndex"] = _Myoushu.ShapeParams_mGroupAsIndex_set
    __swig_getmethods__["mGroupAsIndex"] = _Myoushu.ShapeParams_mGroupAsIndex_get
    if _newclass:mGroupAsIndex = _swig_property(_Myoushu.ShapeParams_mGroupAsIndex_get, _Myoushu.ShapeParams_mGroupAsIndex_set)
    __swig_setmethods__["mGroupsMask"] = _Myoushu.ShapeParams_mGroupsMask_set
    __swig_getmethods__["mGroupsMask"] = _Myoushu.ShapeParams_mGroupsMask_get
    if _newclass:mGroupsMask = _swig_property(_Myoushu.ShapeParams_mGroupsMask_get, _Myoushu.ShapeParams_mGroupsMask_set)
    __swig_setmethods__["mSkinWidth"] = _Myoushu.ShapeParams_mSkinWidth_set
    __swig_getmethods__["mSkinWidth"] = _Myoushu.ShapeParams_mSkinWidth_get
    if _newclass:mSkinWidth = _swig_property(_Myoushu.ShapeParams_mSkinWidth_get, _Myoushu.ShapeParams_mSkinWidth_set)
    __swig_setmethods__["mMeshScale"] = _Myoushu.ShapeParams_mMeshScale_set
    __swig_getmethods__["mMeshScale"] = _Myoushu.ShapeParams_mMeshScale_get
    if _newclass:mMeshScale = _swig_property(_Myoushu.ShapeParams_mMeshScale_get, _Myoushu.ShapeParams_mMeshScale_set)
    __swig_setmethods__["mMass"] = _Myoushu.ShapeParams_mMass_set
    __swig_getmethods__["mMass"] = _Myoushu.ShapeParams_mMass_get
    if _newclass:mMass = _swig_property(_Myoushu.ShapeParams_mMass_get, _Myoushu.ShapeParams_mMass_set)
    __swig_setmethods__["mDensity"] = _Myoushu.ShapeParams_mDensity_set
    __swig_getmethods__["mDensity"] = _Myoushu.ShapeParams_mDensity_get
    if _newclass:mDensity = _swig_property(_Myoushu.ShapeParams_mDensity_get, _Myoushu.ShapeParams_mDensity_set)
    __swig_setmethods__["mFlags"] = _Myoushu.ShapeParams_mFlags_set
    __swig_getmethods__["mFlags"] = _Myoushu.ShapeParams_mFlags_get
    if _newclass:mFlags = _swig_property(_Myoushu.ShapeParams_mFlags_get, _Myoushu.ShapeParams_mFlags_set)
    def __init__(self, *args): 
        this = _Myoushu.new_ShapeParams(*args)
        try: self.this.append(this)
        except: self.this = this
    def setToDefault(self): return _Myoushu.ShapeParams_setToDefault(self)
    def parse(self, *args): return _Myoushu.ShapeParams_parse(self, *args)
    __swig_destroy__ = _Myoushu.delete_ShapeParams
    __del__ = lambda self : None;
ShapeParams_swigregister = _Myoushu.ShapeParams_swigregister
ShapeParams_swigregister(ShapeParams)

class Shape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Shape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Shape, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_Shape(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Shape
    __del__ = lambda self : None;
    def simulate(self, *args): return _Myoushu.Shape_simulate(self, *args)
    def render(self, *args): return _Myoushu.Shape_render(self, *args)
    def getBlueprint(self): return _Myoushu.Shape_getBlueprint(self)
    def copyTo(self, *args): return _Myoushu.Shape_copyTo(self, *args)
    def moveTo(self, *args): return _Myoushu.Shape_moveTo(self, *args)
    def getNxShape(self): return _Myoushu.Shape_getNxShape(self)
    def releaseShape(self): return _Myoushu.Shape_releaseShape(self)
    def getSkeleton(self): return _Myoushu.Shape_getSkeleton(self)
    def getIndex(self): return _Myoushu.Shape_getIndex(self)
    def setIndex(self, *args): return _Myoushu.Shape_setIndex(self, *args)
Shape_swigregister = _Myoushu.Shape_swigregister
Shape_swigregister(Shape)

class Convex(Shape):
    __swig_setmethods__ = {}
    for _s in [Shape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Convex, name, value)
    __swig_getmethods__ = {}
    for _s in [Shape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Convex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_Convex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Convex
    __del__ = lambda self : None;
Convex_swigregister = _Myoushu.Convex_swigregister
Convex_swigregister(Convex)

class Prism(Shape):
    __swig_setmethods__ = {}
    for _s in [Shape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Prism, name, value)
    __swig_getmethods__ = {}
    for _s in [Shape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Prism, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_Prism(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Prism
    __del__ = lambda self : None;
Prism_swigregister = _Myoushu.Prism_swigregister
Prism_swigregister(Prism)

class TriangleMesh(Shape):
    __swig_setmethods__ = {}
    for _s in [Shape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriangleMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [Shape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriangleMesh, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_TriangleMesh(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_TriangleMesh
    __del__ = lambda self : None;
TriangleMesh_swigregister = _Myoushu.TriangleMesh_swigregister
TriangleMesh_swigregister(TriangleMesh)

class Ground(Shape):
    __swig_setmethods__ = {}
    for _s in [Shape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ground, name, value)
    __swig_getmethods__ = {}
    for _s in [Shape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ground, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_Ground(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Ground
    __del__ = lambda self : None;
    def copyTo(self, *args): return _Myoushu.Ground_copyTo(self, *args)
    def moveTo(self, *args): return _Myoushu.Ground_moveTo(self, *args)
    def getNxShape(self): return _Myoushu.Ground_getNxShape(self)
    def releaseShape(self): return _Myoushu.Ground_releaseShape(self)
Ground_swigregister = _Myoushu.Ground_swigregister
Ground_swigregister(Ground)

class Cube(Shape):
    __swig_setmethods__ = {}
    for _s in [Shape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cube, name, value)
    __swig_getmethods__ = {}
    for _s in [Shape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cube, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_Cube(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Cube
    __del__ = lambda self : None;
    def copyTo(self, *args): return _Myoushu.Cube_copyTo(self, *args)
    def moveTo(self, *args): return _Myoushu.Cube_moveTo(self, *args)
    def getNxShape(self): return _Myoushu.Cube_getNxShape(self)
    def releaseShape(self): return _Myoushu.Cube_releaseShape(self)
Cube_swigregister = _Myoushu.Cube_swigregister
Cube_swigregister(Cube)

class Sphere(Shape):
    __swig_setmethods__ = {}
    for _s in [Shape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sphere, name, value)
    __swig_getmethods__ = {}
    for _s in [Shape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sphere, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_Sphere(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Sphere
    __del__ = lambda self : None;
Sphere_swigregister = _Myoushu.Sphere_swigregister
Sphere_swigregister(Sphere)

class Capsule(Shape):
    __swig_setmethods__ = {}
    for _s in [Shape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Capsule, name, value)
    __swig_getmethods__ = {}
    for _s in [Shape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Capsule, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_Capsule(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Capsule
    __del__ = lambda self : None;
Capsule_swigregister = _Myoushu.Capsule_swigregister
Capsule_swigregister(Capsule)

class Terrain(Shape):
    __swig_setmethods__ = {}
    for _s in [Shape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Terrain, name, value)
    __swig_getmethods__ = {}
    for _s in [Shape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Terrain, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_Terrain(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Terrain
    __del__ = lambda self : None;
Terrain_swigregister = _Myoushu.Terrain_swigregister
Terrain_swigregister(Terrain)

class WheelParams(Params):
    __swig_setmethods__ = {}
    for _s in [Params]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WheelParams, name, value)
    __swig_getmethods__ = {}
    for _s in [Params]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WheelParams, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_WheelParams(*args)
        try: self.this.append(this)
        except: self.this = this
    def setToDefault(self): return _Myoushu.WheelParams_setToDefault(self)
    def setToNormal(self): return _Myoushu.WheelParams_setToNormal(self)
    def parse(self, *args): return _Myoushu.WheelParams_parse(self, *args)
    __swig_setmethods__["power_factor"] = _Myoushu.WheelParams_power_factor_set
    __swig_getmethods__["power_factor"] = _Myoushu.WheelParams_power_factor_get
    if _newclass:power_factor = _swig_property(_Myoushu.WheelParams_power_factor_get, _Myoushu.WheelParams_power_factor_set)
    __swig_setmethods__["steer_factor"] = _Myoushu.WheelParams_steer_factor_set
    __swig_getmethods__["steer_factor"] = _Myoushu.WheelParams_steer_factor_get
    if _newclass:steer_factor = _swig_property(_Myoushu.WheelParams_steer_factor_get, _Myoushu.WheelParams_steer_factor_set)
    __swig_setmethods__["steer_limit"] = _Myoushu.WheelParams_steer_limit_set
    __swig_getmethods__["steer_limit"] = _Myoushu.WheelParams_steer_limit_get
    if _newclass:steer_limit = _swig_property(_Myoushu.WheelParams_steer_limit_get, _Myoushu.WheelParams_steer_limit_set)
    __swig_setmethods__["break_factor"] = _Myoushu.WheelParams_break_factor_set
    __swig_getmethods__["break_factor"] = _Myoushu.WheelParams_break_factor_get
    if _newclass:break_factor = _swig_property(_Myoushu.WheelParams_break_factor_get, _Myoushu.WheelParams_break_factor_set)
    __swig_setmethods__["motor_torque"] = _Myoushu.WheelParams_motor_torque_set
    __swig_getmethods__["motor_torque"] = _Myoushu.WheelParams_motor_torque_get
    if _newclass:motor_torque = _swig_property(_Myoushu.WheelParams_motor_torque_get, _Myoushu.WheelParams_motor_torque_set)
    __swig_setmethods__["brake_torque"] = _Myoushu.WheelParams_brake_torque_set
    __swig_getmethods__["brake_torque"] = _Myoushu.WheelParams_brake_torque_get
    if _newclass:brake_torque = _swig_property(_Myoushu.WheelParams_brake_torque_get, _Myoushu.WheelParams_brake_torque_set)
    __swig_setmethods__["density"] = _Myoushu.WheelParams_density_set
    __swig_getmethods__["density"] = _Myoushu.WheelParams_density_get
    if _newclass:density = _swig_property(_Myoushu.WheelParams_density_get, _Myoushu.WheelParams_density_set)
    __swig_setmethods__["mass"] = _Myoushu.WheelParams_mass_set
    __swig_getmethods__["mass"] = _Myoushu.WheelParams_mass_get
    if _newclass:mass = _swig_property(_Myoushu.WheelParams_mass_get, _Myoushu.WheelParams_mass_set)
    __swig_setmethods__["radius"] = _Myoushu.WheelParams_radius_set
    __swig_getmethods__["radius"] = _Myoushu.WheelParams_radius_get
    if _newclass:radius = _swig_property(_Myoushu.WheelParams_radius_get, _Myoushu.WheelParams_radius_set)
    __swig_setmethods__["inverseWheelMass"] = _Myoushu.WheelParams_inverseWheelMass_set
    __swig_getmethods__["inverseWheelMass"] = _Myoushu.WheelParams_inverseWheelMass_get
    if _newclass:inverseWheelMass = _swig_property(_Myoushu.WheelParams_inverseWheelMass_get, _Myoushu.WheelParams_inverseWheelMass_set)
    __swig_setmethods__["lateral_tire_extremumSlip"] = _Myoushu.WheelParams_lateral_tire_extremumSlip_set
    __swig_getmethods__["lateral_tire_extremumSlip"] = _Myoushu.WheelParams_lateral_tire_extremumSlip_get
    if _newclass:lateral_tire_extremumSlip = _swig_property(_Myoushu.WheelParams_lateral_tire_extremumSlip_get, _Myoushu.WheelParams_lateral_tire_extremumSlip_set)
    __swig_setmethods__["lateral_tire_extremumValue"] = _Myoushu.WheelParams_lateral_tire_extremumValue_set
    __swig_getmethods__["lateral_tire_extremumValue"] = _Myoushu.WheelParams_lateral_tire_extremumValue_get
    if _newclass:lateral_tire_extremumValue = _swig_property(_Myoushu.WheelParams_lateral_tire_extremumValue_get, _Myoushu.WheelParams_lateral_tire_extremumValue_set)
    __swig_setmethods__["lateral_tire_asymptoteSlip"] = _Myoushu.WheelParams_lateral_tire_asymptoteSlip_set
    __swig_getmethods__["lateral_tire_asymptoteSlip"] = _Myoushu.WheelParams_lateral_tire_asymptoteSlip_get
    if _newclass:lateral_tire_asymptoteSlip = _swig_property(_Myoushu.WheelParams_lateral_tire_asymptoteSlip_get, _Myoushu.WheelParams_lateral_tire_asymptoteSlip_set)
    __swig_setmethods__["lateral_tire_asymptoteValue"] = _Myoushu.WheelParams_lateral_tire_asymptoteValue_set
    __swig_getmethods__["lateral_tire_asymptoteValue"] = _Myoushu.WheelParams_lateral_tire_asymptoteValue_get
    if _newclass:lateral_tire_asymptoteValue = _swig_property(_Myoushu.WheelParams_lateral_tire_asymptoteValue_get, _Myoushu.WheelParams_lateral_tire_asymptoteValue_set)
    __swig_setmethods__["lateral_tire_stiffnessFactor"] = _Myoushu.WheelParams_lateral_tire_stiffnessFactor_set
    __swig_getmethods__["lateral_tire_stiffnessFactor"] = _Myoushu.WheelParams_lateral_tire_stiffnessFactor_get
    if _newclass:lateral_tire_stiffnessFactor = _swig_property(_Myoushu.WheelParams_lateral_tire_stiffnessFactor_get, _Myoushu.WheelParams_lateral_tire_stiffnessFactor_set)
    __swig_setmethods__["longitudal_tire_extremumSlip"] = _Myoushu.WheelParams_longitudal_tire_extremumSlip_set
    __swig_getmethods__["longitudal_tire_extremumSlip"] = _Myoushu.WheelParams_longitudal_tire_extremumSlip_get
    if _newclass:longitudal_tire_extremumSlip = _swig_property(_Myoushu.WheelParams_longitudal_tire_extremumSlip_get, _Myoushu.WheelParams_longitudal_tire_extremumSlip_set)
    __swig_setmethods__["longitudal_tire_extremumValue"] = _Myoushu.WheelParams_longitudal_tire_extremumValue_set
    __swig_getmethods__["longitudal_tire_extremumValue"] = _Myoushu.WheelParams_longitudal_tire_extremumValue_get
    if _newclass:longitudal_tire_extremumValue = _swig_property(_Myoushu.WheelParams_longitudal_tire_extremumValue_get, _Myoushu.WheelParams_longitudal_tire_extremumValue_set)
    __swig_setmethods__["longitudal_tire_asymptoteSlip"] = _Myoushu.WheelParams_longitudal_tire_asymptoteSlip_set
    __swig_getmethods__["longitudal_tire_asymptoteSlip"] = _Myoushu.WheelParams_longitudal_tire_asymptoteSlip_get
    if _newclass:longitudal_tire_asymptoteSlip = _swig_property(_Myoushu.WheelParams_longitudal_tire_asymptoteSlip_get, _Myoushu.WheelParams_longitudal_tire_asymptoteSlip_set)
    __swig_setmethods__["longitudal_tire_asymptoteValue"] = _Myoushu.WheelParams_longitudal_tire_asymptoteValue_set
    __swig_getmethods__["longitudal_tire_asymptoteValue"] = _Myoushu.WheelParams_longitudal_tire_asymptoteValue_get
    if _newclass:longitudal_tire_asymptoteValue = _swig_property(_Myoushu.WheelParams_longitudal_tire_asymptoteValue_get, _Myoushu.WheelParams_longitudal_tire_asymptoteValue_set)
    __swig_setmethods__["longitudal_tire_stiffnessFactor"] = _Myoushu.WheelParams_longitudal_tire_stiffnessFactor_set
    __swig_getmethods__["longitudal_tire_stiffnessFactor"] = _Myoushu.WheelParams_longitudal_tire_stiffnessFactor_get
    if _newclass:longitudal_tire_stiffnessFactor = _swig_property(_Myoushu.WheelParams_longitudal_tire_stiffnessFactor_get, _Myoushu.WheelParams_longitudal_tire_stiffnessFactor_set)
    __swig_setmethods__["suspension_spring"] = _Myoushu.WheelParams_suspension_spring_set
    __swig_getmethods__["suspension_spring"] = _Myoushu.WheelParams_suspension_spring_get
    if _newclass:suspension_spring = _swig_property(_Myoushu.WheelParams_suspension_spring_get, _Myoushu.WheelParams_suspension_spring_set)
    __swig_setmethods__["suspension_damper"] = _Myoushu.WheelParams_suspension_damper_set
    __swig_getmethods__["suspension_damper"] = _Myoushu.WheelParams_suspension_damper_get
    if _newclass:suspension_damper = _swig_property(_Myoushu.WheelParams_suspension_damper_get, _Myoushu.WheelParams_suspension_damper_set)
    __swig_setmethods__["suspension_target"] = _Myoushu.WheelParams_suspension_target_set
    __swig_getmethods__["suspension_target"] = _Myoushu.WheelParams_suspension_target_get
    if _newclass:suspension_target = _swig_property(_Myoushu.WheelParams_suspension_target_get, _Myoushu.WheelParams_suspension_target_set)
    __swig_setmethods__["suspension_travel"] = _Myoushu.WheelParams_suspension_travel_set
    __swig_getmethods__["suspension_travel"] = _Myoushu.WheelParams_suspension_travel_get
    if _newclass:suspension_travel = _swig_property(_Myoushu.WheelParams_suspension_travel_get, _Myoushu.WheelParams_suspension_travel_set)
    __swig_setmethods__["steer_angle"] = _Myoushu.WheelParams_steer_angle_set
    __swig_getmethods__["steer_angle"] = _Myoushu.WheelParams_steer_angle_get
    if _newclass:steer_angle = _swig_property(_Myoushu.WheelParams_steer_angle_get, _Myoushu.WheelParams_steer_angle_set)
    __swig_setmethods__["axle_speed_override"] = _Myoushu.WheelParams_axle_speed_override_set
    __swig_getmethods__["axle_speed_override"] = _Myoushu.WheelParams_axle_speed_override_get
    if _newclass:axle_speed_override = _swig_property(_Myoushu.WheelParams_axle_speed_override_get, _Myoushu.WheelParams_axle_speed_override_set)
    __swig_setmethods__["clamped_friction"] = _Myoushu.WheelParams_clamped_friction_set
    __swig_getmethods__["clamped_friction"] = _Myoushu.WheelParams_clamped_friction_get
    if _newclass:clamped_friction = _swig_property(_Myoushu.WheelParams_clamped_friction_get, _Myoushu.WheelParams_clamped_friction_set)
    __swig_setmethods__["emulate_legacy_wheel"] = _Myoushu.WheelParams_emulate_legacy_wheel_set
    __swig_getmethods__["emulate_legacy_wheel"] = _Myoushu.WheelParams_emulate_legacy_wheel_get
    if _newclass:emulate_legacy_wheel = _swig_property(_Myoushu.WheelParams_emulate_legacy_wheel_get, _Myoushu.WheelParams_emulate_legacy_wheel_set)
    __swig_setmethods__["input_lat_slipvelocity"] = _Myoushu.WheelParams_input_lat_slipvelocity_set
    __swig_getmethods__["input_lat_slipvelocity"] = _Myoushu.WheelParams_input_lat_slipvelocity_get
    if _newclass:input_lat_slipvelocity = _swig_property(_Myoushu.WheelParams_input_lat_slipvelocity_get, _Myoushu.WheelParams_input_lat_slipvelocity_set)
    __swig_setmethods__["input_long_slipvelocity"] = _Myoushu.WheelParams_input_long_slipvelocity_set
    __swig_getmethods__["input_long_slipvelocity"] = _Myoushu.WheelParams_input_long_slipvelocity_get
    if _newclass:input_long_slipvelocity = _swig_property(_Myoushu.WheelParams_input_long_slipvelocity_get, _Myoushu.WheelParams_input_long_slipvelocity_set)
    __swig_setmethods__["unscaled_spring_behavior"] = _Myoushu.WheelParams_unscaled_spring_behavior_set
    __swig_getmethods__["unscaled_spring_behavior"] = _Myoushu.WheelParams_unscaled_spring_behavior_get
    if _newclass:unscaled_spring_behavior = _swig_property(_Myoushu.WheelParams_unscaled_spring_behavior_get, _Myoushu.WheelParams_unscaled_spring_behavior_set)
    __swig_setmethods__["axis_contact_normal"] = _Myoushu.WheelParams_axis_contact_normal_set
    __swig_getmethods__["axis_contact_normal"] = _Myoushu.WheelParams_axis_contact_normal_get
    if _newclass:axis_contact_normal = _swig_property(_Myoushu.WheelParams_axis_contact_normal_get, _Myoushu.WheelParams_axis_contact_normal_set)
    __swig_destroy__ = _Myoushu.delete_WheelParams
    __del__ = lambda self : None;
WheelParams_swigregister = _Myoushu.WheelParams_swigregister
WheelParams_swigregister(WheelParams)

class Wheel(Shape):
    __swig_setmethods__ = {}
    for _s in [Shape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Wheel, name, value)
    __swig_getmethods__ = {}
    for _s in [Shape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Wheel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_Wheel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Wheel
    __del__ = lambda self : None;
    def simulate(self, *args): return _Myoushu.Wheel_simulate(self, *args)
    def render(self, *args): return _Myoushu.Wheel_render(self, *args)
    def turn(self, *args): return _Myoushu.Wheel_turn(self, *args)
    def setEntity(self, *args): return _Myoushu.Wheel_setEntity(self, *args)
    def setRadius(self, *args): return _Myoushu.Wheel_setRadius(self, *args)
    def setSuspensionTravel(self, *args): return _Myoushu.Wheel_setSuspensionTravel(self, *args)
    def setMotorTorque(self, *args): return _Myoushu.Wheel_setMotorTorque(self, *args)
    def setBrakeTorque(self, *args): return _Myoushu.Wheel_setBrakeTorque(self, *args)
    def setSteeringAngle(self, *args): return _Myoushu.Wheel_setSteeringAngle(self, *args)
    def addMesh(self, *args): return _Myoushu.Wheel_addMesh(self, *args)
    def getNode(self): return _Myoushu.Wheel_getNode(self)
    def getNxWheelShape(self): return _Myoushu.Wheel_getNxWheelShape(self)
Wheel_swigregister = _Myoushu.Wheel_swigregister
Wheel_swigregister(Wheel)

class WheelSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WheelSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WheelSet, name)
    __repr__ = _swig_repr
    __swig_getmethods__["createFourWheelSet"] = lambda x: _Myoushu.WheelSet_createFourWheelSet
    if _newclass:createFourWheelSet = staticmethod(_Myoushu.WheelSet_createFourWheelSet)
    def __init__(self): 
        this = _Myoushu.new_WheelSet()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_WheelSet
    __del__ = lambda self : None;
    def turn(self, *args): return _Myoushu.WheelSet_turn(self, *args)
    def setMotorTorque(self, *args): return _Myoushu.WheelSet_setMotorTorque(self, *args)
    def setBrakeTorque(self, *args): return _Myoushu.WheelSet_setBrakeTorque(self, *args)
    def addMeshes(self, *args): return _Myoushu.WheelSet_addMeshes(self, *args)
    def attachDriveShaft(self, *args): return _Myoushu.WheelSet_attachDriveShaft(self, *args)
    __swig_setmethods__["frontLeft"] = _Myoushu.WheelSet_frontLeft_set
    __swig_getmethods__["frontLeft"] = _Myoushu.WheelSet_frontLeft_get
    if _newclass:frontLeft = _swig_property(_Myoushu.WheelSet_frontLeft_get, _Myoushu.WheelSet_frontLeft_set)
    __swig_setmethods__["frontRight"] = _Myoushu.WheelSet_frontRight_set
    __swig_getmethods__["frontRight"] = _Myoushu.WheelSet_frontRight_get
    if _newclass:frontRight = _swig_property(_Myoushu.WheelSet_frontRight_get, _Myoushu.WheelSet_frontRight_set)
    __swig_setmethods__["backLeft"] = _Myoushu.WheelSet_backLeft_set
    __swig_getmethods__["backLeft"] = _Myoushu.WheelSet_backLeft_get
    if _newclass:backLeft = _swig_property(_Myoushu.WheelSet_backLeft_get, _Myoushu.WheelSet_backLeft_set)
    __swig_setmethods__["backRight"] = _Myoushu.WheelSet_backRight_set
    __swig_getmethods__["backRight"] = _Myoushu.WheelSet_backRight_get
    if _newclass:backRight = _swig_property(_Myoushu.WheelSet_backRight_get, _Myoushu.WheelSet_backRight_set)
    __swig_setmethods__["middleLeft"] = _Myoushu.WheelSet_middleLeft_set
    __swig_getmethods__["middleLeft"] = _Myoushu.WheelSet_middleLeft_get
    if _newclass:middleLeft = _swig_property(_Myoushu.WheelSet_middleLeft_get, _Myoushu.WheelSet_middleLeft_set)
    __swig_setmethods__["middleRight"] = _Myoushu.WheelSet_middleRight_set
    __swig_getmethods__["middleRight"] = _Myoushu.WheelSet_middleRight_get
    if _newclass:middleRight = _swig_property(_Myoushu.WheelSet_middleRight_get, _Myoushu.WheelSet_middleRight_set)
    __swig_setmethods__["mDriveShaft"] = _Myoushu.WheelSet_mDriveShaft_set
    __swig_getmethods__["mDriveShaft"] = _Myoushu.WheelSet_mDriveShaft_get
    if _newclass:mDriveShaft = _swig_property(_Myoushu.WheelSet_mDriveShaft_get, _Myoushu.WheelSet_mDriveShaft_set)
    __swig_setmethods__["mWheels"] = _Myoushu.WheelSet_mWheels_set
    __swig_getmethods__["mWheels"] = _Myoushu.WheelSet_mWheels_get
    if _newclass:mWheels = _swig_property(_Myoushu.WheelSet_mWheels_get, _Myoushu.WheelSet_mWheels_set)
    __swig_setmethods__["Drive"] = _Myoushu.WheelSet_Drive_set
    __swig_getmethods__["Drive"] = _Myoushu.WheelSet_Drive_get
    if _newclass:Drive = _swig_property(_Myoushu.WheelSet_Drive_get, _Myoushu.WheelSet_Drive_set)
    __swig_setmethods__["Steering"] = _Myoushu.WheelSet_Steering_set
    __swig_getmethods__["Steering"] = _Myoushu.WheelSet_Steering_get
    if _newclass:Steering = _swig_property(_Myoushu.WheelSet_Steering_get, _Myoushu.WheelSet_Steering_set)
WheelSet_swigregister = _Myoushu.WheelSet_swigregister
WheelSet_swigregister(WheelSet)

def WheelSet_createFourWheelSet(*args):
  return _Myoushu.WheelSet_createFourWheelSet(*args)
WheelSet_createFourWheelSet = _Myoushu.WheelSet_createFourWheelSet

class ShapeBlueprint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeBlueprint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeBlueprint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_ShapeBlueprint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ShapeBlueprint
    __del__ = lambda self : None;
    __swig_getmethods__["getDefaultShape"] = lambda x: _Myoushu.ShapeBlueprint_getDefaultShape
    if _newclass:getDefaultShape = staticmethod(_Myoushu.ShapeBlueprint_getDefaultShape)
    def isShared(self): return _Myoushu.ShapeBlueprint_isShared(self)
    def setShared(self, *args): return _Myoushu.ShapeBlueprint_setShared(self, *args)
    __swig_setmethods__["mParams"] = _Myoushu.ShapeBlueprint_mParams_set
    __swig_getmethods__["mParams"] = _Myoushu.ShapeBlueprint_mParams_get
    if _newclass:mParams = _swig_property(_Myoushu.ShapeBlueprint_mParams_get, _Myoushu.ShapeBlueprint_mParams_set)
ShapeBlueprint_swigregister = _Myoushu.ShapeBlueprint_swigregister
ShapeBlueprint_swigregister(ShapeBlueprint)

def ShapeBlueprint_getDefaultShape():
  return _Myoushu.ShapeBlueprint_getDefaultShape()
ShapeBlueprint_getDefaultShape = _Myoushu.ShapeBlueprint_getDefaultShape

class ConvexShape(ShapeBlueprint):
    __swig_setmethods__ = {}
    for _s in [ShapeBlueprint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvexShape, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeBlueprint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConvexShape, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_ConvexShape(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ConvexShape
    __del__ = lambda self : None;
ConvexShape_swigregister = _Myoushu.ConvexShape_swigregister
ConvexShape_swigregister(ConvexShape)

class PrismShape(ShapeBlueprint):
    __swig_setmethods__ = {}
    for _s in [ShapeBlueprint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrismShape, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeBlueprint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PrismShape, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_PrismShape(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_PrismShape
    __del__ = lambda self : None;
PrismShape_swigregister = _Myoushu.PrismShape_swigregister
PrismShape_swigregister(PrismShape)

class TriangleMeshShape(ShapeBlueprint):
    __swig_setmethods__ = {}
    for _s in [ShapeBlueprint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriangleMeshShape, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeBlueprint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriangleMeshShape, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_TriangleMeshShape(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_TriangleMeshShape
    __del__ = lambda self : None;
TriangleMeshShape_swigregister = _Myoushu.TriangleMeshShape_swigregister
TriangleMeshShape_swigregister(TriangleMeshShape)

class GroundShape(ShapeBlueprint):
    __swig_setmethods__ = {}
    for _s in [ShapeBlueprint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroundShape, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeBlueprint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GroundShape, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_GroundShape(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_GroundShape
    __del__ = lambda self : None;
GroundShape_swigregister = _Myoushu.GroundShape_swigregister
GroundShape_swigregister(GroundShape)

class CubeShape(ShapeBlueprint):
    __swig_setmethods__ = {}
    for _s in [ShapeBlueprint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CubeShape, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeBlueprint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CubeShape, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_CubeShape(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_CubeShape
    __del__ = lambda self : None;
CubeShape_swigregister = _Myoushu.CubeShape_swigregister
CubeShape_swigregister(CubeShape)

class SphereShape(ShapeBlueprint):
    __swig_setmethods__ = {}
    for _s in [ShapeBlueprint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SphereShape, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeBlueprint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SphereShape, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_SphereShape(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_SphereShape
    __del__ = lambda self : None;
SphereShape_swigregister = _Myoushu.SphereShape_swigregister
SphereShape_swigregister(SphereShape)

class CapsuleShape(ShapeBlueprint):
    __swig_setmethods__ = {}
    for _s in [ShapeBlueprint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CapsuleShape, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeBlueprint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CapsuleShape, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_CapsuleShape(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_CapsuleShape
    __del__ = lambda self : None;
CapsuleShape_swigregister = _Myoushu.CapsuleShape_swigregister
CapsuleShape_swigregister(CapsuleShape)

class CompoundShape(ShapeBlueprint):
    __swig_setmethods__ = {}
    for _s in [ShapeBlueprint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompoundShape, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeBlueprint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompoundShape, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_CompoundShape(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_CompoundShape
    __del__ = lambda self : None;
    def add(self, *args): return _Myoushu.CompoundShape_add(self, *args)
    __swig_setmethods__["mShapeBlueprints"] = _Myoushu.CompoundShape_mShapeBlueprints_set
    __swig_getmethods__["mShapeBlueprints"] = _Myoushu.CompoundShape_mShapeBlueprints_get
    if _newclass:mShapeBlueprints = _swig_property(_Myoushu.CompoundShape_mShapeBlueprints_get, _Myoushu.CompoundShape_mShapeBlueprints_set)
CompoundShape_swigregister = _Myoushu.CompoundShape_swigregister
CompoundShape_swigregister(CompoundShape)

class TerrainShape(ShapeBlueprint):
    __swig_setmethods__ = {}
    for _s in [ShapeBlueprint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TerrainShape, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeBlueprint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TerrainShape, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_TerrainShape(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_TerrainShape
    __del__ = lambda self : None;
TerrainShape_swigregister = _Myoushu.TerrainShape_swigregister
TerrainShape_swigregister(TerrainShape)

class WheelShape(ShapeBlueprint):
    __swig_setmethods__ = {}
    for _s in [ShapeBlueprint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WheelShape, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeBlueprint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WheelShape, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_WheelShape(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_WheelShape
    __del__ = lambda self : None;
WheelShape_swigregister = _Myoushu.WheelShape_swigregister
WheelShape_swigregister(WheelShape)

class CharacterParams(Params):
    __swig_setmethods__ = {}
    for _s in [Params]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CharacterParams, name, value)
    __swig_getmethods__ = {}
    for _s in [Params]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CharacterParams, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_CharacterParams(*args)
        try: self.this.append(this)
        except: self.this = this
    def setToDefault(self): return _Myoushu.CharacterParams_setToDefault(self)
    def parse(self, *args): return _Myoushu.CharacterParams_parse(self, *args)
    CT_Box = _Myoushu.CharacterParams_CT_Box
    CT_Capsule = _Myoushu.CharacterParams_CT_Capsule
    __swig_setmethods__["mType"] = _Myoushu.CharacterParams_mType_set
    __swig_getmethods__["mType"] = _Myoushu.CharacterParams_mType_get
    if _newclass:mType = _swig_property(_Myoushu.CharacterParams_mType_get, _Myoushu.CharacterParams_mType_set)
    __swig_setmethods__["mDimensions"] = _Myoushu.CharacterParams_mDimensions_set
    __swig_getmethods__["mDimensions"] = _Myoushu.CharacterParams_mDimensions_get
    if _newclass:mDimensions = _swig_property(_Myoushu.CharacterParams_mDimensions_get, _Myoushu.CharacterParams_mDimensions_set)
    __swig_setmethods__["mUpAxis"] = _Myoushu.CharacterParams_mUpAxis_set
    __swig_getmethods__["mUpAxis"] = _Myoushu.CharacterParams_mUpAxis_get
    if _newclass:mUpAxis = _swig_property(_Myoushu.CharacterParams_mUpAxis_get, _Myoushu.CharacterParams_mUpAxis_set)
    __swig_setmethods__["mSlopeLimit"] = _Myoushu.CharacterParams_mSlopeLimit_set
    __swig_getmethods__["mSlopeLimit"] = _Myoushu.CharacterParams_mSlopeLimit_get
    if _newclass:mSlopeLimit = _swig_property(_Myoushu.CharacterParams_mSlopeLimit_get, _Myoushu.CharacterParams_mSlopeLimit_set)
    __swig_setmethods__["mStepOffset"] = _Myoushu.CharacterParams_mStepOffset_set
    __swig_getmethods__["mStepOffset"] = _Myoushu.CharacterParams_mStepOffset_get
    if _newclass:mStepOffset = _swig_property(_Myoushu.CharacterParams_mStepOffset_get, _Myoushu.CharacterParams_mStepOffset_set)
    __swig_setmethods__["mSkinWidth"] = _Myoushu.CharacterParams_mSkinWidth_set
    __swig_getmethods__["mSkinWidth"] = _Myoushu.CharacterParams_mSkinWidth_get
    if _newclass:mSkinWidth = _swig_property(_Myoushu.CharacterParams_mSkinWidth_get, _Myoushu.CharacterParams_mSkinWidth_set)
    __swig_setmethods__["mActiveGroupsMask"] = _Myoushu.CharacterParams_mActiveGroupsMask_set
    __swig_getmethods__["mActiveGroupsMask"] = _Myoushu.CharacterParams_mActiveGroupsMask_get
    if _newclass:mActiveGroupsMask = _swig_property(_Myoushu.CharacterParams_mActiveGroupsMask_get, _Myoushu.CharacterParams_mActiveGroupsMask_set)
    __swig_setmethods__["mSharpness"] = _Myoushu.CharacterParams_mSharpness_set
    __swig_getmethods__["mSharpness"] = _Myoushu.CharacterParams_mSharpness_get
    if _newclass:mSharpness = _swig_property(_Myoushu.CharacterParams_mSharpness_get, _Myoushu.CharacterParams_mSharpness_set)
    __swig_setmethods__["mGroupMask"] = _Myoushu.CharacterParams_mGroupMask_set
    __swig_getmethods__["mGroupMask"] = _Myoushu.CharacterParams_mGroupMask_get
    if _newclass:mGroupMask = _swig_property(_Myoushu.CharacterParams_mGroupMask_get, _Myoushu.CharacterParams_mGroupMask_set)
    __swig_destroy__ = _Myoushu.delete_CharacterParams
    __del__ = lambda self : None;
CharacterParams_swigregister = _Myoushu.CharacterParams_swigregister
CharacterParams_swigregister(CharacterParams)

class CharacterMovementVectorController(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CharacterMovementVectorController, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CharacterMovementVectorController, name)
    __repr__ = _swig_repr
    def move(self, *args): return _Myoushu.CharacterMovementVectorController_move(self, *args)
    def __init__(self): 
        this = _Myoushu.new_CharacterMovementVectorController()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_CharacterMovementVectorController
    __del__ = lambda self : None;
CharacterMovementVectorController_swigregister = _Myoushu.CharacterMovementVectorController_swigregister
CharacterMovementVectorController_swigregister(CharacterMovementVectorController)

class CharacterController(CharacterMovementVectorController):
    __swig_setmethods__ = {}
    for _s in [CharacterMovementVectorController]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CharacterController, name, value)
    __swig_getmethods__ = {}
    for _s in [CharacterMovementVectorController]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CharacterController, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def create(self, *args): return _Myoushu.CharacterController_create(self, *args)
    def destroy(self, *args): return _Myoushu.CharacterController_destroy(self, *args)
    def get(self, *args): return _Myoushu.CharacterController_get(self, *args)
    def onShapeHit(self, *args): return _Myoushu.CharacterController_onShapeHit(self, *args)
    def onControllerHit(self, *args): return _Myoushu.CharacterController_onControllerHit(self, *args)
    def getNxControllerManager(self): return _Myoushu.CharacterController_getNxControllerManager(self)
    def move(self, *args): return _Myoushu.CharacterController_move(self, *args)
    def addHitReport(self, *args): return _Myoushu.CharacterController_addHitReport(self, *args)
CharacterController_swigregister = _Myoushu.CharacterController_swigregister
CharacterController_swigregister(CharacterController)

class ActorParams(Params):
    __swig_setmethods__ = {}
    for _s in [Params]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActorParams, name, value)
    __swig_getmethods__ = {}
    for _s in [Params]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ActorParams, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_ActorParams(*args)
        try: self.this.append(this)
        except: self.this = this
    def setToDefault(self): return _Myoushu.ActorParams_setToDefault(self)
    def parse(self, *args): return _Myoushu.ActorParams_parse(self, *args)
    def fromNxActorDesc(self, *args): return _Myoushu.ActorParams_fromNxActorDesc(self, *args)
    def fromNxBodyDesc(self, *args): return _Myoushu.ActorParams_fromNxBodyDesc(self, *args)
    __swig_setmethods__["mDensity"] = _Myoushu.ActorParams_mDensity_set
    __swig_getmethods__["mDensity"] = _Myoushu.ActorParams_mDensity_get
    if _newclass:mDensity = _swig_property(_Myoushu.ActorParams_mDensity_get, _Myoushu.ActorParams_mDensity_set)
    __swig_setmethods__["mActorFlags"] = _Myoushu.ActorParams_mActorFlags_set
    __swig_getmethods__["mActorFlags"] = _Myoushu.ActorParams_mActorFlags_get
    if _newclass:mActorFlags = _swig_property(_Myoushu.ActorParams_mActorFlags_get, _Myoushu.ActorParams_mActorFlags_set)
    __swig_setmethods__["mGroupAsIndex"] = _Myoushu.ActorParams_mGroupAsIndex_set
    __swig_getmethods__["mGroupAsIndex"] = _Myoushu.ActorParams_mGroupAsIndex_get
    if _newclass:mGroupAsIndex = _swig_property(_Myoushu.ActorParams_mGroupAsIndex_get, _Myoushu.ActorParams_mGroupAsIndex_set)
    __swig_setmethods__["mGroupAsName"] = _Myoushu.ActorParams_mGroupAsName_set
    __swig_getmethods__["mGroupAsName"] = _Myoushu.ActorParams_mGroupAsName_get
    if _newclass:mGroupAsName = _swig_property(_Myoushu.ActorParams_mGroupAsName_get, _Myoushu.ActorParams_mGroupAsName_set)
    __swig_setmethods__["mAngularDamping"] = _Myoushu.ActorParams_mAngularDamping_set
    __swig_getmethods__["mAngularDamping"] = _Myoushu.ActorParams_mAngularDamping_get
    if _newclass:mAngularDamping = _swig_property(_Myoushu.ActorParams_mAngularDamping_get, _Myoushu.ActorParams_mAngularDamping_set)
    __swig_setmethods__["mAngularVelocity"] = _Myoushu.ActorParams_mAngularVelocity_set
    __swig_getmethods__["mAngularVelocity"] = _Myoushu.ActorParams_mAngularVelocity_get
    if _newclass:mAngularVelocity = _swig_property(_Myoushu.ActorParams_mAngularVelocity_get, _Myoushu.ActorParams_mAngularVelocity_set)
    __swig_setmethods__["mCCDMotionThreshold"] = _Myoushu.ActorParams_mCCDMotionThreshold_set
    __swig_getmethods__["mCCDMotionThreshold"] = _Myoushu.ActorParams_mCCDMotionThreshold_get
    if _newclass:mCCDMotionThreshold = _swig_property(_Myoushu.ActorParams_mCCDMotionThreshold_get, _Myoushu.ActorParams_mCCDMotionThreshold_set)
    __swig_setmethods__["mBodyFlags"] = _Myoushu.ActorParams_mBodyFlags_set
    __swig_getmethods__["mBodyFlags"] = _Myoushu.ActorParams_mBodyFlags_get
    if _newclass:mBodyFlags = _swig_property(_Myoushu.ActorParams_mBodyFlags_get, _Myoushu.ActorParams_mBodyFlags_set)
    __swig_setmethods__["mLinearDamping"] = _Myoushu.ActorParams_mLinearDamping_set
    __swig_getmethods__["mLinearDamping"] = _Myoushu.ActorParams_mLinearDamping_get
    if _newclass:mLinearDamping = _swig_property(_Myoushu.ActorParams_mLinearDamping_get, _Myoushu.ActorParams_mLinearDamping_set)
    __swig_setmethods__["mLinearVelocity"] = _Myoushu.ActorParams_mLinearVelocity_set
    __swig_getmethods__["mLinearVelocity"] = _Myoushu.ActorParams_mLinearVelocity_get
    if _newclass:mLinearVelocity = _swig_property(_Myoushu.ActorParams_mLinearVelocity_get, _Myoushu.ActorParams_mLinearVelocity_set)
    __swig_setmethods__["mMass"] = _Myoushu.ActorParams_mMass_set
    __swig_getmethods__["mMass"] = _Myoushu.ActorParams_mMass_get
    if _newclass:mMass = _swig_property(_Myoushu.ActorParams_mMass_get, _Myoushu.ActorParams_mMass_set)
    __swig_setmethods__["mMassLocalPose"] = _Myoushu.ActorParams_mMassLocalPose_set
    __swig_getmethods__["mMassLocalPose"] = _Myoushu.ActorParams_mMassLocalPose_get
    if _newclass:mMassLocalPose = _swig_property(_Myoushu.ActorParams_mMassLocalPose_get, _Myoushu.ActorParams_mMassLocalPose_set)
    __swig_setmethods__["mMassSpaceInertia"] = _Myoushu.ActorParams_mMassSpaceInertia_set
    __swig_getmethods__["mMassSpaceInertia"] = _Myoushu.ActorParams_mMassSpaceInertia_get
    if _newclass:mMassSpaceInertia = _swig_property(_Myoushu.ActorParams_mMassSpaceInertia_get, _Myoushu.ActorParams_mMassSpaceInertia_set)
    __swig_setmethods__["mMaxAngularVelocity"] = _Myoushu.ActorParams_mMaxAngularVelocity_set
    __swig_getmethods__["mMaxAngularVelocity"] = _Myoushu.ActorParams_mMaxAngularVelocity_get
    if _newclass:mMaxAngularVelocity = _swig_property(_Myoushu.ActorParams_mMaxAngularVelocity_get, _Myoushu.ActorParams_mMaxAngularVelocity_set)
    __swig_setmethods__["mSleepAngularVelocity"] = _Myoushu.ActorParams_mSleepAngularVelocity_set
    __swig_getmethods__["mSleepAngularVelocity"] = _Myoushu.ActorParams_mSleepAngularVelocity_get
    if _newclass:mSleepAngularVelocity = _swig_property(_Myoushu.ActorParams_mSleepAngularVelocity_get, _Myoushu.ActorParams_mSleepAngularVelocity_set)
    __swig_setmethods__["mSleepDamping"] = _Myoushu.ActorParams_mSleepDamping_set
    __swig_getmethods__["mSleepDamping"] = _Myoushu.ActorParams_mSleepDamping_get
    if _newclass:mSleepDamping = _swig_property(_Myoushu.ActorParams_mSleepDamping_get, _Myoushu.ActorParams_mSleepDamping_set)
    __swig_setmethods__["mSleepEnergyThreshold"] = _Myoushu.ActorParams_mSleepEnergyThreshold_set
    __swig_getmethods__["mSleepEnergyThreshold"] = _Myoushu.ActorParams_mSleepEnergyThreshold_get
    if _newclass:mSleepEnergyThreshold = _swig_property(_Myoushu.ActorParams_mSleepEnergyThreshold_get, _Myoushu.ActorParams_mSleepEnergyThreshold_set)
    __swig_setmethods__["mSleepLinearVelocity"] = _Myoushu.ActorParams_mSleepLinearVelocity_set
    __swig_getmethods__["mSleepLinearVelocity"] = _Myoushu.ActorParams_mSleepLinearVelocity_get
    if _newclass:mSleepLinearVelocity = _swig_property(_Myoushu.ActorParams_mSleepLinearVelocity_get, _Myoushu.ActorParams_mSleepLinearVelocity_set)
    __swig_setmethods__["mSolverIterationCount"] = _Myoushu.ActorParams_mSolverIterationCount_set
    __swig_getmethods__["mSolverIterationCount"] = _Myoushu.ActorParams_mSolverIterationCount_get
    if _newclass:mSolverIterationCount = _swig_property(_Myoushu.ActorParams_mSolverIterationCount_get, _Myoushu.ActorParams_mSolverIterationCount_set)
    __swig_setmethods__["mWakeUpCounter"] = _Myoushu.ActorParams_mWakeUpCounter_set
    __swig_getmethods__["mWakeUpCounter"] = _Myoushu.ActorParams_mWakeUpCounter_get
    if _newclass:mWakeUpCounter = _swig_property(_Myoushu.ActorParams_mWakeUpCounter_get, _Myoushu.ActorParams_mWakeUpCounter_set)
    __swig_setmethods__["mNodeName"] = _Myoushu.ActorParams_mNodeName_set
    __swig_getmethods__["mNodeName"] = _Myoushu.ActorParams_mNodeName_get
    if _newclass:mNodeName = _swig_property(_Myoushu.ActorParams_mNodeName_get, _Myoushu.ActorParams_mNodeName_set)
    __swig_setmethods__["mNodeScale"] = _Myoushu.ActorParams_mNodeScale_set
    __swig_getmethods__["mNodeScale"] = _Myoushu.ActorParams_mNodeScale_get
    if _newclass:mNodeScale = _swig_property(_Myoushu.ActorParams_mNodeScale_get, _Myoushu.ActorParams_mNodeScale_set)
    __swig_setmethods__["mNodeShadows"] = _Myoushu.ActorParams_mNodeShadows_set
    __swig_getmethods__["mNodeShadows"] = _Myoushu.ActorParams_mNodeShadows_get
    if _newclass:mNodeShadows = _swig_property(_Myoushu.ActorParams_mNodeShadows_get, _Myoushu.ActorParams_mNodeShadows_set)
    __swig_destroy__ = _Myoushu.delete_ActorParams
    __del__ = lambda self : None;
ActorParams_swigregister = _Myoushu.ActorParams_swigregister
ActorParams_swigregister(ActorParams)

class NxOgre_Actor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NxOgre_Actor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NxOgre_Actor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_NxOgre_Actor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_NxOgre_Actor
    __del__ = lambda self : None;
    def getNxScene(self): return _Myoushu.NxOgre_Actor_getNxScene(self)
    def hasVisualisation(self): return _Myoushu.NxOgre_Actor_hasVisualisation(self)
    def simulate(self, *args): return _Myoushu.NxOgre_Actor_simulate(self, *args)
    def render(self, *args): return _Myoushu.NxOgre_Actor_render(self, *args)
    def shapeSimulate(self, *args): return _Myoushu.NxOgre_Actor_shapeSimulate(self, *args)
    def shapeRender(self, *args): return _Myoushu.NxOgre_Actor_shapeRender(self, *args)
    def isDead(self): return _Myoushu.NxOgre_Actor_isDead(self)
    def duplicate(self, *args): return _Myoushu.NxOgre_Actor_duplicate(self, *args)
    def _createActor(self, *args): return _Myoushu.NxOgre_Actor__createActor(self, *args)
    def _destroyActor(self): return _Myoushu.NxOgre_Actor__destroyActor(self)
    def getNxActor(self): return _Myoushu.NxOgre_Actor_getNxActor(self)
    def setName(self, *args): return _Myoushu.NxOgre_Actor_setName(self, *args)
    def getName(self): return _Myoushu.NxOgre_Actor_getName(self)
    def setGlobalPose(self, *args): return _Myoushu.NxOgre_Actor_setGlobalPose(self, *args)
    def getGlobalPose(self): return _Myoushu.NxOgre_Actor_getGlobalPose(self)
    def getGlobalOrientation(self): return _Myoushu.NxOgre_Actor_getGlobalOrientation(self)
    def setGlobalOrientation(self, *args): return _Myoushu.NxOgre_Actor_setGlobalOrientation(self, *args)
    def getGlobalPosition(self): return _Myoushu.NxOgre_Actor_getGlobalPosition(self)
    def setGlobalPosition(self, *args): return _Myoushu.NxOgre_Actor_setGlobalPosition(self, *args)
    def moveGlobalPose(self, *args): return _Myoushu.NxOgre_Actor_moveGlobalPose(self, *args)
    def moveGlobalPosition(self, *args): return _Myoushu.NxOgre_Actor_moveGlobalPosition(self, *args)
    def moveGlobalOrientation(self, *args): return _Myoushu.NxOgre_Actor_moveGlobalOrientation(self, *args)
    def moveTowards(self, *args): return _Myoushu.NxOgre_Actor_moveTowards(self, *args)
    def addShape(self, *args): return _Myoushu.NxOgre_Actor_addShape(self, *args)
    def removeShape(self, *args): return _Myoushu.NxOgre_Actor_removeShape(self, *args)
    def getNbShapes(self): return _Myoushu.NxOgre_Actor_getNbShapes(self)
    def getCollisionModel(self): return _Myoushu.NxOgre_Actor_getCollisionModel(self)
    def getDynamicCollisionModel(self): return _Myoushu.NxOgre_Actor_getDynamicCollisionModel(self)
    def setGroup(self, *args): return _Myoushu.NxOgre_Actor_setGroup(self, *args)
    def getGroup(self): return _Myoushu.NxOgre_Actor_getGroup(self)
    def raiseActorFlag(self, *args): return _Myoushu.NxOgre_Actor_raiseActorFlag(self, *args)
    def clearActorFlag(self, *args): return _Myoushu.NxOgre_Actor_clearActorFlag(self, *args)
    def hasActorFlag(self, *args): return _Myoushu.NxOgre_Actor_hasActorFlag(self, *args)
    def isDynamic(self): return _Myoushu.NxOgre_Actor_isDynamic(self)
    def setCMassOffsetLocalPose(self, *args): return _Myoushu.NxOgre_Actor_setCMassOffsetLocalPose(self, *args)
    def setCMassOffsetLocalPosition(self, *args): return _Myoushu.NxOgre_Actor_setCMassOffsetLocalPosition(self, *args)
    def setCMassOffsetLocalOrientation(self, *args): return _Myoushu.NxOgre_Actor_setCMassOffsetLocalOrientation(self, *args)
    def setCMassOffsetGlobalPose(self, *args): return _Myoushu.NxOgre_Actor_setCMassOffsetGlobalPose(self, *args)
    def setCMassOffsetGlobalPosition(self, *args): return _Myoushu.NxOgre_Actor_setCMassOffsetGlobalPosition(self, *args)
    def setCMassOffsetGlobalOrientation(self, *args): return _Myoushu.NxOgre_Actor_setCMassOffsetGlobalOrientation(self, *args)
    def setCMassGlobalPose(self, *args): return _Myoushu.NxOgre_Actor_setCMassGlobalPose(self, *args)
    def setCMassGlobalPosition(self, *args): return _Myoushu.NxOgre_Actor_setCMassGlobalPosition(self, *args)
    def setCMassGlobalOrientation(self, *args): return _Myoushu.NxOgre_Actor_setCMassGlobalOrientation(self, *args)
    def getCMassLocalPose(self): return _Myoushu.NxOgre_Actor_getCMassLocalPose(self)
    def getCMassLocalPosition(self): return _Myoushu.NxOgre_Actor_getCMassLocalPosition(self)
    def getCMassLocalOrientation(self): return _Myoushu.NxOgre_Actor_getCMassLocalOrientation(self)
    def getCMassGlobalPose(self): return _Myoushu.NxOgre_Actor_getCMassGlobalPose(self)
    def getCMassGlobalPosition(self): return _Myoushu.NxOgre_Actor_getCMassGlobalPosition(self)
    def getCMassGlobalOrientation(self): return _Myoushu.NxOgre_Actor_getCMassGlobalOrientation(self)
    def setMass(self, *args): return _Myoushu.NxOgre_Actor_setMass(self, *args)
    def getMass(self): return _Myoushu.NxOgre_Actor_getMass(self)
    def setMassSpaceInertiaTensor(self, *args): return _Myoushu.NxOgre_Actor_setMassSpaceInertiaTensor(self, *args)
    def getMassSpaceInertiaTensor(self): return _Myoushu.NxOgre_Actor_getMassSpaceInertiaTensor(self)
    def getGlobalInertiaTensor(self): return _Myoushu.NxOgre_Actor_getGlobalInertiaTensor(self)
    def getGlobalInertiaTensorInverse(self): return _Myoushu.NxOgre_Actor_getGlobalInertiaTensorInverse(self)
    def updateMassFromShapeFromDensity(self, *args): return _Myoushu.NxOgre_Actor_updateMassFromShapeFromDensity(self, *args)
    def updateMassFromShapeAsMass(self, *args): return _Myoushu.NxOgre_Actor_updateMassFromShapeAsMass(self, *args)
    def setLinearDamping(self, *args): return _Myoushu.NxOgre_Actor_setLinearDamping(self, *args)
    def getLinearDamping(self): return _Myoushu.NxOgre_Actor_getLinearDamping(self)
    def setAngularDamping(self, *args): return _Myoushu.NxOgre_Actor_setAngularDamping(self, *args)
    def getAngularDamping(self): return _Myoushu.NxOgre_Actor_getAngularDamping(self)
    def setLinearVelocity(self, *args): return _Myoushu.NxOgre_Actor_setLinearVelocity(self, *args)
    def setAngularVelocity(self, *args): return _Myoushu.NxOgre_Actor_setAngularVelocity(self, *args)
    def getLinearVelocity(self): return _Myoushu.NxOgre_Actor_getLinearVelocity(self)
    def getAngularVelocity(self): return _Myoushu.NxOgre_Actor_getAngularVelocity(self)
    def setMaxAngularVelocity(self, *args): return _Myoushu.NxOgre_Actor_setMaxAngularVelocity(self, *args)
    def getMaxAngularVelocity(self): return _Myoushu.NxOgre_Actor_getMaxAngularVelocity(self)
    def setCCDMotionThreshold(self, *args): return _Myoushu.NxOgre_Actor_setCCDMotionThreshold(self, *args)
    def getCCDMotionThreshold(self): return _Myoushu.NxOgre_Actor_getCCDMotionThreshold(self)
    def setLinearMomentum(self, *args): return _Myoushu.NxOgre_Actor_setLinearMomentum(self, *args)
    def setAngularMomentum(self, *args): return _Myoushu.NxOgre_Actor_setAngularMomentum(self, *args)
    def getLinearMomentum(self): return _Myoushu.NxOgre_Actor_getLinearMomentum(self)
    def getAngularMomentum(self): return _Myoushu.NxOgre_Actor_getAngularMomentum(self)
    def addForceAtPos(self, *args): return _Myoushu.NxOgre_Actor_addForceAtPos(self, *args)
    def addForceAtLocalPos(self, *args): return _Myoushu.NxOgre_Actor_addForceAtLocalPos(self, *args)
    def addLocalForceAtPos(self, *args): return _Myoushu.NxOgre_Actor_addLocalForceAtPos(self, *args)
    def addLocalForceAtLocalPos(self, *args): return _Myoushu.NxOgre_Actor_addLocalForceAtLocalPos(self, *args)
    def addForce(self, *args): return _Myoushu.NxOgre_Actor_addForce(self, *args)
    def addLocalForce(self, *args): return _Myoushu.NxOgre_Actor_addLocalForce(self, *args)
    def addTorque(self, *args): return _Myoushu.NxOgre_Actor_addTorque(self, *args)
    def addLocalTorque(self, *args): return _Myoushu.NxOgre_Actor_addLocalTorque(self, *args)
    def computeKineticEnergy(self): return _Myoushu.NxOgre_Actor_computeKineticEnergy(self)
    def getPointVelocity(self, *args): return _Myoushu.NxOgre_Actor_getPointVelocity(self, *args)
    def getLocalPointVelocity(self, *args): return _Myoushu.NxOgre_Actor_getLocalPointVelocity(self, *args)
    def isGroupSleeping(self): return _Myoushu.NxOgre_Actor_isGroupSleeping(self)
    def isSleeping(self): return _Myoushu.NxOgre_Actor_isSleeping(self)
    def getSleepLinearVelocity(self): return _Myoushu.NxOgre_Actor_getSleepLinearVelocity(self)
    def setSleepLinearVelocity(self, *args): return _Myoushu.NxOgre_Actor_setSleepLinearVelocity(self, *args)
    def getSleepAngularVelocity(self): return _Myoushu.NxOgre_Actor_getSleepAngularVelocity(self)
    def setSleepAngularVelocity(self, *args): return _Myoushu.NxOgre_Actor_setSleepAngularVelocity(self, *args)
    def getSleepEnergyThreshold(self): return _Myoushu.NxOgre_Actor_getSleepEnergyThreshold(self)
    def setSleepEnergyThreshold(self, *args): return _Myoushu.NxOgre_Actor_setSleepEnergyThreshold(self, *args)
    def wakeUp(self, *args): return _Myoushu.NxOgre_Actor_wakeUp(self, *args)
    def putToSleep(self): return _Myoushu.NxOgre_Actor_putToSleep(self)
    def raiseBodyFlag(self, *args): return _Myoushu.NxOgre_Actor_raiseBodyFlag(self, *args)
    def clearBodyFlag(self, *args): return _Myoushu.NxOgre_Actor_clearBodyFlag(self, *args)
    def hasBodyFlag(self, *args): return _Myoushu.NxOgre_Actor_hasBodyFlag(self, *args)
    def setSolverIterationCount(self, *args): return _Myoushu.NxOgre_Actor_setSolverIterationCount(self, *args)
    def getSolverIterationCount(self): return _Myoushu.NxOgre_Actor_getSolverIterationCount(self)
    __swig_setmethods__["mCollisionModel"] = _Myoushu.NxOgre_Actor_mCollisionModel_set
    __swig_getmethods__["mCollisionModel"] = _Myoushu.NxOgre_Actor_mCollisionModel_get
    if _newclass:mCollisionModel = _swig_property(_Myoushu.NxOgre_Actor_mCollisionModel_get, _Myoushu.NxOgre_Actor_mCollisionModel_set)
    __swig_setmethods__["mDynamicCollisionModel"] = _Myoushu.NxOgre_Actor_mDynamicCollisionModel_set
    __swig_getmethods__["mDynamicCollisionModel"] = _Myoushu.NxOgre_Actor_mDynamicCollisionModel_get
    if _newclass:mDynamicCollisionModel = _swig_property(_Myoushu.NxOgre_Actor_mDynamicCollisionModel_get, _Myoushu.NxOgre_Actor_mDynamicCollisionModel_set)
    def getNxActorUserData(self): return _Myoushu.NxOgre_Actor_getNxActorUserData(self)
    def joinWith(self, *args): return _Myoushu.NxOgre_Actor_joinWith(self, *args)
    def disable(self): return _Myoushu.NxOgre_Actor_disable(self)
    def disableVisualisation(self): return _Myoushu.NxOgre_Actor_disableVisualisation(self)
    def getBirthFrame(self): return _Myoushu.NxOgre_Actor_getBirthFrame(self)
    def saveCustom(self): return _Myoushu.NxOgre_Actor_saveCustom(self)
    def restoreCustom(self, *args): return _Myoushu.NxOgre_Actor_restoreCustom(self, *args)
NxOgre_Actor_swigregister = _Myoushu.NxOgre_Actor_swigregister
NxOgre_Actor_swigregister(NxOgre_Actor)

class NxOgre_Body(NxOgre_Actor):
    __swig_setmethods__ = {}
    for _s in [NxOgre_Actor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NxOgre_Body, name, value)
    __swig_getmethods__ = {}
    for _s in [NxOgre_Actor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NxOgre_Body, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_NxOgre_Body(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_NxOgre_Body
    __del__ = lambda self : None;
    def hasVisualisation(self): return _Myoushu.NxOgre_Body_hasVisualisation(self)
    def getNode(self): return _Myoushu.NxOgre_Body_getNode(self)
    def getEntity(self): return _Myoushu.NxOgre_Body_getEntity(self)
    def setNode(self, *args): return _Myoushu.NxOgre_Body_setNode(self, *args)
    def setEntity(self, *args): return _Myoushu.NxOgre_Body_setEntity(self, *args)
    def simulate(self, *args): return _Myoushu.NxOgre_Body_simulate(self, *args)
    def render(self, *args): return _Myoushu.NxOgre_Body_render(self, *args)
    def saveCustom(self): return _Myoushu.NxOgre_Body_saveCustom(self)
    def restoreCustom(self, *args): return _Myoushu.NxOgre_Body_restoreCustom(self, *args)
    def disableVisualisation(self): return _Myoushu.NxOgre_Body_disableVisualisation(self)
NxOgre_Body_swigregister = _Myoushu.NxOgre_Body_swigregister
NxOgre_Body_swigregister(NxOgre_Body)

class NxOgre_Character(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NxOgre_Character, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NxOgre_Character, name)
    __repr__ = _swig_repr
    MV_Idle = _Myoushu.NxOgre_Character_MV_Idle
    MV_Walk = _Myoushu.NxOgre_Character_MV_Walk
    MV_Run = _Myoushu.NxOgre_Character_MV_Run
    MV_Fall = _Myoushu.NxOgre_Character_MV_Fall
    MV_Jump_Up = _Myoushu.NxOgre_Character_MV_Jump_Up
    MV_Jump_Directional = _Myoushu.NxOgre_Character_MV_Jump_Directional
    MV_Crouch = _Myoushu.NxOgre_Character_MV_Crouch
    MV_Crouch_Walk = _Myoushu.NxOgre_Character_MV_Crouch_Walk
    MV_SideStep = _Myoushu.NxOgre_Character_MV_SideStep
    MV_Ladder = _Myoushu.NxOgre_Character_MV_Ladder
    MV_Vehicle = _Myoushu.NxOgre_Character_MV_Vehicle
    MV_None = _Myoushu.NxOgre_Character_MV_None
    DR_Forward = _Myoushu.NxOgre_Character_DR_Forward
    DR_Backward = _Myoushu.NxOgre_Character_DR_Backward
    DR_StepLeft = _Myoushu.NxOgre_Character_DR_StepLeft
    DR_StepRight = _Myoushu.NxOgre_Character_DR_StepRight
    DR_Jump_Up = _Myoushu.NxOgre_Character_DR_Jump_Up
    DR_Jump_Directional = _Myoushu.NxOgre_Character_DR_Jump_Directional
    DR_Ladder_Up = _Myoushu.NxOgre_Character_DR_Ladder_Up
    DR_Ladder_Down = _Myoushu.NxOgre_Character_DR_Ladder_Down
    DR_None = _Myoushu.NxOgre_Character_DR_None
    def __init__(self, *args): 
        this = _Myoushu.new_NxOgre_Character(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_NxOgre_Character
    __del__ = lambda self : None;
    def createNode(self): return _Myoushu.NxOgre_Character_createNode(self)
    def attachMesh(self, *args): return _Myoushu.NxOgre_Character_attachMesh(self, *args)
    def attachSkeletonMesh(self, *args): return _Myoushu.NxOgre_Character_attachSkeletonMesh(self, *args)
    def bindToAnimation(self, *args): return _Myoushu.NxOgre_Character_bindToAnimation(self, *args)
    def bindFeet(self, *args): return _Myoushu.NxOgre_Character_bindFeet(self, *args)
    def unBindFeet(self): return _Myoushu.NxOgre_Character_unBindFeet(self)
    def getGlobalPosition(self): return _Myoushu.NxOgre_Character_getGlobalPosition(self)
    def getGlobalOrientation(self): return _Myoushu.NxOgre_Character_getGlobalOrientation(self)
    def simulate(self, *args): return _Myoushu.NxOgre_Character_simulate(self, *args)
    def render(self, *args): return _Myoushu.NxOgre_Character_render(self, *args)
    def addMovement(self, *args): return _Myoushu.NxOgre_Character_addMovement(self, *args)
    def setDirection(self, *args): return _Myoushu.NxOgre_Character_setDirection(self, *args)
    def setRawNextMovementDirection(self, *args): return _Myoushu.NxOgre_Character_setRawNextMovementDirection(self, *args)
    def setMovementVectorController(self, *args): return _Myoushu.NxOgre_Character_setMovementVectorController(self, *args)
    def setPosition(self, *args): return _Myoushu.NxOgre_Character_setPosition(self, *args)
    def getName(self): return _Myoushu.NxOgre_Character_getName(self)
    def getNode(self): return _Myoushu.NxOgre_Character_getNode(self)
    def getEntity(self): return _Myoushu.NxOgre_Character_getEntity(self)
    def getScene(self): return _Myoushu.NxOgre_Character_getScene(self)
    def getNxController(self): return _Myoushu.NxOgre_Character_getNxController(self)
    def getMass(self): return _Myoushu.NxOgre_Character_getMass(self)
NxOgre_Character_swigregister = _Myoushu.NxOgre_Character_swigregister
NxOgre_Character_swigregister(NxOgre_Character)

MYGUI_PLATFORM_WIN32 = _Myoushu.MYGUI_PLATFORM_WIN32
MYGUI_PLATFORM_LINUX = _Myoushu.MYGUI_PLATFORM_LINUX
MYGUI_PLATFORM_APPLE = _Myoushu.MYGUI_PLATFORM_APPLE
MYGUI_COMPILER_MSVC = _Myoushu.MYGUI_COMPILER_MSVC
MYGUI_COMPILER_GNUC = _Myoushu.MYGUI_COMPILER_GNUC
MYGUI_PLATFORM = _Myoushu.MYGUI_PLATFORM
MYGUI_DEBUG_MODE = _Myoushu.MYGUI_DEBUG_MODE
MYGUI_PLATFORM_LIB = _Myoushu.MYGUI_PLATFORM_LIB
nullptr = _Myoushu.nullptr
MYGUI_VERSION_MAJOR = _Myoushu.MYGUI_VERSION_MAJOR
MYGUI_VERSION_MINOR = _Myoushu.MYGUI_VERSION_MINOR
MYGUI_VERSION_PATCH = _Myoushu.MYGUI_VERSION_PATCH
MYGUI_VERSION = _Myoushu.MYGUI_VERSION
MB_Left = _Myoushu.MB_Left
MB_Right = _Myoushu.MB_Right
MB_Middle = _Myoushu.MB_Middle
MB_Button0 = _Myoushu.MB_Button0
MB_Button1 = _Myoushu.MB_Button1
MB_Button2 = _Myoushu.MB_Button2
MB_Button3 = _Myoushu.MB_Button3
MB_Button4 = _Myoushu.MB_Button4
MB_Button5 = _Myoushu.MB_Button5
MB_Button6 = _Myoushu.MB_Button6
MB_Button7 = _Myoushu.MB_Button7
MB_None = _Myoushu.MB_None
class MouseButton(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MouseButton, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MouseButton, name)
    __repr__ = _swig_repr
    Left = _Myoushu.MouseButton_Left
    Right = _Myoushu.MouseButton_Right
    Middle = _Myoushu.MouseButton_Middle
    Button0 = _Myoushu.MouseButton_Button0
    Button1 = _Myoushu.MouseButton_Button1
    Button2 = _Myoushu.MouseButton_Button2
    Button3 = _Myoushu.MouseButton_Button3
    Button4 = _Myoushu.MouseButton_Button4
    Button5 = _Myoushu.MouseButton_Button5
    Button6 = _Myoushu.MouseButton_Button6
    Button7 = _Myoushu.MouseButton_Button7
    None = _Myoushu.MouseButton_None
    def __init__(self, *args): 
        this = _Myoushu.new_MouseButton(*args)
        try: self.this.append(this)
        except: self.this = this
    def toValue(self): return _Myoushu.MouseButton_toValue(self)
    __swig_destroy__ = _Myoushu.delete_MouseButton
    __del__ = lambda self : None;
MouseButton_swigregister = _Myoushu.MouseButton_swigregister
MouseButton_swigregister(MouseButton)

KC_UNASSIGNED = _Myoushu.KC_UNASSIGNED
KC_ESCAPE = _Myoushu.KC_ESCAPE
KC_1 = _Myoushu.KC_1
KC_2 = _Myoushu.KC_2
KC_3 = _Myoushu.KC_3
KC_4 = _Myoushu.KC_4
KC_5 = _Myoushu.KC_5
KC_6 = _Myoushu.KC_6
KC_7 = _Myoushu.KC_7
KC_8 = _Myoushu.KC_8
KC_9 = _Myoushu.KC_9
KC_0 = _Myoushu.KC_0
KC_MINUS = _Myoushu.KC_MINUS
KC_EQUALS = _Myoushu.KC_EQUALS
KC_BACK = _Myoushu.KC_BACK
KC_TAB = _Myoushu.KC_TAB
KC_Q = _Myoushu.KC_Q
KC_W = _Myoushu.KC_W
KC_E = _Myoushu.KC_E
KC_R = _Myoushu.KC_R
KC_T = _Myoushu.KC_T
KC_Y = _Myoushu.KC_Y
KC_U = _Myoushu.KC_U
KC_I = _Myoushu.KC_I
KC_O = _Myoushu.KC_O
KC_P = _Myoushu.KC_P
KC_LBRACKET = _Myoushu.KC_LBRACKET
KC_RBRACKET = _Myoushu.KC_RBRACKET
KC_RETURN = _Myoushu.KC_RETURN
KC_LCONTROL = _Myoushu.KC_LCONTROL
KC_A = _Myoushu.KC_A
KC_S = _Myoushu.KC_S
KC_D = _Myoushu.KC_D
KC_F = _Myoushu.KC_F
KC_G = _Myoushu.KC_G
KC_H = _Myoushu.KC_H
KC_J = _Myoushu.KC_J
KC_K = _Myoushu.KC_K
KC_L = _Myoushu.KC_L
KC_SEMICOLON = _Myoushu.KC_SEMICOLON
KC_APOSTROPHE = _Myoushu.KC_APOSTROPHE
KC_GRAVE = _Myoushu.KC_GRAVE
KC_LSHIFT = _Myoushu.KC_LSHIFT
KC_BACKSLASH = _Myoushu.KC_BACKSLASH
KC_Z = _Myoushu.KC_Z
KC_X = _Myoushu.KC_X
KC_C = _Myoushu.KC_C
KC_V = _Myoushu.KC_V
KC_B = _Myoushu.KC_B
KC_N = _Myoushu.KC_N
KC_M = _Myoushu.KC_M
KC_COMMA = _Myoushu.KC_COMMA
KC_PERIOD = _Myoushu.KC_PERIOD
KC_SLASH = _Myoushu.KC_SLASH
KC_RSHIFT = _Myoushu.KC_RSHIFT
KC_MULTIPLY = _Myoushu.KC_MULTIPLY
KC_LMENU = _Myoushu.KC_LMENU
KC_SPACE = _Myoushu.KC_SPACE
KC_CAPITAL = _Myoushu.KC_CAPITAL
KC_F1 = _Myoushu.KC_F1
KC_F2 = _Myoushu.KC_F2
KC_F3 = _Myoushu.KC_F3
KC_F4 = _Myoushu.KC_F4
KC_F5 = _Myoushu.KC_F5
KC_F6 = _Myoushu.KC_F6
KC_F7 = _Myoushu.KC_F7
KC_F8 = _Myoushu.KC_F8
KC_F9 = _Myoushu.KC_F9
KC_F10 = _Myoushu.KC_F10
KC_NUMLOCK = _Myoushu.KC_NUMLOCK
KC_SCROLL = _Myoushu.KC_SCROLL
KC_NUMPAD7 = _Myoushu.KC_NUMPAD7
KC_NUMPAD8 = _Myoushu.KC_NUMPAD8
KC_NUMPAD9 = _Myoushu.KC_NUMPAD9
KC_SUBTRACT = _Myoushu.KC_SUBTRACT
KC_NUMPAD4 = _Myoushu.KC_NUMPAD4
KC_NUMPAD5 = _Myoushu.KC_NUMPAD5
KC_NUMPAD6 = _Myoushu.KC_NUMPAD6
KC_ADD = _Myoushu.KC_ADD
KC_NUMPAD1 = _Myoushu.KC_NUMPAD1
KC_NUMPAD2 = _Myoushu.KC_NUMPAD2
KC_NUMPAD3 = _Myoushu.KC_NUMPAD3
KC_NUMPAD0 = _Myoushu.KC_NUMPAD0
KC_DECIMAL = _Myoushu.KC_DECIMAL
KC_OEM_102 = _Myoushu.KC_OEM_102
KC_F11 = _Myoushu.KC_F11
KC_F12 = _Myoushu.KC_F12
KC_F13 = _Myoushu.KC_F13
KC_F14 = _Myoushu.KC_F14
KC_F15 = _Myoushu.KC_F15
KC_KANA = _Myoushu.KC_KANA
KC_ABNT_C1 = _Myoushu.KC_ABNT_C1
KC_CONVERT = _Myoushu.KC_CONVERT
KC_NOCONVERT = _Myoushu.KC_NOCONVERT
KC_YEN = _Myoushu.KC_YEN
KC_ABNT_C2 = _Myoushu.KC_ABNT_C2
KC_NUMPADEQUALS = _Myoushu.KC_NUMPADEQUALS
KC_PREVTRACK = _Myoushu.KC_PREVTRACK
KC_AT = _Myoushu.KC_AT
KC_COLON = _Myoushu.KC_COLON
KC_UNDERLINE = _Myoushu.KC_UNDERLINE
KC_KANJI = _Myoushu.KC_KANJI
KC_STOP = _Myoushu.KC_STOP
KC_AX = _Myoushu.KC_AX
KC_UNLABELED = _Myoushu.KC_UNLABELED
KC_NEXTTRACK = _Myoushu.KC_NEXTTRACK
KC_NUMPADENTER = _Myoushu.KC_NUMPADENTER
KC_RCONTROL = _Myoushu.KC_RCONTROL
KC_MUTE = _Myoushu.KC_MUTE
KC_CALCULATOR = _Myoushu.KC_CALCULATOR
KC_PLAYPAUSE = _Myoushu.KC_PLAYPAUSE
KC_MEDIASTOP = _Myoushu.KC_MEDIASTOP
KC_VOLUMEDOWN = _Myoushu.KC_VOLUMEDOWN
KC_VOLUMEUP = _Myoushu.KC_VOLUMEUP
KC_WEBHOME = _Myoushu.KC_WEBHOME
KC_NUMPADCOMMA = _Myoushu.KC_NUMPADCOMMA
KC_DIVIDE = _Myoushu.KC_DIVIDE
KC_SYSRQ = _Myoushu.KC_SYSRQ
KC_RMENU = _Myoushu.KC_RMENU
KC_PAUSE = _Myoushu.KC_PAUSE
KC_HOME = _Myoushu.KC_HOME
KC_UP = _Myoushu.KC_UP
KC_PGUP = _Myoushu.KC_PGUP
KC_LEFT = _Myoushu.KC_LEFT
KC_RIGHT = _Myoushu.KC_RIGHT
KC_END = _Myoushu.KC_END
KC_DOWN = _Myoushu.KC_DOWN
KC_PGDOWN = _Myoushu.KC_PGDOWN
KC_INSERT = _Myoushu.KC_INSERT
KC_DELETE = _Myoushu.KC_DELETE
KC_LWIN = _Myoushu.KC_LWIN
KC_RWIN = _Myoushu.KC_RWIN
KC_APPS = _Myoushu.KC_APPS
KC_POWER = _Myoushu.KC_POWER
KC_SLEEP = _Myoushu.KC_SLEEP
KC_WAKE = _Myoushu.KC_WAKE
KC_WEBSEARCH = _Myoushu.KC_WEBSEARCH
KC_WEBFAVORITES = _Myoushu.KC_WEBFAVORITES
KC_WEBREFRESH = _Myoushu.KC_WEBREFRESH
KC_WEBSTOP = _Myoushu.KC_WEBSTOP
KC_WEBFORWARD = _Myoushu.KC_WEBFORWARD
KC_WEBBACK = _Myoushu.KC_WEBBACK
KC_MYCOMPUTER = _Myoushu.KC_MYCOMPUTER
KC_MAIL = _Myoushu.KC_MAIL
KC_MEDIASELECT = _Myoushu.KC_MEDIASELECT
class KeyCode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyCode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KeyCode, name)
    __repr__ = _swig_repr
    None = _Myoushu.KeyCode_None
    Escape = _Myoushu.KeyCode_Escape
    One = _Myoushu.KeyCode_One
    Two = _Myoushu.KeyCode_Two
    Three = _Myoushu.KeyCode_Three
    Four = _Myoushu.KeyCode_Four
    Five = _Myoushu.KeyCode_Five
    Six = _Myoushu.KeyCode_Six
    Seven = _Myoushu.KeyCode_Seven
    Eight = _Myoushu.KeyCode_Eight
    Nine = _Myoushu.KeyCode_Nine
    Zero = _Myoushu.KeyCode_Zero
    Minus = _Myoushu.KeyCode_Minus
    Equals = _Myoushu.KeyCode_Equals
    Backspace = _Myoushu.KeyCode_Backspace
    Tab = _Myoushu.KeyCode_Tab
    Q = _Myoushu.KeyCode_Q
    W = _Myoushu.KeyCode_W
    E = _Myoushu.KeyCode_E
    R = _Myoushu.KeyCode_R
    T = _Myoushu.KeyCode_T
    Y = _Myoushu.KeyCode_Y
    U = _Myoushu.KeyCode_U
    I = _Myoushu.KeyCode_I
    O = _Myoushu.KeyCode_O
    P = _Myoushu.KeyCode_P
    LeftBracket = _Myoushu.KeyCode_LeftBracket
    RightBracket = _Myoushu.KeyCode_RightBracket
    Return = _Myoushu.KeyCode_Return
    LeftControl = _Myoushu.KeyCode_LeftControl
    A = _Myoushu.KeyCode_A
    S = _Myoushu.KeyCode_S
    D = _Myoushu.KeyCode_D
    F = _Myoushu.KeyCode_F
    G = _Myoushu.KeyCode_G
    H = _Myoushu.KeyCode_H
    J = _Myoushu.KeyCode_J
    K = _Myoushu.KeyCode_K
    L = _Myoushu.KeyCode_L
    Semicolon = _Myoushu.KeyCode_Semicolon
    Apostrophe = _Myoushu.KeyCode_Apostrophe
    Grave = _Myoushu.KeyCode_Grave
    LeftShift = _Myoushu.KeyCode_LeftShift
    Backslash = _Myoushu.KeyCode_Backslash
    Z = _Myoushu.KeyCode_Z
    X = _Myoushu.KeyCode_X
    C = _Myoushu.KeyCode_C
    V = _Myoushu.KeyCode_V
    B = _Myoushu.KeyCode_B
    N = _Myoushu.KeyCode_N
    M = _Myoushu.KeyCode_M
    Comma = _Myoushu.KeyCode_Comma
    Period = _Myoushu.KeyCode_Period
    Slash = _Myoushu.KeyCode_Slash
    RightShift = _Myoushu.KeyCode_RightShift
    Multiply = _Myoushu.KeyCode_Multiply
    LeftAlt = _Myoushu.KeyCode_LeftAlt
    Space = _Myoushu.KeyCode_Space
    Capital = _Myoushu.KeyCode_Capital
    F1 = _Myoushu.KeyCode_F1
    F2 = _Myoushu.KeyCode_F2
    F3 = _Myoushu.KeyCode_F3
    F4 = _Myoushu.KeyCode_F4
    F5 = _Myoushu.KeyCode_F5
    F6 = _Myoushu.KeyCode_F6
    F7 = _Myoushu.KeyCode_F7
    F8 = _Myoushu.KeyCode_F8
    F9 = _Myoushu.KeyCode_F9
    F10 = _Myoushu.KeyCode_F10
    NumLock = _Myoushu.KeyCode_NumLock
    ScrollLock = _Myoushu.KeyCode_ScrollLock
    Numpad7 = _Myoushu.KeyCode_Numpad7
    Numpad8 = _Myoushu.KeyCode_Numpad8
    Numpad9 = _Myoushu.KeyCode_Numpad9
    Subtract = _Myoushu.KeyCode_Subtract
    Numpad4 = _Myoushu.KeyCode_Numpad4
    Numpad5 = _Myoushu.KeyCode_Numpad5
    Numpad6 = _Myoushu.KeyCode_Numpad6
    Add = _Myoushu.KeyCode_Add
    Numpad1 = _Myoushu.KeyCode_Numpad1
    Numpad2 = _Myoushu.KeyCode_Numpad2
    Numpad3 = _Myoushu.KeyCode_Numpad3
    Numpad0 = _Myoushu.KeyCode_Numpad0
    Decimal = _Myoushu.KeyCode_Decimal
    OEM_102 = _Myoushu.KeyCode_OEM_102
    F11 = _Myoushu.KeyCode_F11
    F12 = _Myoushu.KeyCode_F12
    F13 = _Myoushu.KeyCode_F13
    F14 = _Myoushu.KeyCode_F14
    F15 = _Myoushu.KeyCode_F15
    Kana = _Myoushu.KeyCode_Kana
    ABNT_C1 = _Myoushu.KeyCode_ABNT_C1
    Convert = _Myoushu.KeyCode_Convert
    NoConvert = _Myoushu.KeyCode_NoConvert
    Yen = _Myoushu.KeyCode_Yen
    ABNT_C2 = _Myoushu.KeyCode_ABNT_C2
    NumpadEquals = _Myoushu.KeyCode_NumpadEquals
    PrevTrack = _Myoushu.KeyCode_PrevTrack
    At = _Myoushu.KeyCode_At
    Colon = _Myoushu.KeyCode_Colon
    Underline = _Myoushu.KeyCode_Underline
    Kanji = _Myoushu.KeyCode_Kanji
    Stop = _Myoushu.KeyCode_Stop
    AX = _Myoushu.KeyCode_AX
    Unlabeled = _Myoushu.KeyCode_Unlabeled
    NextTrack = _Myoushu.KeyCode_NextTrack
    NumpadEnter = _Myoushu.KeyCode_NumpadEnter
    RightControl = _Myoushu.KeyCode_RightControl
    Mute = _Myoushu.KeyCode_Mute
    Calculator = _Myoushu.KeyCode_Calculator
    PlayPause = _Myoushu.KeyCode_PlayPause
    MediaStop = _Myoushu.KeyCode_MediaStop
    VolumeDown = _Myoushu.KeyCode_VolumeDown
    VolumeUp = _Myoushu.KeyCode_VolumeUp
    WebHome = _Myoushu.KeyCode_WebHome
    NumpadComma = _Myoushu.KeyCode_NumpadComma
    Divide = _Myoushu.KeyCode_Divide
    SysRq = _Myoushu.KeyCode_SysRq
    RightAlt = _Myoushu.KeyCode_RightAlt
    Pause = _Myoushu.KeyCode_Pause
    Home = _Myoushu.KeyCode_Home
    ArrowUp = _Myoushu.KeyCode_ArrowUp
    PageUp = _Myoushu.KeyCode_PageUp
    ArrowLeft = _Myoushu.KeyCode_ArrowLeft
    ArrowRight = _Myoushu.KeyCode_ArrowRight
    End = _Myoushu.KeyCode_End
    ArrowDown = _Myoushu.KeyCode_ArrowDown
    PageDown = _Myoushu.KeyCode_PageDown
    Insert = _Myoushu.KeyCode_Insert
    Delete = _Myoushu.KeyCode_Delete
    LeftWindows = _Myoushu.KeyCode_LeftWindows
    RightWindow = _Myoushu.KeyCode_RightWindow
    RightWindows = _Myoushu.KeyCode_RightWindows
    AppMenu = _Myoushu.KeyCode_AppMenu
    Power = _Myoushu.KeyCode_Power
    Sleep = _Myoushu.KeyCode_Sleep
    Wake = _Myoushu.KeyCode_Wake
    WebSearch = _Myoushu.KeyCode_WebSearch
    WebFavorites = _Myoushu.KeyCode_WebFavorites
    WebRefresh = _Myoushu.KeyCode_WebRefresh
    WebStop = _Myoushu.KeyCode_WebStop
    WebForward = _Myoushu.KeyCode_WebForward
    WebBack = _Myoushu.KeyCode_WebBack
    MyComputer = _Myoushu.KeyCode_MyComputer
    Mail = _Myoushu.KeyCode_Mail
    MediaSelect = _Myoushu.KeyCode_MediaSelect
    def __init__(self, *args): 
        this = _Myoushu.new_KeyCode(*args)
        try: self.this.append(this)
        except: self.this = this
    def toValue(self): return _Myoushu.KeyCode_toValue(self)
    __swig_destroy__ = _Myoushu.delete_KeyCode
    __del__ = lambda self : None;
KeyCode_swigregister = _Myoushu.KeyCode_swigregister
KeyCode_swigregister(KeyCode)

class WidgetStyle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WidgetStyle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WidgetStyle, name)
    __repr__ = _swig_repr
    Child = _Myoushu.WidgetStyle_Child
    Popup = _Myoushu.WidgetStyle_Popup
    Overlapped = _Myoushu.WidgetStyle_Overlapped
    MAX = _Myoushu.WidgetStyle_MAX
    __swig_getmethods__["parse"] = lambda x: _Myoushu.WidgetStyle_parse
    if _newclass:parse = staticmethod(_Myoushu.WidgetStyle_parse)
    def __init__(self, *args): 
        this = _Myoushu.new_WidgetStyle(*args)
        try: self.this.append(this)
        except: self.this = this
    def _print(self): return _Myoushu.WidgetStyle__print(self)
    __swig_destroy__ = _Myoushu.delete_WidgetStyle
    __del__ = lambda self : None;
WidgetStyle_swigregister = _Myoushu.WidgetStyle_swigregister
WidgetStyle_swigregister(WidgetStyle)

def WidgetStyle_parse(*args):
  return _Myoushu.WidgetStyle_parse(*args)
WidgetStyle_parse = _Myoushu.WidgetStyle_parse

MYGUI_IS_NATIVE_WCHAR_T = _Myoushu.MYGUI_IS_NATIVE_WCHAR_T
class UString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UString, name)
    __repr__ = _swig_repr
    npos = _Myoushu.UString_npos
    def __init__(self, *args): 
        this = _Myoushu.new_UString(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_UString
    __del__ = lambda self : None;
    def size(self): return _Myoushu.UString_size(self)
    def length(self): return _Myoushu.UString_length(self)
    def length_Characters(self): return _Myoushu.UString_length_Characters(self)
    def max_size(self): return _Myoushu.UString_max_size(self)
    def reserve(self, *args): return _Myoushu.UString_reserve(self, *args)
    def resize(self, *args): return _Myoushu.UString_resize(self, *args)
    def swap(self, *args): return _Myoushu.UString_swap(self, *args)
    def empty(self): return _Myoushu.UString_empty(self)
    def c_str(self): return _Myoushu.UString_c_str(self)
    def data(self): return _Myoushu.UString_data(self)
    def capacity(self): return _Myoushu.UString_capacity(self)
    def clear(self): return _Myoushu.UString_clear(self)
    def substr(self, *args): return _Myoushu.UString_substr(self, *args)
    def push_back(self, *args): return _Myoushu.UString_push_back(self, *args)
    def inString(self, *args): return _Myoushu.UString_inString(self, *args)
    def asUTF8(self): return _Myoushu.UString_asUTF8(self)
    def asUTF8_c_str(self): return _Myoushu.UString_asUTF8_c_str(self)
    def asUTF32(self): return _Myoushu.UString_asUTF32(self)
    def asUTF32_c_str(self): return _Myoushu.UString_asUTF32_c_str(self)
    def asWStr(self): return _Myoushu.UString_asWStr(self)
    def asWStr_c_str(self): return _Myoushu.UString_asWStr_c_str(self)
    def at(self, *args): return _Myoushu.UString_at(self, *args)
    def getChar(self, *args): return _Myoushu.UString_getChar(self, *args)
    def setChar(self, *args): return _Myoushu.UString_setChar(self, *args)
    def begin(self, *args): return _Myoushu.UString_begin(self, *args)
    def end(self, *args): return _Myoushu.UString_end(self, *args)
    def rbegin(self, *args): return _Myoushu.UString_rbegin(self, *args)
    def rend(self, *args): return _Myoushu.UString_rend(self, *args)
    def assign(self, *args): return _Myoushu.UString_assign(self, *args)
    def append(self, *args): return _Myoushu.UString_append(self, *args)
    def insert(self, *args): return _Myoushu.UString_insert(self, *args)
    def erase(self, *args): return _Myoushu.UString_erase(self, *args)
    def replace(self, *args): return _Myoushu.UString_replace(self, *args)
    def compare(self, *args): return _Myoushu.UString_compare(self, *args)
    def find(self, *args): return _Myoushu.UString_find(self, *args)
    def rfind(self, *args): return _Myoushu.UString_rfind(self, *args)
    def find_first_of(self, *args): return _Myoushu.UString_find_first_of(self, *args)
    def find_first_not_of(self, *args): return _Myoushu.UString_find_first_not_of(self, *args)
    def find_last_of(self, *args): return _Myoushu.UString_find_last_of(self, *args)
    def find_last_not_of(self, *args): return _Myoushu.UString_find_last_not_of(self, *args)
    def __lt__(self, *args): return _Myoushu.UString___lt__(self, *args)
    def __le__(self, *args): return _Myoushu.UString___le__(self, *args)
    def __gt__(self, *args): return _Myoushu.UString___gt__(self, *args)
    def __ge__(self, *args): return _Myoushu.UString___ge__(self, *args)
    def __eq__(self, *args): return _Myoushu.UString___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.UString___ne__(self, *args)
    __swig_getmethods__["_utf16_independent_char"] = lambda x: _Myoushu.UString__utf16_independent_char
    if _newclass:_utf16_independent_char = staticmethod(_Myoushu.UString__utf16_independent_char)
    __swig_getmethods__["_utf16_surrogate_lead"] = lambda x: _Myoushu.UString__utf16_surrogate_lead
    if _newclass:_utf16_surrogate_lead = staticmethod(_Myoushu.UString__utf16_surrogate_lead)
    __swig_getmethods__["_utf16_surrogate_follow"] = lambda x: _Myoushu.UString__utf16_surrogate_follow
    if _newclass:_utf16_surrogate_follow = staticmethod(_Myoushu.UString__utf16_surrogate_follow)
    __swig_getmethods__["_utf16_char_length"] = lambda x: _Myoushu.UString__utf16_char_length
    if _newclass:_utf16_char_length = staticmethod(_Myoushu.UString__utf16_char_length)
    __swig_getmethods__["_utf16_to_utf32"] = lambda x: _Myoushu.UString__utf16_to_utf32
    if _newclass:_utf16_to_utf32 = staticmethod(_Myoushu.UString__utf16_to_utf32)
    __swig_getmethods__["_utf32_to_utf16"] = lambda x: _Myoushu.UString__utf32_to_utf16
    if _newclass:_utf32_to_utf16 = staticmethod(_Myoushu.UString__utf32_to_utf16)
    __swig_getmethods__["_utf8_start_char"] = lambda x: _Myoushu.UString__utf8_start_char
    if _newclass:_utf8_start_char = staticmethod(_Myoushu.UString__utf8_start_char)
    __swig_getmethods__["_utf8_char_length"] = lambda x: _Myoushu.UString__utf8_char_length
    if _newclass:_utf8_char_length = staticmethod(_Myoushu.UString__utf8_char_length)
    __swig_getmethods__["_utf8_to_utf32"] = lambda x: _Myoushu.UString__utf8_to_utf32
    if _newclass:_utf8_to_utf32 = staticmethod(_Myoushu.UString__utf8_to_utf32)
    __swig_getmethods__["_utf32_to_utf8"] = lambda x: _Myoushu.UString__utf32_to_utf8
    if _newclass:_utf32_to_utf8 = staticmethod(_Myoushu.UString__utf32_to_utf8)
    __swig_getmethods__["_verifyUTF8"] = lambda x: _Myoushu.UString__verifyUTF8
    if _newclass:_verifyUTF8 = staticmethod(_Myoushu.UString__verifyUTF8)
UString_swigregister = _Myoushu.UString_swigregister
UString_swigregister(UString)

def UString__utf16_independent_char(*args):
  return _Myoushu.UString__utf16_independent_char(*args)
UString__utf16_independent_char = _Myoushu.UString__utf16_independent_char

def UString__utf16_surrogate_lead(*args):
  return _Myoushu.UString__utf16_surrogate_lead(*args)
UString__utf16_surrogate_lead = _Myoushu.UString__utf16_surrogate_lead

def UString__utf16_surrogate_follow(*args):
  return _Myoushu.UString__utf16_surrogate_follow(*args)
UString__utf16_surrogate_follow = _Myoushu.UString__utf16_surrogate_follow

def UString__utf16_char_length(*args):
  return _Myoushu.UString__utf16_char_length(*args)
UString__utf16_char_length = _Myoushu.UString__utf16_char_length

def UString__utf16_to_utf32(*args):
  return _Myoushu.UString__utf16_to_utf32(*args)
UString__utf16_to_utf32 = _Myoushu.UString__utf16_to_utf32

def UString__utf32_to_utf16(*args):
  return _Myoushu.UString__utf32_to_utf16(*args)
UString__utf32_to_utf16 = _Myoushu.UString__utf32_to_utf16

def UString__utf8_start_char(*args):
  return _Myoushu.UString__utf8_start_char(*args)
UString__utf8_start_char = _Myoushu.UString__utf8_start_char

def UString__utf8_char_length(*args):
  return _Myoushu.UString__utf8_char_length(*args)
UString__utf8_char_length = _Myoushu.UString__utf8_char_length

def UString__utf8_to_utf32(*args):
  return _Myoushu.UString__utf8_to_utf32(*args)
UString__utf8_to_utf32 = _Myoushu.UString__utf8_to_utf32

def UString__utf32_to_utf8(*args):
  return _Myoushu.UString__utf32_to_utf8(*args)
UString__utf32_to_utf8 = _Myoushu.UString__utf32_to_utf8

def UString__verifyUTF8(*args):
  return _Myoushu.UString__verifyUTF8(*args)
UString__verifyUTF8 = _Myoushu.UString__verifyUTF8

ALIGN_HCENTER = _Myoushu.ALIGN_HCENTER
ALIGN_VCENTER = _Myoushu.ALIGN_VCENTER
ALIGN_CENTER = _Myoushu.ALIGN_CENTER
ALIGN_LEFT = _Myoushu.ALIGN_LEFT
ALIGN_RIGHT = _Myoushu.ALIGN_RIGHT
ALIGN_HSTRETCH = _Myoushu.ALIGN_HSTRETCH
ALIGN_TOP = _Myoushu.ALIGN_TOP
ALIGN_BOTTOM = _Myoushu.ALIGN_BOTTOM
ALIGN_VSTRETCH = _Myoushu.ALIGN_VSTRETCH
ALIGN_STRETCH = _Myoushu.ALIGN_STRETCH
ALIGN_DEFAULT = _Myoushu.ALIGN_DEFAULT
ALIGN_LEFT_TOP = _Myoushu.ALIGN_LEFT_TOP
ALIGN_RIGHT_TOP = _Myoushu.ALIGN_RIGHT_TOP
ALIGN_RIGHT_BOTTOM = _Myoushu.ALIGN_RIGHT_BOTTOM
ALIGN_LEFT_BOTTOM = _Myoushu.ALIGN_LEFT_BOTTOM

def __or__(*args):
  return _Myoushu.__or__(*args)
__or__ = _Myoushu.__or__
class Align(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Align, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Align, name)
    __repr__ = _swig_repr
    HCenter = _Myoushu.Align_HCenter
    VCenter = _Myoushu.Align_VCenter
    Center = _Myoushu.Align_Center
    Left = _Myoushu.Align_Left
    Right = _Myoushu.Align_Right
    HStretch = _Myoushu.Align_HStretch
    Top = _Myoushu.Align_Top
    Bottom = _Myoushu.Align_Bottom
    VStretch = _Myoushu.Align_VStretch
    Stretch = _Myoushu.Align_Stretch
    Default = _Myoushu.Align_Default
    HRelative = _Myoushu.Align_HRelative
    VRelative = _Myoushu.Align_VRelative
    Relative = _Myoushu.Align_Relative
    def __init__(self, *args): 
        this = _Myoushu.new_Align(*args)
        try: self.this.append(this)
        except: self.this = this
    def isHCenter(self): return _Myoushu.Align_isHCenter(self)
    def isVCenter(self): return _Myoushu.Align_isVCenter(self)
    def isCenter(self): return _Myoushu.Align_isCenter(self)
    def isLeft(self): return _Myoushu.Align_isLeft(self)
    def isRight(self): return _Myoushu.Align_isRight(self)
    def isHStretch(self): return _Myoushu.Align_isHStretch(self)
    def isTop(self): return _Myoushu.Align_isTop(self)
    def isBottom(self): return _Myoushu.Align_isBottom(self)
    def isVStretch(self): return _Myoushu.Align_isVStretch(self)
    def isStretch(self): return _Myoushu.Align_isStretch(self)
    def isDefault(self): return _Myoushu.Align_isDefault(self)
    def isHRelative(self): return _Myoushu.Align_isHRelative(self)
    def isVRelative(self): return _Myoushu.Align_isVRelative(self)
    def isRelative(self): return _Myoushu.Align_isRelative(self)
    def __ior__(self, *args): return _Myoushu.Align___ior__(self, *args)
    __swig_getmethods__["parse"] = lambda x: _Myoushu.Align_parse
    if _newclass:parse = staticmethod(_Myoushu.Align_parse)
    def _print(self): return _Myoushu.Align__print(self)
    __swig_destroy__ = _Myoushu.delete_Align
    __del__ = lambda self : None;
Align_swigregister = _Myoushu.Align_swigregister
Align_swigregister(Align)

def Align_parse(*args):
  return _Myoushu.Align_parse(*args)
Align_parse = _Myoushu.Align_parse

class Colour(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Colour, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Colour, name)
    __repr__ = _swig_repr
    __swig_setmethods__["red"] = _Myoushu.Colour_red_set
    __swig_getmethods__["red"] = _Myoushu.Colour_red_get
    if _newclass:red = _swig_property(_Myoushu.Colour_red_get, _Myoushu.Colour_red_set)
    __swig_setmethods__["green"] = _Myoushu.Colour_green_set
    __swig_getmethods__["green"] = _Myoushu.Colour_green_get
    if _newclass:green = _swig_property(_Myoushu.Colour_green_get, _Myoushu.Colour_green_set)
    __swig_setmethods__["blue"] = _Myoushu.Colour_blue_set
    __swig_getmethods__["blue"] = _Myoushu.Colour_blue_get
    if _newclass:blue = _swig_property(_Myoushu.Colour_blue_get, _Myoushu.Colour_blue_set)
    __swig_setmethods__["alpha"] = _Myoushu.Colour_alpha_set
    __swig_getmethods__["alpha"] = _Myoushu.Colour_alpha_get
    if _newclass:alpha = _swig_property(_Myoushu.Colour_alpha_get, _Myoushu.Colour_alpha_set)
    def __init__(self, *args): 
        this = _Myoushu.new_Colour(*args)
        try: self.this.append(this)
        except: self.this = this
    def toColourARGB(self): return _Myoushu.Colour_toColourARGB(self)
    def __eq__(self, *args): return _Myoushu.Colour___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.Colour___ne__(self, *args)
    def set(self, *args): return _Myoushu.Colour_set(self, *args)
    def clear(self): return _Myoushu.Colour_clear(self)
    def _print(self): return _Myoushu.Colour__print(self)
    __swig_getmethods__["parse"] = lambda x: _Myoushu.Colour_parse
    if _newclass:parse = staticmethod(_Myoushu.Colour_parse)
    __swig_destroy__ = _Myoushu.delete_Colour
    __del__ = lambda self : None;
Colour_swigregister = _Myoushu.Colour_swigregister
Colour_swigregister(Colour)
Colour.Zero = _Myoushu.cvar.Colour_Zero
Colour.Black = _Myoushu.cvar.Colour_Black
Colour.White = _Myoushu.cvar.Colour_White
Colour.Red = _Myoushu.cvar.Colour_Red
Colour.Green = _Myoushu.cvar.Colour_Green
Colour.Blue = _Myoushu.cvar.Colour_Blue

def Colour_parse(*args):
  return _Myoushu.Colour_parse(*args)
Colour_parse = _Myoushu.Colour_parse

class ICroppedRectangle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICroppedRectangle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICroppedRectangle, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_ICroppedRectangle()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ICroppedRectangle
    __del__ = lambda self : None;
    def getCroppedParent(self): return _Myoushu.ICroppedRectangle_getCroppedParent(self)
    def setCoord(self, *args): return _Myoushu.ICroppedRectangle_setCoord(self, *args)
    def getCoord(self): return _Myoushu.ICroppedRectangle_getCoord(self)
    def setPosition(self, *args): return _Myoushu.ICroppedRectangle_setPosition(self, *args)
    def getPosition(self): return _Myoushu.ICroppedRectangle_getPosition(self)
    def setSize(self, *args): return _Myoushu.ICroppedRectangle_setSize(self, *args)
    def getSize(self): return _Myoushu.ICroppedRectangle_getSize(self)
    def setVisible(self, *args): return _Myoushu.ICroppedRectangle_setVisible(self, *args)
    def isVisible(self): return _Myoushu.ICroppedRectangle_isVisible(self)
    def getAbsolutePosition(self): return _Myoushu.ICroppedRectangle_getAbsolutePosition(self)
    def getAbsoluteRect(self): return _Myoushu.ICroppedRectangle_getAbsoluteRect(self)
    def getAbsoluteCoord(self): return _Myoushu.ICroppedRectangle_getAbsoluteCoord(self)
    def getAbsoluteLeft(self): return _Myoushu.ICroppedRectangle_getAbsoluteLeft(self)
    def getAbsoluteTop(self): return _Myoushu.ICroppedRectangle_getAbsoluteTop(self)
    def setAlign(self, *args): return _Myoushu.ICroppedRectangle_setAlign(self, *args)
    def getAlign(self): return _Myoushu.ICroppedRectangle_getAlign(self)
    def getLeft(self): return _Myoushu.ICroppedRectangle_getLeft(self)
    def getRight(self): return _Myoushu.ICroppedRectangle_getRight(self)
    def getTop(self): return _Myoushu.ICroppedRectangle_getTop(self)
    def getBottom(self): return _Myoushu.ICroppedRectangle_getBottom(self)
    def getWidth(self): return _Myoushu.ICroppedRectangle_getWidth(self)
    def getHeight(self): return _Myoushu.ICroppedRectangle_getHeight(self)
    def _isMargin(self): return _Myoushu.ICroppedRectangle__isMargin(self)
    def _getViewLeft(self): return _Myoushu.ICroppedRectangle__getViewLeft(self)
    def _getViewRight(self): return _Myoushu.ICroppedRectangle__getViewRight(self)
    def _getViewTop(self): return _Myoushu.ICroppedRectangle__getViewTop(self)
    def _getViewBottom(self): return _Myoushu.ICroppedRectangle__getViewBottom(self)
    def _getViewWidth(self): return _Myoushu.ICroppedRectangle__getViewWidth(self)
    def _getViewHeight(self): return _Myoushu.ICroppedRectangle__getViewHeight(self)
    def _updateView(self): return _Myoushu.ICroppedRectangle__updateView(self)
    def _correctView(self): return _Myoushu.ICroppedRectangle__correctView(self)
    def _setAlign(self, *args): return _Myoushu.ICroppedRectangle__setAlign(self, *args)
    def _setCroppedParent(self, *args): return _Myoushu.ICroppedRectangle__setCroppedParent(self, *args)
    def _getMargin(self): return _Myoushu.ICroppedRectangle__getMargin(self)
    def _getMarginLeft(self): return _Myoushu.ICroppedRectangle__getMarginLeft(self)
    def _getMarginRight(self): return _Myoushu.ICroppedRectangle__getMarginRight(self)
    def _getMarginTop(self): return _Myoushu.ICroppedRectangle__getMarginTop(self)
    def _getMarginBottom(self): return _Myoushu.ICroppedRectangle__getMarginBottom(self)
    def show(self): return _Myoushu.ICroppedRectangle_show(self)
    def hide(self): return _Myoushu.ICroppedRectangle_hide(self)
    def isShow(self): return _Myoushu.ICroppedRectangle_isShow(self)
ICroppedRectangle_swigregister = _Myoushu.ICroppedRectangle_swigregister
ICroppedRectangle_swigregister(ICroppedRectangle)

class Version(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Version, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Version, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_Version(*args)
        try: self.this.append(this)
        except: self.this = this
    def getMajor(self): return _Myoushu.Version_getMajor(self)
    def getMinor(self): return _Myoushu.Version_getMinor(self)
    def getPatch(self): return _Myoushu.Version_getPatch(self)
    def getPoorVersion(self): return _Myoushu.Version_getPoorVersion(self)
    def getFullVersion(self): return _Myoushu.Version_getFullVersion(self)
    def _print(self): return _Myoushu.Version__print(self)
    __swig_getmethods__["parse"] = lambda x: _Myoushu.Version_parse
    if _newclass:parse = staticmethod(_Myoushu.Version_parse)
    __swig_destroy__ = _Myoushu.delete_Version
    __del__ = lambda self : None;
Version_swigregister = _Myoushu.Version_swigregister
Version_swigregister(Version)

def Version_parse(*args):
  return _Myoushu.Version_parse(*args)
Version_parse = _Myoushu.Version_parse

class Data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Data, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Data()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Data
    __del__ = lambda self : None;
    def setData(self, *args): return _Myoushu.Data_setData(self, *args)
    def setSize(self, *args): return _Myoushu.Data_setSize(self, *args)
    def release(self): return _Myoushu.Data_release(self)
    def getData(self): return _Myoushu.Data_getData(self)
    def getSize(self): return _Myoushu.Data_getSize(self)
Data_swigregister = _Myoushu.Data_swigregister
Data_swigregister(Data)

class ElementType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElementType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElementType, name)
    __repr__ = _swig_repr
    Comment = _Myoushu.ElementType_Comment
    Declaration = _Myoushu.ElementType_Declaration
    Normal = _Myoushu.ElementType_Normal
    MAX = _Myoushu.ElementType_MAX
    def __init__(self, *args): 
        this = _Myoushu.new_ElementType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ElementType
    __del__ = lambda self : None;
ElementType_swigregister = _Myoushu.ElementType_swigregister
ElementType_swigregister(ElementType)

class ErrorType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorType, name)
    __repr__ = _swig_repr
    OpenFileFail = _Myoushu.ErrorType_OpenFileFail
    CreateFileFail = _Myoushu.ErrorType_CreateFileFail
    IncorrectContent = _Myoushu.ErrorType_IncorrectContent
    NotClosedElements = _Myoushu.ErrorType_NotClosedElements
    NoXMLDeclaration = _Myoushu.ErrorType_NoXMLDeclaration
    CloseNotOpenedElement = _Myoushu.ErrorType_CloseNotOpenedElement
    InconsistentOpenCloseElements = _Myoushu.ErrorType_InconsistentOpenCloseElements
    MoreThanOneXMLDeclaration = _Myoushu.ErrorType_MoreThanOneXMLDeclaration
    MoreThanOneRootElement = _Myoushu.ErrorType_MoreThanOneRootElement
    IncorrectAttribute = _Myoushu.ErrorType_IncorrectAttribute
    MAX = _Myoushu.ErrorType_MAX
    def __init__(self, *args): 
        this = _Myoushu.new_ErrorType(*args)
        try: self.this.append(this)
        except: self.this = this
    def _print(self): return _Myoushu.ErrorType__print(self)
    __swig_destroy__ = _Myoushu.delete_ErrorType
    __del__ = lambda self : None;
ErrorType_swigregister = _Myoushu.ErrorType_swigregister
ErrorType_swigregister(ErrorType)

class ElementEnumerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElementEnumerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElementEnumerator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def next(self, *args): return _Myoushu.ElementEnumerator_next(self, *args)
    def __deref__(self): return _Myoushu.ElementEnumerator___deref__(self)
    def current(self): return _Myoushu.ElementEnumerator_current(self)
    def nextNode(self, *args): return _Myoushu.ElementEnumerator_nextNode(self, *args)
    def currentNode(self): return _Myoushu.ElementEnumerator_currentNode(self)
    __swig_destroy__ = _Myoushu.delete_ElementEnumerator
    __del__ = lambda self : None;
    def createChild(self, *args): return _Myoushu.ElementEnumerator_createChild(self, *args)
    def addAttributes(self, *args): return _Myoushu.ElementEnumerator_addAttributes(self, *args)
    def addAttribute(self, *args): return _Myoushu.ElementEnumerator_addAttribute(self, *args)
    def removeAttribute(self, *args): return _Myoushu.ElementEnumerator_removeAttribute(self, *args)
    def setAttribute(self, *args): return _Myoushu.ElementEnumerator_setAttribute(self, *args)
    def addContent(self, *args): return _Myoushu.ElementEnumerator_addContent(self, *args)
    def setContent(self, *args): return _Myoushu.ElementEnumerator_setContent(self, *args)
    def addBody(self, *args): return _Myoushu.ElementEnumerator_addBody(self, *args)
    def setBody(self, *args): return _Myoushu.ElementEnumerator_setBody(self, *args)
    def clear(self): return _Myoushu.ElementEnumerator_clear(self)
    def findAttribute(self, *args): return _Myoushu.ElementEnumerator_findAttribute(self, *args)
    def getName(self): return _Myoushu.ElementEnumerator_getName(self)
    def getContent(self): return _Myoushu.ElementEnumerator_getContent(self)
    def getAttributes(self): return _Myoushu.ElementEnumerator_getAttributes(self)
    def getParent(self): return _Myoushu.ElementEnumerator_getParent(self)
    def getElementEnumerator(self): return _Myoushu.ElementEnumerator_getElementEnumerator(self)
    def getType(self): return _Myoushu.ElementEnumerator_getType(self)
    def getBody(self): return _Myoushu.ElementEnumerator_getBody(self)
    def getNodeIterator(self): return _Myoushu.ElementEnumerator_getNodeIterator(self)
    def createCopy(self): return _Myoushu.ElementEnumerator_createCopy(self)
ElementEnumerator_swigregister = _Myoushu.ElementEnumerator_swigregister
ElementEnumerator_swigregister(ElementEnumerator)

class Element(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Element, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Element, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_Element
    __del__ = lambda self : None;
    def createChild(self, *args): return _Myoushu.Element_createChild(self, *args)
    def addAttributes(self, *args): return _Myoushu.Element_addAttributes(self, *args)
    def addAttribute(self, *args): return _Myoushu.Element_addAttribute(self, *args)
    def removeAttribute(self, *args): return _Myoushu.Element_removeAttribute(self, *args)
    def setAttribute(self, *args): return _Myoushu.Element_setAttribute(self, *args)
    def addContent(self, *args): return _Myoushu.Element_addContent(self, *args)
    def setContent(self, *args): return _Myoushu.Element_setContent(self, *args)
    def addBody(self, *args): return _Myoushu.Element_addBody(self, *args)
    def setBody(self, *args): return _Myoushu.Element_setBody(self, *args)
    def clear(self): return _Myoushu.Element_clear(self)
    def findAttribute(self, *args): return _Myoushu.Element_findAttribute(self, *args)
    def getName(self): return _Myoushu.Element_getName(self)
    def getContent(self): return _Myoushu.Element_getContent(self)
    def getAttributes(self): return _Myoushu.Element_getAttributes(self)
    def getParent(self): return _Myoushu.Element_getParent(self)
    def getElementEnumerator(self): return _Myoushu.Element_getElementEnumerator(self)
    def getType(self): return _Myoushu.Element_getType(self)
    def getBody(self): return _Myoushu.Element_getBody(self)
    def getNodeIterator(self): return _Myoushu.Element_getNodeIterator(self)
    def createCopy(self): return _Myoushu.Element_createCopy(self)
Element_swigregister = _Myoushu.Element_swigregister
Element_swigregister(Element)

class Document(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Document, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Document, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Document()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Document
    __del__ = lambda self : None;
    def open(self, *args): return _Myoushu.Document_open(self, *args)
    def save(self, *args): return _Myoushu.Document_save(self, *args)
    def clear(self): return _Myoushu.Document_clear(self)
    def getLastError(self): return _Myoushu.Document_getLastError(self)
    def clearLastError(self): return _Myoushu.Document_clearLastError(self)
    def createDeclaration(self, _version = "1.0", _encoding = "UTF-8"): return _Myoushu.Document_createDeclaration(self, _version, _encoding)
    def createRoot(self, *args): return _Myoushu.Document_createRoot(self, *args)
    def getRoot(self): return _Myoushu.Document_getRoot(self)
    def createInfo(self, _version = "1.0", _encoding = "UTF-8"): return _Myoushu.Document_createInfo(self, _version, _encoding)
Document_swigregister = _Myoushu.Document_swigregister
Document_swigregister(Document)

class RenderTargetInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RenderTargetInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RenderTargetInfo, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_RenderTargetInfo()
        try: self.this.append(this)
        except: self.this = this
    def setOffset(self, *args): return _Myoushu.RenderTargetInfo_setOffset(self, *args)
    __swig_setmethods__["maximumDepth"] = _Myoushu.RenderTargetInfo_maximumDepth_set
    __swig_getmethods__["maximumDepth"] = _Myoushu.RenderTargetInfo_maximumDepth_get
    if _newclass:maximumDepth = _swig_property(_Myoushu.RenderTargetInfo_maximumDepth_get, _Myoushu.RenderTargetInfo_maximumDepth_set)
    __swig_setmethods__["pixScaleX"] = _Myoushu.RenderTargetInfo_pixScaleX_set
    __swig_getmethods__["pixScaleX"] = _Myoushu.RenderTargetInfo_pixScaleX_get
    if _newclass:pixScaleX = _swig_property(_Myoushu.RenderTargetInfo_pixScaleX_get, _Myoushu.RenderTargetInfo_pixScaleX_set)
    __swig_setmethods__["pixScaleY"] = _Myoushu.RenderTargetInfo_pixScaleY_set
    __swig_getmethods__["pixScaleY"] = _Myoushu.RenderTargetInfo_pixScaleY_get
    if _newclass:pixScaleY = _swig_property(_Myoushu.RenderTargetInfo_pixScaleY_get, _Myoushu.RenderTargetInfo_pixScaleY_set)
    __swig_setmethods__["hOffset"] = _Myoushu.RenderTargetInfo_hOffset_set
    __swig_getmethods__["hOffset"] = _Myoushu.RenderTargetInfo_hOffset_get
    if _newclass:hOffset = _swig_property(_Myoushu.RenderTargetInfo_hOffset_get, _Myoushu.RenderTargetInfo_hOffset_set)
    __swig_setmethods__["vOffset"] = _Myoushu.RenderTargetInfo_vOffset_set
    __swig_getmethods__["vOffset"] = _Myoushu.RenderTargetInfo_vOffset_get
    if _newclass:vOffset = _swig_property(_Myoushu.RenderTargetInfo_vOffset_get, _Myoushu.RenderTargetInfo_vOffset_set)
    __swig_setmethods__["aspectCoef"] = _Myoushu.RenderTargetInfo_aspectCoef_set
    __swig_getmethods__["aspectCoef"] = _Myoushu.RenderTargetInfo_aspectCoef_get
    if _newclass:aspectCoef = _swig_property(_Myoushu.RenderTargetInfo_aspectCoef_get, _Myoushu.RenderTargetInfo_aspectCoef_set)
    __swig_setmethods__["leftOffset"] = _Myoushu.RenderTargetInfo_leftOffset_set
    __swig_getmethods__["leftOffset"] = _Myoushu.RenderTargetInfo_leftOffset_get
    if _newclass:leftOffset = _swig_property(_Myoushu.RenderTargetInfo_leftOffset_get, _Myoushu.RenderTargetInfo_leftOffset_set)
    __swig_setmethods__["topOffset"] = _Myoushu.RenderTargetInfo_topOffset_set
    __swig_getmethods__["topOffset"] = _Myoushu.RenderTargetInfo_topOffset_get
    if _newclass:topOffset = _swig_property(_Myoushu.RenderTargetInfo_topOffset_get, _Myoushu.RenderTargetInfo_topOffset_set)
    __swig_setmethods__["rttFlipY"] = _Myoushu.RenderTargetInfo_rttFlipY_set
    __swig_getmethods__["rttFlipY"] = _Myoushu.RenderTargetInfo_rttFlipY_get
    if _newclass:rttFlipY = _swig_property(_Myoushu.RenderTargetInfo_rttFlipY_get, _Myoushu.RenderTargetInfo_rttFlipY_set)
    __swig_destroy__ = _Myoushu.delete_RenderTargetInfo
    __del__ = lambda self : None;
RenderTargetInfo_swigregister = _Myoushu.RenderTargetInfo_swigregister
RenderTargetInfo_swigregister(RenderTargetInfo)

class IRenderTarget(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IRenderTarget, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IRenderTarget, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_IRenderTarget
    __del__ = lambda self : None;
    def begin(self): return _Myoushu.IRenderTarget_begin(self)
    def end(self): return _Myoushu.IRenderTarget_end(self)
    def doRender(self, *args): return _Myoushu.IRenderTarget_doRender(self, *args)
    def getInfo(self): return _Myoushu.IRenderTarget_getInfo(self)
IRenderTarget_swigregister = _Myoushu.IRenderTarget_swigregister
IRenderTarget_swigregister(IRenderTarget)

class ILayerNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ILayerNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ILayerNode, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_ILayerNode
    __del__ = lambda self : None;
    def getLayer(self): return _Myoushu.ILayerNode_getLayer(self)
    def getParent(self): return _Myoushu.ILayerNode_getParent(self)
    def createChildItemNode(self): return _Myoushu.ILayerNode_createChildItemNode(self)
    def destroyChildItemNode(self, *args): return _Myoushu.ILayerNode_destroyChildItemNode(self, *args)
    def upChildItemNode(self, *args): return _Myoushu.ILayerNode_upChildItemNode(self, *args)
    def getEnumerator(self): return _Myoushu.ILayerNode_getEnumerator(self)
    def attachLayerItem(self, *args): return _Myoushu.ILayerNode_attachLayerItem(self, *args)
    def detachLayerItem(self, *args): return _Myoushu.ILayerNode_detachLayerItem(self, *args)
    def addToRenderItem(self, *args): return _Myoushu.ILayerNode_addToRenderItem(self, *args)
    def outOfDate(self, *args): return _Myoushu.ILayerNode_outOfDate(self, *args)
    def getLayerItemByPoint(self, *args): return _Myoushu.ILayerNode_getLayerItemByPoint(self, *args)
    def renderToTarget(self, *args): return _Myoushu.ILayerNode_renderToTarget(self, *args)
ILayerNode_swigregister = _Myoushu.ILayerNode_swigregister
ILayerNode_swigregister(ILayerNode)

class ILayer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ILayer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ILayer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_ILayer
    __del__ = lambda self : None;
    def getName(self): return _Myoushu.ILayer_getName(self)
    def createChildItemNode(self): return _Myoushu.ILayer_createChildItemNode(self)
    def destroyChildItemNode(self, *args): return _Myoushu.ILayer_destroyChildItemNode(self, *args)
    def upChildItemNode(self, *args): return _Myoushu.ILayer_upChildItemNode(self, *args)
    def getEnumerator(self): return _Myoushu.ILayer_getEnumerator(self)
    def getLayerItemByPoint(self, *args): return _Myoushu.ILayer_getLayerItemByPoint(self, *args)
    def renderToTarget(self, *args): return _Myoushu.ILayer_renderToTarget(self, *args)
ILayer_swigregister = _Myoushu.ILayer_swigregister
ILayer_swigregister(ILayer)

class UserData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UserData, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_UserData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_UserData
    __del__ = lambda self : None;
    def setUserString(self, *args): return _Myoushu.UserData_setUserString(self, *args)
    def getUserString(self, *args): return _Myoushu.UserData_getUserString(self, *args)
    def clearUserString(self, *args): return _Myoushu.UserData_clearUserString(self, *args)
    def isUserString(self, *args): return _Myoushu.UserData_isUserString(self, *args)
    def clearUserStrings(self): return _Myoushu.UserData_clearUserStrings(self)
    def getUserData(self): return _Myoushu.UserData_getUserData(self)
UserData_swigregister = _Myoushu.UserData_swigregister
UserData_swigregister(UserData)

class LayerManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayerManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LayerManager, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def initialise(self): return _Myoushu.LayerManager_initialise(self)
    def shutdown(self): return _Myoushu.LayerManager_shutdown(self)
    def attachToLayerNode(self, *args): return _Myoushu.LayerManager_attachToLayerNode(self, *args)
    def detachFromLayer(self, *args): return _Myoushu.LayerManager_detachFromLayer(self, *args)
    def upLayerItem(self, *args): return _Myoushu.LayerManager_upLayerItem(self, *args)
    def load(self, *args): return _Myoushu.LayerManager_load(self, *args)
    def _load(self, *args): return _Myoushu.LayerManager__load(self, *args)
    def isExist(self, *args): return _Myoushu.LayerManager_isExist(self, *args)
    def getEnumerator(self): return _Myoushu.LayerManager_getEnumerator(self)
    def getWidgetFromPoint(self, *args): return _Myoushu.LayerManager_getWidgetFromPoint(self, *args)
    __swig_destroy__ = _Myoushu.delete_LayerManager
    __del__ = lambda self : None;
LayerManager_swigregister = _Myoushu.LayerManager_swigregister
LayerManager_swigregister(LayerManager)

class IStateInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IStateInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IStateInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_IStateInfo
    __del__ = lambda self : None;
IStateInfo_swigregister = _Myoushu.IStateInfo_swigregister
IStateInfo_swigregister(IStateInfo)

class SubWidgetBinding(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubWidgetBinding, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SubWidgetBinding, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_SubWidgetBinding(*args)
        try: self.this.append(this)
        except: self.this = this
    def create(self, *args): return _Myoushu.SubWidgetBinding_create(self, *args)
    def clear(self): return _Myoushu.SubWidgetBinding_clear(self)
    def add(self, *args): return _Myoushu.SubWidgetBinding_add(self, *args)
    __swig_destroy__ = _Myoushu.delete_SubWidgetBinding
    __del__ = lambda self : None;
SubWidgetBinding_swigregister = _Myoushu.SubWidgetBinding_swigregister
SubWidgetBinding_swigregister(SubWidgetBinding)

class ChildSkinInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChildSkinInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChildSkinInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_ChildSkinInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    def addParam(self, *args): return _Myoushu.ChildSkinInfo_addParam(self, *args)
    def findValue(self, *args): return _Myoushu.ChildSkinInfo_findValue(self, *args)
    __swig_setmethods__["type"] = _Myoushu.ChildSkinInfo_type_set
    __swig_getmethods__["type"] = _Myoushu.ChildSkinInfo_type_get
    if _newclass:type = _swig_property(_Myoushu.ChildSkinInfo_type_get, _Myoushu.ChildSkinInfo_type_set)
    __swig_setmethods__["skin"] = _Myoushu.ChildSkinInfo_skin_set
    __swig_getmethods__["skin"] = _Myoushu.ChildSkinInfo_skin_get
    if _newclass:skin = _swig_property(_Myoushu.ChildSkinInfo_skin_get, _Myoushu.ChildSkinInfo_skin_set)
    __swig_setmethods__["name"] = _Myoushu.ChildSkinInfo_name_set
    __swig_getmethods__["name"] = _Myoushu.ChildSkinInfo_name_get
    if _newclass:name = _swig_property(_Myoushu.ChildSkinInfo_name_get, _Myoushu.ChildSkinInfo_name_set)
    __swig_setmethods__["layer"] = _Myoushu.ChildSkinInfo_layer_set
    __swig_getmethods__["layer"] = _Myoushu.ChildSkinInfo_layer_get
    if _newclass:layer = _swig_property(_Myoushu.ChildSkinInfo_layer_get, _Myoushu.ChildSkinInfo_layer_set)
    __swig_setmethods__["style"] = _Myoushu.ChildSkinInfo_style_set
    __swig_getmethods__["style"] = _Myoushu.ChildSkinInfo_style_get
    if _newclass:style = _swig_property(_Myoushu.ChildSkinInfo_style_get, _Myoushu.ChildSkinInfo_style_set)
    __swig_setmethods__["coord"] = _Myoushu.ChildSkinInfo_coord_set
    __swig_getmethods__["coord"] = _Myoushu.ChildSkinInfo_coord_get
    if _newclass:coord = _swig_property(_Myoushu.ChildSkinInfo_coord_get, _Myoushu.ChildSkinInfo_coord_set)
    __swig_setmethods__["align"] = _Myoushu.ChildSkinInfo_align_set
    __swig_getmethods__["align"] = _Myoushu.ChildSkinInfo_align_get
    if _newclass:align = _swig_property(_Myoushu.ChildSkinInfo_align_get, _Myoushu.ChildSkinInfo_align_set)
    __swig_setmethods__["params"] = _Myoushu.ChildSkinInfo_params_set
    __swig_getmethods__["params"] = _Myoushu.ChildSkinInfo_params_get
    if _newclass:params = _swig_property(_Myoushu.ChildSkinInfo_params_get, _Myoushu.ChildSkinInfo_params_set)
    __swig_destroy__ = _Myoushu.delete_ChildSkinInfo
    __del__ = lambda self : None;
ChildSkinInfo_swigregister = _Myoushu.ChildSkinInfo_swigregister
ChildSkinInfo_swigregister(ChildSkinInfo)

class SubWidgetInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubWidgetInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SubWidgetInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_SubWidgetInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["coord"] = _Myoushu.SubWidgetInfo_coord_set
    __swig_getmethods__["coord"] = _Myoushu.SubWidgetInfo_coord_get
    if _newclass:coord = _swig_property(_Myoushu.SubWidgetInfo_coord_get, _Myoushu.SubWidgetInfo_coord_set)
    __swig_setmethods__["align"] = _Myoushu.SubWidgetInfo_align_set
    __swig_getmethods__["align"] = _Myoushu.SubWidgetInfo_align_get
    if _newclass:align = _swig_property(_Myoushu.SubWidgetInfo_align_get, _Myoushu.SubWidgetInfo_align_set)
    __swig_setmethods__["type"] = _Myoushu.SubWidgetInfo_type_set
    __swig_getmethods__["type"] = _Myoushu.SubWidgetInfo_type_get
    if _newclass:type = _swig_property(_Myoushu.SubWidgetInfo_type_get, _Myoushu.SubWidgetInfo_type_set)
    __swig_destroy__ = _Myoushu.delete_SubWidgetInfo
    __del__ = lambda self : None;
SubWidgetInfo_swigregister = _Myoushu.SubWidgetInfo_swigregister
SubWidgetInfo_swigregister(SubWidgetInfo)

class WidgetSkinInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WidgetSkinInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WidgetSkinInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_WidgetSkinInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    def setInfo(self, *args): return _Myoushu.WidgetSkinInfo_setInfo(self, *args)
    def addInfo(self, *args): return _Myoushu.WidgetSkinInfo_addInfo(self, *args)
    def addProperty(self, *args): return _Myoushu.WidgetSkinInfo_addProperty(self, *args)
    def addChild(self, *args): return _Myoushu.WidgetSkinInfo_addChild(self, *args)
    def loadMask(self, *args): return _Myoushu.WidgetSkinInfo_loadMask(self, *args)
    def clear(self): return _Myoushu.WidgetSkinInfo_clear(self)
    def getSize(self): return _Myoushu.WidgetSkinInfo_getSize(self)
    def getTextureName(self): return _Myoushu.WidgetSkinInfo_getTextureName(self)
    def getBasisInfo(self): return _Myoushu.WidgetSkinInfo_getBasisInfo(self)
    def getStateInfo(self): return _Myoushu.WidgetSkinInfo_getStateInfo(self)
    def getProperties(self): return _Myoushu.WidgetSkinInfo_getProperties(self)
    def getChild(self): return _Myoushu.WidgetSkinInfo_getChild(self)
    def getMask(self): return _Myoushu.WidgetSkinInfo_getMask(self)
    def getSkinName(self): return _Myoushu.WidgetSkinInfo_getSkinName(self)
    __swig_destroy__ = _Myoushu.delete_WidgetSkinInfo
    __del__ = lambda self : None;
WidgetSkinInfo_swigregister = _Myoushu.WidgetSkinInfo_swigregister
WidgetSkinInfo_swigregister(WidgetSkinInfo)

class ISubWidget(ICroppedRectangle):
    __swig_setmethods__ = {}
    for _s in [ICroppedRectangle]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISubWidget, name, value)
    __swig_getmethods__ = {}
    for _s in [ICroppedRectangle]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ISubWidget, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_ISubWidget
    __del__ = lambda self : None;
    def createDrawItem(self, *args): return _Myoushu.ISubWidget_createDrawItem(self, *args)
    def destroyDrawItem(self): return _Myoushu.ISubWidget_destroyDrawItem(self)
    def setAlpha(self, *args): return _Myoushu.ISubWidget_setAlpha(self, *args)
    def setStateData(self, *args): return _Myoushu.ISubWidget_setStateData(self, *args)
    def doRender(self): return _Myoushu.ISubWidget_doRender(self)
ISubWidget_swigregister = _Myoushu.ISubWidget_swigregister
ISubWidget_swigregister(ISubWidget)

class ISubWidgetText(ISubWidget):
    __swig_setmethods__ = {}
    for _s in [ISubWidget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISubWidgetText, name, value)
    __swig_getmethods__ = {}
    for _s in [ISubWidget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ISubWidgetText, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_ISubWidgetText
    __del__ = lambda self : None;
    def getSelectStart(self): return _Myoushu.ISubWidgetText_getSelectStart(self)
    def getSelectEnd(self): return _Myoushu.ISubWidgetText_getSelectEnd(self)
    def setTextSelect(self, *args): return _Myoushu.ISubWidgetText_setTextSelect(self, *args)
    def getSelectBackground(self): return _Myoushu.ISubWidgetText_getSelectBackground(self)
    def setSelectBackground(self, *args): return _Myoushu.ISubWidgetText_setSelectBackground(self, *args)
    def isCursorShow(self): return _Myoushu.ISubWidgetText_isCursorShow(self)
    def setShowCursor(self, *args): return _Myoushu.ISubWidgetText_setShowCursor(self, *args)
    def setCursorPosition(self, *args): return _Myoushu.ISubWidgetText_setCursorPosition(self, *args)
    def setBreakLine(self, *args): return _Myoushu.ISubWidgetText_setBreakLine(self, *args)
    def getCursorPosition(self, *args): return _Myoushu.ISubWidgetText_getCursorPosition(self, *args)
    def getCursorCoord(self, *args): return _Myoushu.ISubWidgetText_getCursorCoord(self, *args)
    def getCursorPoint(self, *args): return _Myoushu.ISubWidgetText_getCursorPoint(self, *args)
    def getCursorRect(self, *args): return _Myoushu.ISubWidgetText_getCursorRect(self, *args)
    def getTextSize(self): return _Myoushu.ISubWidgetText_getTextSize(self)
    def setViewOffset(self, *args): return _Myoushu.ISubWidgetText_setViewOffset(self, *args)
    def getViewOffset(self): return _Myoushu.ISubWidgetText_getViewOffset(self)
    def setCaption(self, *args): return _Myoushu.ISubWidgetText_setCaption(self, *args)
    def getCaption(self): return _Myoushu.ISubWidgetText_getCaption(self)
    def setTextColour(self, *args): return _Myoushu.ISubWidgetText_setTextColour(self, *args)
    def getTextColour(self): return _Myoushu.ISubWidgetText_getTextColour(self)
    def setFontName(self, *args): return _Myoushu.ISubWidgetText_setFontName(self, *args)
    def getFontName(self): return _Myoushu.ISubWidgetText_getFontName(self)
    def setFontHeight(self, *args): return _Myoushu.ISubWidgetText_setFontHeight(self, *args)
    def getFontHeight(self): return _Myoushu.ISubWidgetText_getFontHeight(self)
    def setTextAlign(self, *args): return _Myoushu.ISubWidgetText_setTextAlign(self, *args)
    def getTextAlign(self): return _Myoushu.ISubWidgetText_getTextAlign(self)
    def setShiftText(self, *args): return _Myoushu.ISubWidgetText_setShiftText(self, *args)
ISubWidgetText_swigregister = _Myoushu.ISubWidgetText_swigregister
ISubWidgetText_swigregister(ISubWidgetText)

class ISubWidgetRect(ISubWidget):
    __swig_setmethods__ = {}
    for _s in [ISubWidget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISubWidgetRect, name, value)
    __swig_getmethods__ = {}
    for _s in [ISubWidget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ISubWidgetRect, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_ISubWidgetRect
    __del__ = lambda self : None;
    def _setUVSet(self, *args): return _Myoushu.ISubWidgetRect__setUVSet(self, *args)
ISubWidgetRect_swigregister = _Myoushu.ISubWidgetRect_swigregister
ISubWidgetRect_swigregister(ISubWidgetRect)

class IWidgetCreator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IWidgetCreator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IWidgetCreator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_IWidgetCreator
    __del__ = lambda self : None;
    def _linkChildWidget(self, *args): return _Myoushu.IWidgetCreator__linkChildWidget(self, *args)
    def _unlinkChildWidget(self, *args): return _Myoushu.IWidgetCreator__unlinkChildWidget(self, *args)
IWidgetCreator_swigregister = _Myoushu.IWidgetCreator_swigregister
IWidgetCreator_swigregister(IWidgetCreator)

class WidgetEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WidgetEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WidgetEvent, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_WidgetEvent
    __del__ = lambda self : None;
    __swig_setmethods__["eventMouseLostFocus"] = _Myoushu.WidgetEvent_eventMouseLostFocus_set
    __swig_getmethods__["eventMouseLostFocus"] = _Myoushu.WidgetEvent_eventMouseLostFocus_get
    if _newclass:eventMouseLostFocus = _swig_property(_Myoushu.WidgetEvent_eventMouseLostFocus_get, _Myoushu.WidgetEvent_eventMouseLostFocus_set)
    __swig_setmethods__["eventMouseSetFocus"] = _Myoushu.WidgetEvent_eventMouseSetFocus_set
    __swig_getmethods__["eventMouseSetFocus"] = _Myoushu.WidgetEvent_eventMouseSetFocus_get
    if _newclass:eventMouseSetFocus = _swig_property(_Myoushu.WidgetEvent_eventMouseSetFocus_get, _Myoushu.WidgetEvent_eventMouseSetFocus_set)
    __swig_setmethods__["eventMouseDrag"] = _Myoushu.WidgetEvent_eventMouseDrag_set
    __swig_getmethods__["eventMouseDrag"] = _Myoushu.WidgetEvent_eventMouseDrag_get
    if _newclass:eventMouseDrag = _swig_property(_Myoushu.WidgetEvent_eventMouseDrag_get, _Myoushu.WidgetEvent_eventMouseDrag_set)
    __swig_setmethods__["eventMouseMove"] = _Myoushu.WidgetEvent_eventMouseMove_set
    __swig_getmethods__["eventMouseMove"] = _Myoushu.WidgetEvent_eventMouseMove_get
    if _newclass:eventMouseMove = _swig_property(_Myoushu.WidgetEvent_eventMouseMove_get, _Myoushu.WidgetEvent_eventMouseMove_set)
    __swig_setmethods__["eventMouseWheel"] = _Myoushu.WidgetEvent_eventMouseWheel_set
    __swig_getmethods__["eventMouseWheel"] = _Myoushu.WidgetEvent_eventMouseWheel_get
    if _newclass:eventMouseWheel = _swig_property(_Myoushu.WidgetEvent_eventMouseWheel_get, _Myoushu.WidgetEvent_eventMouseWheel_set)
    __swig_setmethods__["eventMouseButtonPressed"] = _Myoushu.WidgetEvent_eventMouseButtonPressed_set
    __swig_getmethods__["eventMouseButtonPressed"] = _Myoushu.WidgetEvent_eventMouseButtonPressed_get
    if _newclass:eventMouseButtonPressed = _swig_property(_Myoushu.WidgetEvent_eventMouseButtonPressed_get, _Myoushu.WidgetEvent_eventMouseButtonPressed_set)
    __swig_setmethods__["eventMouseButtonReleased"] = _Myoushu.WidgetEvent_eventMouseButtonReleased_set
    __swig_getmethods__["eventMouseButtonReleased"] = _Myoushu.WidgetEvent_eventMouseButtonReleased_get
    if _newclass:eventMouseButtonReleased = _swig_property(_Myoushu.WidgetEvent_eventMouseButtonReleased_get, _Myoushu.WidgetEvent_eventMouseButtonReleased_set)
    __swig_setmethods__["eventMouseButtonClick"] = _Myoushu.WidgetEvent_eventMouseButtonClick_set
    __swig_getmethods__["eventMouseButtonClick"] = _Myoushu.WidgetEvent_eventMouseButtonClick_get
    if _newclass:eventMouseButtonClick = _swig_property(_Myoushu.WidgetEvent_eventMouseButtonClick_get, _Myoushu.WidgetEvent_eventMouseButtonClick_set)
    __swig_setmethods__["eventMouseButtonDoubleClick"] = _Myoushu.WidgetEvent_eventMouseButtonDoubleClick_set
    __swig_getmethods__["eventMouseButtonDoubleClick"] = _Myoushu.WidgetEvent_eventMouseButtonDoubleClick_get
    if _newclass:eventMouseButtonDoubleClick = _swig_property(_Myoushu.WidgetEvent_eventMouseButtonDoubleClick_get, _Myoushu.WidgetEvent_eventMouseButtonDoubleClick_set)
    __swig_setmethods__["eventKeyLostFocus"] = _Myoushu.WidgetEvent_eventKeyLostFocus_set
    __swig_getmethods__["eventKeyLostFocus"] = _Myoushu.WidgetEvent_eventKeyLostFocus_get
    if _newclass:eventKeyLostFocus = _swig_property(_Myoushu.WidgetEvent_eventKeyLostFocus_get, _Myoushu.WidgetEvent_eventKeyLostFocus_set)
    __swig_setmethods__["eventKeySetFocus"] = _Myoushu.WidgetEvent_eventKeySetFocus_set
    __swig_getmethods__["eventKeySetFocus"] = _Myoushu.WidgetEvent_eventKeySetFocus_get
    if _newclass:eventKeySetFocus = _swig_property(_Myoushu.WidgetEvent_eventKeySetFocus_get, _Myoushu.WidgetEvent_eventKeySetFocus_set)
    __swig_setmethods__["eventKeyButtonPressed"] = _Myoushu.WidgetEvent_eventKeyButtonPressed_set
    __swig_getmethods__["eventKeyButtonPressed"] = _Myoushu.WidgetEvent_eventKeyButtonPressed_get
    if _newclass:eventKeyButtonPressed = _swig_property(_Myoushu.WidgetEvent_eventKeyButtonPressed_get, _Myoushu.WidgetEvent_eventKeyButtonPressed_set)
    __swig_setmethods__["eventKeyButtonReleased"] = _Myoushu.WidgetEvent_eventKeyButtonReleased_set
    __swig_getmethods__["eventKeyButtonReleased"] = _Myoushu.WidgetEvent_eventKeyButtonReleased_get
    if _newclass:eventKeyButtonReleased = _swig_property(_Myoushu.WidgetEvent_eventKeyButtonReleased_get, _Myoushu.WidgetEvent_eventKeyButtonReleased_set)
    __swig_setmethods__["eventRootMouseChangeFocus"] = _Myoushu.WidgetEvent_eventRootMouseChangeFocus_set
    __swig_getmethods__["eventRootMouseChangeFocus"] = _Myoushu.WidgetEvent_eventRootMouseChangeFocus_get
    if _newclass:eventRootMouseChangeFocus = _swig_property(_Myoushu.WidgetEvent_eventRootMouseChangeFocus_get, _Myoushu.WidgetEvent_eventRootMouseChangeFocus_set)
    __swig_setmethods__["eventRootKeyChangeFocus"] = _Myoushu.WidgetEvent_eventRootKeyChangeFocus_set
    __swig_getmethods__["eventRootKeyChangeFocus"] = _Myoushu.WidgetEvent_eventRootKeyChangeFocus_get
    if _newclass:eventRootKeyChangeFocus = _swig_property(_Myoushu.WidgetEvent_eventRootKeyChangeFocus_get, _Myoushu.WidgetEvent_eventRootKeyChangeFocus_set)
    __swig_setmethods__["eventToolTip"] = _Myoushu.WidgetEvent_eventToolTip_set
    __swig_getmethods__["eventToolTip"] = _Myoushu.WidgetEvent_eventToolTip_get
    if _newclass:eventToolTip = _swig_property(_Myoushu.WidgetEvent_eventToolTip_get, _Myoushu.WidgetEvent_eventToolTip_set)
    __swig_setmethods__["eventActionInfo"] = _Myoushu.WidgetEvent_eventActionInfo_set
    __swig_getmethods__["eventActionInfo"] = _Myoushu.WidgetEvent_eventActionInfo_get
    if _newclass:eventActionInfo = _swig_property(_Myoushu.WidgetEvent_eventActionInfo_get, _Myoushu.WidgetEvent_eventActionInfo_set)
    __swig_setmethods__["_requestGetContainer"] = _Myoushu.WidgetEvent__requestGetContainer_set
    __swig_getmethods__["_requestGetContainer"] = _Myoushu.WidgetEvent__requestGetContainer_get
    if _newclass:_requestGetContainer = _swig_property(_Myoushu.WidgetEvent__requestGetContainer_get, _Myoushu.WidgetEvent__requestGetContainer_set)
WidgetEvent_swigregister = _Myoushu.WidgetEvent_swigregister
WidgetEvent_swigregister(WidgetEvent)

class Widget(ICroppedRectangle,UserData,WidgetEvent,IWidgetCreator):
    __swig_setmethods__ = {}
    for _s in [ICroppedRectangle,UserData,WidgetEvent,IWidgetCreator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Widget, name, value)
    __swig_getmethods__ = {}
    for _s in [ICroppedRectangle,UserData,WidgetEvent,IWidgetCreator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Widget, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Widget()
        try: self.this.append(this)
        except: self.this = this
    def createWidgetRealT(self, *args): return _Myoushu.Widget_createWidgetRealT(self, *args)
    def createWidgetT(self, *args): return _Myoushu.Widget_createWidgetT(self, *args)
    def getName(self): return _Myoushu.Widget_getName(self)
    def setSize(self, *args): return _Myoushu.Widget_setSize(self, *args)
    def setCoord(self, *args): return _Myoushu.Widget_setCoord(self, *args)
    def setRealPosition(self, *args): return _Myoushu.Widget_setRealPosition(self, *args)
    def setRealSize(self, *args): return _Myoushu.Widget_setRealSize(self, *args)
    def setRealCoord(self, *args): return _Myoushu.Widget_setRealCoord(self, *args)
    def setVisible(self, *args): return _Myoushu.Widget_setVisible(self, *args)
    def setAlign(self, *args): return _Myoushu.Widget_setAlign(self, *args)
    def setCaption(self, *args): return _Myoushu.Widget_setCaption(self, *args)
    def getCaption(self): return _Myoushu.Widget_getCaption(self)
    def setAlpha(self, *args): return _Myoushu.Widget_setAlpha(self, *args)
    def getAlpha(self): return _Myoushu.Widget_getAlpha(self)
    def setInheritsAlpha(self, *args): return _Myoushu.Widget_setInheritsAlpha(self, *args)
    def isInheritsAlpha(self): return _Myoushu.Widget_isInheritsAlpha(self)
    def setState(self, *args): return _Myoushu.Widget_setState(self, *args)
    def isRootWidget(self): return _Myoushu.Widget_isRootWidget(self)
    def getParent(self): return _Myoushu.Widget_getParent(self)
    def getEnumerator(self): return _Myoushu.Widget_getEnumerator(self)
    def getChildCount(self): return _Myoushu.Widget_getChildCount(self)
    def getChildAt(self, *args): return _Myoushu.Widget_getChildAt(self, *args)
    def findWidget(self, *args): return _Myoushu.Widget_findWidget(self, *args)
    def setNeedKeyFocus(self, *args): return _Myoushu.Widget_setNeedKeyFocus(self, *args)
    def isNeedKeyFocus(self): return _Myoushu.Widget_isNeedKeyFocus(self)
    def setNeedMouseFocus(self, *args): return _Myoushu.Widget_setNeedMouseFocus(self, *args)
    def isNeedMouseFocus(self): return _Myoushu.Widget_isNeedMouseFocus(self)
    def setInheritsPick(self, *args): return _Myoushu.Widget_setInheritsPick(self, *args)
    def isInheritsPick(self): return _Myoushu.Widget_isInheritsPick(self)
    def setMaskPick(self, *args): return _Myoushu.Widget_setMaskPick(self, *args)
    def setEnabled(self, *args): return _Myoushu.Widget_setEnabled(self, *args)
    def setEnabledSilent(self, *args): return _Myoushu.Widget_setEnabledSilent(self, *args)
    def isEnabled(self): return _Myoushu.Widget_isEnabled(self)
    def setPointer(self, *args): return _Myoushu.Widget_setPointer(self, *args)
    def getPointer(self): return _Myoushu.Widget_getPointer(self)
    def getLayerName(self): return _Myoushu.Widget_getLayerName(self)
    def getClientCoord(self): return _Myoushu.Widget_getClientCoord(self)
    def getClientWidget(self): return _Myoushu.Widget_getClientWidget(self)
    def getSubWidgetText(self): return _Myoushu.Widget_getSubWidgetText(self)
    def getSubWidgetMain(self): return _Myoushu.Widget_getSubWidgetMain(self)
    def setNeedToolTip(self, *args): return _Myoushu.Widget_setNeedToolTip(self, *args)
    def getNeedToolTip(self): return _Myoushu.Widget_getNeedToolTip(self)
    def setEnableToolTip(self, *args): return _Myoushu.Widget_setEnableToolTip(self, *args)
    def getEnableToolTip(self): return _Myoushu.Widget_getEnableToolTip(self)
    def detachFromWidget(self, _layer = ""): return _Myoushu.Widget_detachFromWidget(self, _layer)
    def attachToWidget(self, *args): return _Myoushu.Widget_attachToWidget(self, *args)
    def changeWidgetSkin(self, *args): return _Myoushu.Widget_changeWidgetSkin(self, *args)
    def setWidgetStyle(self, *args): return _Myoushu.Widget_setWidgetStyle(self, *args)
    def getWidgetStyle(self): return _Myoushu.Widget_getWidgetStyle(self)
    def setProperty(self, *args): return _Myoushu.Widget_setProperty(self, *args)
    def _getContainer(self, *args): return _Myoushu.Widget__getContainer(self, *args)
    def _forcePeek(self, *args): return _Myoushu.Widget__forcePeek(self, *args)
    def _setUVSet(self, *args): return _Myoushu.Widget__setUVSet(self, *args)
    def _setTextureName(self, *args): return _Myoushu.Widget__setTextureName(self, *args)
    def _getTextureName(self): return _Myoushu.Widget__getTextureName(self)
    def _getIWidgetCreator(self): return _Myoushu.Widget__getIWidgetCreator(self)
    def _getTextRegion(self): return _Myoushu.Widget__getTextRegion(self)
    def _getTextSize(self): return _Myoushu.Widget__getTextSize(self)
    def _setFontName(self, *args): return _Myoushu.Widget__setFontName(self, *args)
    def _getFontName(self): return _Myoushu.Widget__getFontName(self)
    def _setFontHeight(self, *args): return _Myoushu.Widget__setFontHeight(self, *args)
    def _getFontHeight(self): return _Myoushu.Widget__getFontHeight(self)
    def _setTextAlign(self, *args): return _Myoushu.Widget__setTextAlign(self, *args)
    def _getTextAlign(self): return _Myoushu.Widget__getTextAlign(self)
    def _setTextColour(self, *args): return _Myoushu.Widget__setTextColour(self, *args)
    def _getTextColour(self): return _Myoushu.Widget__getTextColour(self)
    def getLayerItemByPoint(self, *args): return _Myoushu.Widget_getLayerItemByPoint(self, *args)
    def getLayerItemCoord(self): return _Myoushu.Widget_getLayerItemCoord(self)
    def setCaptionWithNewLine(self, *args): return _Myoushu.Widget_setCaptionWithNewLine(self, *args)
    def _initialise(self, *args): return _Myoushu.Widget__initialise(self, *args)
    def setPosition(self, *args): return _Myoushu.Widget_setPosition(self, *args)
    def enableToolTip(self, *args): return _Myoushu.Widget_enableToolTip(self, *args)
    def setInheritsPeek(self, *args): return _Myoushu.Widget_setInheritsPeek(self, *args)
    def isInheritsPeek(self): return _Myoushu.Widget_isInheritsPeek(self)
    def setMaskPeek(self, *args): return _Myoushu.Widget_setMaskPeek(self, *args)
    def getTextCoord(self): return _Myoushu.Widget_getTextCoord(self)
    def getTextSize(self): return _Myoushu.Widget_getTextSize(self)
    def setColour(self, *args): return _Myoushu.Widget_setColour(self, *args)
    def getColour(self): return _Myoushu.Widget_getColour(self)
    def setFontName(self, *args): return _Myoushu.Widget_setFontName(self, *args)
    def getFontName(self): return _Myoushu.Widget_getFontName(self)
    def setFontHeight(self, *args): return _Myoushu.Widget_setFontHeight(self, *args)
    def getFontHeight(self): return _Myoushu.Widget_getFontHeight(self)
    def setTextAlign(self, *args): return _Myoushu.Widget_setTextAlign(self, *args)
    def getTextAlign(self): return _Myoushu.Widget_getTextAlign(self)
    def setTextColour(self, *args): return _Myoushu.Widget_setTextColour(self, *args)
    def getTextColour(self): return _Myoushu.Widget_getTextColour(self)
Widget_swigregister = _Myoushu.Widget_swigregister
Widget_swigregister(Widget)

class StaticText(Widget):
    __swig_setmethods__ = {}
    for _s in [Widget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StaticText, name, value)
    __swig_getmethods__ = {}
    for _s in [Widget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StaticText, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_StaticText()
        try: self.this.append(this)
        except: self.this = this
    def getTextRegion(self): return _Myoushu.StaticText_getTextRegion(self)
    def getTextSize(self): return _Myoushu.StaticText_getTextSize(self)
    def setFontName(self, *args): return _Myoushu.StaticText_setFontName(self, *args)
    def getFontName(self): return _Myoushu.StaticText_getFontName(self)
    def setFontHeight(self, *args): return _Myoushu.StaticText_setFontHeight(self, *args)
    def getFontHeight(self): return _Myoushu.StaticText_getFontHeight(self)
    def setTextAlign(self, *args): return _Myoushu.StaticText_setTextAlign(self, *args)
    def getTextAlign(self): return _Myoushu.StaticText_getTextAlign(self)
    def setTextColour(self, *args): return _Myoushu.StaticText_setTextColour(self, *args)
    def getTextColour(self): return _Myoushu.StaticText_getTextColour(self)
    def setProperty(self, *args): return _Myoushu.StaticText_setProperty(self, *args)
    def _initialise(self, *args): return _Myoushu.StaticText__initialise(self, *args)
StaticText_swigregister = _Myoushu.StaticText_swigregister
StaticText_swigregister(StaticText)

class Edit(StaticText):
    __swig_setmethods__ = {}
    for _s in [StaticText]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Edit, name, value)
    __swig_getmethods__ = {}
    for _s in [StaticText]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Edit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Edit()
        try: self.this.append(this)
        except: self.this = this
    def setTextIntervalColour(self, *args): return _Myoushu.Edit_setTextIntervalColour(self, *args)
    def getTextSelectionStart(self): return _Myoushu.Edit_getTextSelectionStart(self)
    def getTextSelectionEnd(self): return _Myoushu.Edit_getTextSelectionEnd(self)
    def getTextSelectionLength(self): return _Myoushu.Edit_getTextSelectionLength(self)
    def getTextInterval(self, *args): return _Myoushu.Edit_getTextInterval(self, *args)
    def setTextSelection(self, *args): return _Myoushu.Edit_setTextSelection(self, *args)
    def deleteTextSelection(self): return _Myoushu.Edit_deleteTextSelection(self)
    def getTextSelection(self): return _Myoushu.Edit_getTextSelection(self)
    def isTextSelection(self): return _Myoushu.Edit_isTextSelection(self)
    def setTextSelectionColour(self, *args): return _Myoushu.Edit_setTextSelectionColour(self, *args)
    def setTextCursor(self, *args): return _Myoushu.Edit_setTextCursor(self, *args)
    def getTextCursor(self): return _Myoushu.Edit_getTextCursor(self)
    def setCaption(self, *args): return _Myoushu.Edit_setCaption(self, *args)
    def getCaption(self): return _Myoushu.Edit_getCaption(self)
    def setOnlyText(self, *args): return _Myoushu.Edit_setOnlyText(self, *args)
    def getOnlyText(self): return _Myoushu.Edit_getOnlyText(self)
    def getTextLength(self): return _Myoushu.Edit_getTextLength(self)
    def setOverflowToTheLeft(self, *args): return _Myoushu.Edit_setOverflowToTheLeft(self, *args)
    def getOverflowToTheLeft(self): return _Myoushu.Edit_getOverflowToTheLeft(self)
    def setMaxTextLength(self, *args): return _Myoushu.Edit_setMaxTextLength(self, *args)
    def getMaxTextLength(self): return _Myoushu.Edit_getMaxTextLength(self)
    def insertText(self, *args): return _Myoushu.Edit_insertText(self, *args)
    def addText(self, *args): return _Myoushu.Edit_addText(self, *args)
    def eraseText(self, *args): return _Myoushu.Edit_eraseText(self, *args)
    def setEditReadOnly(self, *args): return _Myoushu.Edit_setEditReadOnly(self, *args)
    def getEditReadOnly(self): return _Myoushu.Edit_getEditReadOnly(self)
    def setEditPassword(self, *args): return _Myoushu.Edit_setEditPassword(self, *args)
    def getEditPassword(self): return _Myoushu.Edit_getEditPassword(self)
    def setEditMultiLine(self, *args): return _Myoushu.Edit_setEditMultiLine(self, *args)
    def getEditMultiLine(self): return _Myoushu.Edit_getEditMultiLine(self)
    def setEditStatic(self, *args): return _Myoushu.Edit_setEditStatic(self, *args)
    def getEditStatic(self): return _Myoushu.Edit_getEditStatic(self)
    def setPasswordChar(self, *args): return _Myoushu.Edit_setPasswordChar(self, *args)
    def getPasswordChar(self): return _Myoushu.Edit_getPasswordChar(self)
    def setEditWordWrap(self, *args): return _Myoushu.Edit_setEditWordWrap(self, *args)
    def getEditWordWrap(self): return _Myoushu.Edit_getEditWordWrap(self)
    def setTabPrinting(self, *args): return _Myoushu.Edit_setTabPrinting(self, *args)
    def getTabPrinting(self): return _Myoushu.Edit_getTabPrinting(self)
    def setSize(self, *args): return _Myoushu.Edit_setSize(self, *args)
    def setCoord(self, *args): return _Myoushu.Edit_setCoord(self, *args)
    def setVisibleVScroll(self, *args): return _Myoushu.Edit_setVisibleVScroll(self, *args)
    def isVisibleVScroll(self): return _Myoushu.Edit_isVisibleVScroll(self)
    def setVisibleHScroll(self, *args): return _Myoushu.Edit_setVisibleHScroll(self, *args)
    def isVisibleHScroll(self): return _Myoushu.Edit_isVisibleHScroll(self)
    def setFontName(self, *args): return _Myoushu.Edit_setFontName(self, *args)
    def setFontHeight(self, *args): return _Myoushu.Edit_setFontHeight(self, *args)
    def setTextAlign(self, *args): return _Myoushu.Edit_setTextAlign(self, *args)
    def setProperty(self, *args): return _Myoushu.Edit_setProperty(self, *args)
    __swig_setmethods__["eventEditSelectAccept"] = _Myoushu.Edit_eventEditSelectAccept_set
    __swig_getmethods__["eventEditSelectAccept"] = _Myoushu.Edit_eventEditSelectAccept_get
    if _newclass:eventEditSelectAccept = _swig_property(_Myoushu.Edit_eventEditSelectAccept_get, _Myoushu.Edit_eventEditSelectAccept_set)
    __swig_setmethods__["eventEditTextChange"] = _Myoushu.Edit_eventEditTextChange_set
    __swig_getmethods__["eventEditTextChange"] = _Myoushu.Edit_eventEditTextChange_get
    if _newclass:eventEditTextChange = _swig_property(_Myoushu.Edit_eventEditTextChange_get, _Myoushu.Edit_eventEditTextChange_set)
    def _initialise(self, *args): return _Myoushu.Edit__initialise(self, *args)
    def showVScroll(self, *args): return _Myoushu.Edit_showVScroll(self, *args)
    def isShowVScroll(self): return _Myoushu.Edit_isShowVScroll(self)
    def showHScroll(self, *args): return _Myoushu.Edit_showHScroll(self, *args)
    def isShowHScroll(self): return _Myoushu.Edit_isShowHScroll(self)
    def setPosition(self, *args): return _Myoushu.Edit_setPosition(self, *args)
    def setTextColour(self, *args): return _Myoushu.Edit_setTextColour(self, *args)
    def getText(self, *args): return _Myoushu.Edit_getText(self, *args)
    def setTextSelect(self, *args): return _Myoushu.Edit_setTextSelect(self, *args)
    def deleteTextSelect(self): return _Myoushu.Edit_deleteTextSelect(self)
    def getSelectedText(self): return _Myoushu.Edit_getSelectedText(self)
    def isTextSelect(self): return _Myoushu.Edit_isTextSelect(self)
    def setTextSelectColour(self, *args): return _Myoushu.Edit_setTextSelectColour(self, *args)
Edit_swigregister = _Myoushu.Edit_swigregister
Edit_swigregister(Edit)

class Button(StaticText):
    __swig_setmethods__ = {}
    for _s in [StaticText]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Button, name, value)
    __swig_getmethods__ = {}
    for _s in [StaticText]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Button, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Button()
        try: self.this.append(this)
        except: self.this = this
    def setButtonPressed(self, *args): return _Myoushu.Button_setButtonPressed(self, *args)
    def getButtonPressed(self): return _Myoushu.Button_getButtonPressed(self)
    def setStateCheck(self, *args): return _Myoushu.Button_setStateCheck(self, *args)
    def getStateCheck(self): return _Myoushu.Button_getStateCheck(self)
    def setImageIndex(self, *args): return _Myoushu.Button_setImageIndex(self, *args)
    def getImageIndex(self): return _Myoushu.Button_getImageIndex(self)
    def setEnabled(self, *args): return _Myoushu.Button_setEnabled(self, *args)
    def setProperty(self, *args): return _Myoushu.Button_setProperty(self, *args)
    def _initialise(self, *args): return _Myoushu.Button__initialise(self, *args)
    def _setMouseFocus(self, *args): return _Myoushu.Button__setMouseFocus(self, *args)
Button_swigregister = _Myoushu.Button_swigregister
Button_swigregister(Button)

class Progress(Widget):
    __swig_setmethods__ = {}
    for _s in [Widget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Progress, name, value)
    __swig_getmethods__ = {}
    for _s in [Widget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Progress, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Progress()
        try: self.this.append(this)
        except: self.this = this
    def setProgressRange(self, *args): return _Myoushu.Progress_setProgressRange(self, *args)
    def getProgressRange(self): return _Myoushu.Progress_getProgressRange(self)
    def setProgressPosition(self, *args): return _Myoushu.Progress_setProgressPosition(self, *args)
    def getProgressPosition(self): return _Myoushu.Progress_getProgressPosition(self)
    def setProgressAutoTrack(self, *args): return _Myoushu.Progress_setProgressAutoTrack(self, *args)
    def getProgressAutoTrack(self): return _Myoushu.Progress_getProgressAutoTrack(self)
    def setProgressStartPoint(self, *args): return _Myoushu.Progress_setProgressStartPoint(self, *args)
    def getProgressStartPoint(self): return _Myoushu.Progress_getProgressStartPoint(self)
    def setSize(self, *args): return _Myoushu.Progress_setSize(self, *args)
    def setCoord(self, *args): return _Myoushu.Progress_setCoord(self, *args)
    def setProperty(self, *args): return _Myoushu.Progress_setProperty(self, *args)
    def setPosition(self, *args): return _Myoushu.Progress_setPosition(self, *args)
    def _initialise(self, *args): return _Myoushu.Progress__initialise(self, *args)
Progress_swigregister = _Myoushu.Progress_swigregister
Progress_swigregister(Progress)

class List(Widget):
    __swig_setmethods__ = {}
    for _s in [Widget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, List, name, value)
    __swig_getmethods__ = {}
    for _s in [Widget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, List, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_List()
        try: self.this.append(this)
        except: self.this = this
    def getItemCount(self): return _Myoushu.List_getItemCount(self)
    def insertItemAt(self, *args): return _Myoushu.List_insertItemAt(self, *args)
    def addItem(self, *args): return _Myoushu.List_addItem(self, *args)
    def removeItemAt(self, *args): return _Myoushu.List_removeItemAt(self, *args)
    def removeAllItems(self): return _Myoushu.List_removeAllItems(self)
    def swapItemsAt(self, *args): return _Myoushu.List_swapItemsAt(self, *args)
    def findItemIndexWith(self, *args): return _Myoushu.List_findItemIndexWith(self, *args)
    def getIndexSelected(self): return _Myoushu.List_getIndexSelected(self)
    def setIndexSelected(self, *args): return _Myoushu.List_setIndexSelected(self, *args)
    def clearIndexSelected(self): return _Myoushu.List_clearIndexSelected(self)
    def setItemDataAt(self, *args): return _Myoushu.List_setItemDataAt(self, *args)
    def clearItemDataAt(self, *args): return _Myoushu.List_clearItemDataAt(self, *args)
    def setItemNameAt(self, *args): return _Myoushu.List_setItemNameAt(self, *args)
    def getItemNameAt(self, *args): return _Myoushu.List_getItemNameAt(self, *args)
    def beginToItemAt(self, *args): return _Myoushu.List_beginToItemAt(self, *args)
    def beginToItemFirst(self): return _Myoushu.List_beginToItemFirst(self)
    def beginToItemLast(self): return _Myoushu.List_beginToItemLast(self)
    def beginToItemSelected(self): return _Myoushu.List_beginToItemSelected(self)
    def isItemVisibleAt(self, *args): return _Myoushu.List_isItemVisibleAt(self, *args)
    def isItemSelectedVisible(self, _fill = True): return _Myoushu.List_isItemSelectedVisible(self, _fill)
    def setScrollVisible(self, *args): return _Myoushu.List_setScrollVisible(self, *args)
    def setScrollPosition(self, *args): return _Myoushu.List_setScrollPosition(self, *args)
    def setSize(self, *args): return _Myoushu.List_setSize(self, *args)
    def setCoord(self, *args): return _Myoushu.List_setCoord(self, *args)
    def getOptimalHeight(self): return _Myoushu.List_getOptimalHeight(self)
    def setProperty(self, *args): return _Myoushu.List_setProperty(self, *args)
    __swig_setmethods__["eventListSelectAccept"] = _Myoushu.List_eventListSelectAccept_set
    __swig_getmethods__["eventListSelectAccept"] = _Myoushu.List_eventListSelectAccept_get
    if _newclass:eventListSelectAccept = _swig_property(_Myoushu.List_eventListSelectAccept_get, _Myoushu.List_eventListSelectAccept_set)
    __swig_setmethods__["eventListChangePosition"] = _Myoushu.List_eventListChangePosition_set
    __swig_getmethods__["eventListChangePosition"] = _Myoushu.List_eventListChangePosition_get
    if _newclass:eventListChangePosition = _swig_property(_Myoushu.List_eventListChangePosition_get, _Myoushu.List_eventListChangePosition_set)
    __swig_setmethods__["eventListMouseItemActivate"] = _Myoushu.List_eventListMouseItemActivate_set
    __swig_getmethods__["eventListMouseItemActivate"] = _Myoushu.List_eventListMouseItemActivate_get
    if _newclass:eventListMouseItemActivate = _swig_property(_Myoushu.List_eventListMouseItemActivate_get, _Myoushu.List_eventListMouseItemActivate_set)
    __swig_setmethods__["eventListMouseItemFocus"] = _Myoushu.List_eventListMouseItemFocus_set
    __swig_getmethods__["eventListMouseItemFocus"] = _Myoushu.List_eventListMouseItemFocus_get
    if _newclass:eventListMouseItemFocus = _swig_property(_Myoushu.List_eventListMouseItemFocus_get, _Myoushu.List_eventListMouseItemFocus_set)
    __swig_setmethods__["eventListChangeScroll"] = _Myoushu.List_eventListChangeScroll_set
    __swig_getmethods__["eventListChangeScroll"] = _Myoushu.List_eventListChangeScroll_get
    if _newclass:eventListChangeScroll = _swig_property(_Myoushu.List_eventListChangeScroll_get, _Myoushu.List_eventListChangeScroll_set)
    def _checkAlign(self): return _Myoushu.List__checkAlign(self)
    def _setItemFocus(self, *args): return _Myoushu.List__setItemFocus(self, *args)
    def _sendEventChangeScroll(self, *args): return _Myoushu.List__sendEventChangeScroll(self, *args)
    def _initialise(self, *args): return _Myoushu.List__initialise(self, *args)
    def setPosition(self, *args): return _Myoushu.List_setPosition(self, *args)
    def getItemIndexSelected(self): return _Myoushu.List_getItemIndexSelected(self)
    def setItemSelectedAt(self, *args): return _Myoushu.List_setItemSelectedAt(self, *args)
    def clearItemSelected(self): return _Myoushu.List_clearItemSelected(self)
    def insertItem(self, *args): return _Myoushu.List_insertItem(self, *args)
    def setItem(self, *args): return _Myoushu.List_setItem(self, *args)
    def getItem(self, *args): return _Myoushu.List_getItem(self, *args)
    def deleteItem(self, *args): return _Myoushu.List_deleteItem(self, *args)
    def deleteAllItems(self): return _Myoushu.List_deleteAllItems(self)
    def findItem(self, *args): return _Myoushu.List_findItem(self, *args)
    def getItemSelect(self): return _Myoushu.List_getItemSelect(self)
    def resetItemSelect(self): return _Myoushu.List_resetItemSelect(self)
    def setItemSelect(self, *args): return _Myoushu.List_setItemSelect(self, *args)
    def beginToIndex(self, *args): return _Myoushu.List_beginToIndex(self, *args)
    def beginToStart(self): return _Myoushu.List_beginToStart(self)
    def beginToEnd(self): return _Myoushu.List_beginToEnd(self)
    def beginToSelect(self): return _Myoushu.List_beginToSelect(self)
    def isItemVisible(self, *args): return _Myoushu.List_isItemVisible(self, *args)
    def isItemSelectVisible(self, _fill = True): return _Myoushu.List_isItemSelectVisible(self, _fill)
List_swigregister = _Myoushu.List_swigregister
List_swigregister(List)

class MultiList(Widget):
    __swig_setmethods__ = {}
    for _s in [Widget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiList, name, value)
    __swig_getmethods__ = {}
    for _s in [Widget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiList, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_MultiList()
        try: self.this.append(this)
        except: self.this = this
    def getColumnCount(self): return _Myoushu.MultiList_getColumnCount(self)
    def insertColumnAt(self, *args): return _Myoushu.MultiList_insertColumnAt(self, *args)
    def removeColumnAt(self, *args): return _Myoushu.MultiList_removeColumnAt(self, *args)
    def removeAllColumns(self): return _Myoushu.MultiList_removeAllColumns(self)
    def setColumnNameAt(self, *args): return _Myoushu.MultiList_setColumnNameAt(self, *args)
    def setColumnWidthAt(self, *args): return _Myoushu.MultiList_setColumnWidthAt(self, *args)
    def getColumnNameAt(self, *args): return _Myoushu.MultiList_getColumnNameAt(self, *args)
    def getColumnWidthAt(self, *args): return _Myoushu.MultiList_getColumnWidthAt(self, *args)
    def sortByColumn(self, *args): return _Myoushu.MultiList_sortByColumn(self, *args)
    def setColumnDataAt(self, *args): return _Myoushu.MultiList_setColumnDataAt(self, *args)
    def clearColumnDataAt(self, *args): return _Myoushu.MultiList_clearColumnDataAt(self, *args)
    def getItemCount(self): return _Myoushu.MultiList_getItemCount(self)
    def insertItemAt(self, *args): return _Myoushu.MultiList_insertItemAt(self, *args)
    def addItem(self, *args): return _Myoushu.MultiList_addItem(self, *args)
    def removeItemAt(self, *args): return _Myoushu.MultiList_removeItemAt(self, *args)
    def removeAllItems(self): return _Myoushu.MultiList_removeAllItems(self)
    def swapItemsAt(self, *args): return _Myoushu.MultiList_swapItemsAt(self, *args)
    def setItemNameAt(self, *args): return _Myoushu.MultiList_setItemNameAt(self, *args)
    def getItemNameAt(self, *args): return _Myoushu.MultiList_getItemNameAt(self, *args)
    def getIndexSelected(self): return _Myoushu.MultiList_getIndexSelected(self)
    def setIndexSelected(self, *args): return _Myoushu.MultiList_setIndexSelected(self, *args)
    def clearIndexSelected(self): return _Myoushu.MultiList_clearIndexSelected(self)
    def setItemDataAt(self, *args): return _Myoushu.MultiList_setItemDataAt(self, *args)
    def clearItemDataAt(self, *args): return _Myoushu.MultiList_clearItemDataAt(self, *args)
    def setSubItemNameAt(self, *args): return _Myoushu.MultiList_setSubItemNameAt(self, *args)
    def getSubItemNameAt(self, *args): return _Myoushu.MultiList_getSubItemNameAt(self, *args)
    def findSubItemWith(self, *args): return _Myoushu.MultiList_findSubItemWith(self, *args)
    def setSubItemDataAt(self, *args): return _Myoushu.MultiList_setSubItemDataAt(self, *args)
    def clearSubItemDataAt(self, *args): return _Myoushu.MultiList_clearSubItemDataAt(self, *args)
    def _initialise(self, *args): return _Myoushu.MultiList__initialise(self, *args)
    __swig_setmethods__["eventListSelectAccept"] = _Myoushu.MultiList_eventListSelectAccept_set
    __swig_getmethods__["eventListSelectAccept"] = _Myoushu.MultiList_eventListSelectAccept_get
    if _newclass:eventListSelectAccept = _swig_property(_Myoushu.MultiList_eventListSelectAccept_get, _Myoushu.MultiList_eventListSelectAccept_set)
    __swig_setmethods__["eventListChangePosition"] = _Myoushu.MultiList_eventListChangePosition_set
    __swig_getmethods__["eventListChangePosition"] = _Myoushu.MultiList_eventListChangePosition_get
    if _newclass:eventListChangePosition = _swig_property(_Myoushu.MultiList_eventListChangePosition_get, _Myoushu.MultiList_eventListChangePosition_set)
    __swig_setmethods__["requestOperatorLess"] = _Myoushu.MultiList_requestOperatorLess_set
    __swig_getmethods__["requestOperatorLess"] = _Myoushu.MultiList_requestOperatorLess_get
    if _newclass:requestOperatorLess = _swig_property(_Myoushu.MultiList_requestOperatorLess_get, _Myoushu.MultiList_requestOperatorLess_set)
    def getItemIndexSelected(self): return _Myoushu.MultiList_getItemIndexSelected(self)
    def setItemSelectedAt(self, *args): return _Myoushu.MultiList_setItemSelectedAt(self, *args)
    def clearItemSelected(self): return _Myoushu.MultiList_clearItemSelected(self)
    def findItem(self, *args): return _Myoushu.MultiList_findItem(self, *args)
    def getSubItem(self, *args): return _Myoushu.MultiList_getSubItem(self, *args)
    def setSubItem(self, *args): return _Myoushu.MultiList_setSubItem(self, *args)
    def deleteColumn(self, *args): return _Myoushu.MultiList_deleteColumn(self, *args)
    def deleteAllColumns(self): return _Myoushu.MultiList_deleteAllColumns(self)
    def getColumnWidth(self, *args): return _Myoushu.MultiList_getColumnWidth(self, *args)
    def getColumnName(self, *args): return _Myoushu.MultiList_getColumnName(self, *args)
    def setColumnWidth(self, *args): return _Myoushu.MultiList_setColumnWidth(self, *args)
    def addColumn(self, *args): return _Myoushu.MultiList_addColumn(self, *args)
    def setColumnName(self, *args): return _Myoushu.MultiList_setColumnName(self, *args)
    def insertColumn(self, *args): return _Myoushu.MultiList_insertColumn(self, *args)
    def getItemSelect(self): return _Myoushu.MultiList_getItemSelect(self)
    def resetItemSelect(self): return _Myoushu.MultiList_resetItemSelect(self)
    def setItemSelect(self, *args): return _Myoushu.MultiList_setItemSelect(self, *args)
    def insertItem(self, *args): return _Myoushu.MultiList_insertItem(self, *args)
    def setItem(self, *args): return _Myoushu.MultiList_setItem(self, *args)
    def getItem(self, *args): return _Myoushu.MultiList_getItem(self, *args)
    def deleteItem(self, *args): return _Myoushu.MultiList_deleteItem(self, *args)
    def deleteAllItems(self): return _Myoushu.MultiList_deleteAllItems(self)
MultiList_swigregister = _Myoushu.MultiList_swigregister
MultiList_swigregister(MultiList)

class ComboBox(Edit):
    __swig_setmethods__ = {}
    for _s in [Edit]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComboBox, name, value)
    __swig_getmethods__ = {}
    for _s in [Edit]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComboBox, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_ComboBox()
        try: self.this.append(this)
        except: self.this = this
    def getItemCount(self): return _Myoushu.ComboBox_getItemCount(self)
    def insertItemAt(self, *args): return _Myoushu.ComboBox_insertItemAt(self, *args)
    def addItem(self, *args): return _Myoushu.ComboBox_addItem(self, *args)
    def removeItemAt(self, *args): return _Myoushu.ComboBox_removeItemAt(self, *args)
    def removeAllItems(self): return _Myoushu.ComboBox_removeAllItems(self)
    def findItemIndexWith(self, *args): return _Myoushu.ComboBox_findItemIndexWith(self, *args)
    def getIndexSelected(self): return _Myoushu.ComboBox_getIndexSelected(self)
    def setIndexSelected(self, *args): return _Myoushu.ComboBox_setIndexSelected(self, *args)
    def clearIndexSelected(self): return _Myoushu.ComboBox_clearIndexSelected(self)
    def setItemDataAt(self, *args): return _Myoushu.ComboBox_setItemDataAt(self, *args)
    def clearItemDataAt(self, *args): return _Myoushu.ComboBox_clearItemDataAt(self, *args)
    def setItemNameAt(self, *args): return _Myoushu.ComboBox_setItemNameAt(self, *args)
    def getItemNameAt(self, *args): return _Myoushu.ComboBox_getItemNameAt(self, *args)
    def beginToItemAt(self, *args): return _Myoushu.ComboBox_beginToItemAt(self, *args)
    def beginToItemFirst(self): return _Myoushu.ComboBox_beginToItemFirst(self)
    def beginToItemLast(self): return _Myoushu.ComboBox_beginToItemLast(self)
    def beginToItemSelected(self): return _Myoushu.ComboBox_beginToItemSelected(self)
    def setComboModeDrop(self, *args): return _Myoushu.ComboBox_setComboModeDrop(self, *args)
    def getComboModeDrop(self): return _Myoushu.ComboBox_getComboModeDrop(self)
    def setSmoothShow(self, *args): return _Myoushu.ComboBox_setSmoothShow(self, *args)
    def getSmoothShow(self): return _Myoushu.ComboBox_getSmoothShow(self)
    def setMaxListHeight(self, *args): return _Myoushu.ComboBox_setMaxListHeight(self, *args)
    def getMaxListHeight(self): return _Myoushu.ComboBox_getMaxListHeight(self)
    def setProperty(self, *args): return _Myoushu.ComboBox_setProperty(self, *args)
    __swig_setmethods__["eventComboAccept"] = _Myoushu.ComboBox_eventComboAccept_set
    __swig_getmethods__["eventComboAccept"] = _Myoushu.ComboBox_eventComboAccept_get
    if _newclass:eventComboAccept = _swig_property(_Myoushu.ComboBox_eventComboAccept_get, _Myoushu.ComboBox_eventComboAccept_set)
    __swig_setmethods__["eventComboChangePosition"] = _Myoushu.ComboBox_eventComboChangePosition_set
    __swig_getmethods__["eventComboChangePosition"] = _Myoushu.ComboBox_eventComboChangePosition_get
    if _newclass:eventComboChangePosition = _swig_property(_Myoushu.ComboBox_eventComboChangePosition_get, _Myoushu.ComboBox_eventComboChangePosition_set)
    def _initialise(self, *args): return _Myoushu.ComboBox__initialise(self, *args)
    def getItemIndexSelected(self): return _Myoushu.ComboBox_getItemIndexSelected(self)
    def setItemSelectedAt(self, *args): return _Myoushu.ComboBox_setItemSelectedAt(self, *args)
    def clearItemSelected(self): return _Myoushu.ComboBox_clearItemSelected(self)
    def insertItem(self, *args): return _Myoushu.ComboBox_insertItem(self, *args)
    def setItem(self, *args): return _Myoushu.ComboBox_setItem(self, *args)
    def getItem(self, *args): return _Myoushu.ComboBox_getItem(self, *args)
    def deleteItem(self, *args): return _Myoushu.ComboBox_deleteItem(self, *args)
    def deleteAllItems(self): return _Myoushu.ComboBox_deleteAllItems(self)
    def getItemSelect(self): return _Myoushu.ComboBox_getItemSelect(self)
    def resetItemSelect(self): return _Myoushu.ComboBox_resetItemSelect(self)
    def setItemSelect(self, *args): return _Myoushu.ComboBox_setItemSelect(self, *args)
ComboBox_swigregister = _Myoushu.ComboBox_swigregister
ComboBox_swigregister(ComboBox)

NULL = _Myoushu.NULL
class Exception(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Exception, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Exception, name)
    __repr__ = _swig_repr
    E_GENERAL_EXCEPTION = _Myoushu.Exception_E_GENERAL_EXCEPTION
    E_STD_EXCEPTION = _Myoushu.Exception_E_STD_EXCEPTION
    E_OGRE_EXCEPTION = _Myoushu.Exception_E_OGRE_EXCEPTION
    E_POCO_EXCEPTION = _Myoushu.Exception_E_POCO_EXCEPTION
    E_OIS_EXCEPTION = _Myoushu.Exception_E_OIS_EXCEPTION
    E_MYGUI_EXCEPTION = _Myoushu.Exception_E_MYGUI_EXCEPTION
    E_LUA_ERROR = _Myoushu.Exception_E_LUA_ERROR
    E_NULL_POINTER = _Myoushu.Exception_E_NULL_POINTER
    E_FILE_NOT_FOUND = _Myoushu.Exception_E_FILE_NOT_FOUND
    E_FILE_NOT_OPEN = _Myoushu.Exception_E_FILE_NOT_OPEN
    E_ENUM_TYPE_UNKNOWN = _Myoushu.Exception_E_ENUM_TYPE_UNKNOWN
    E_UNEXPECTED_TYPE = _Myoushu.Exception_E_UNEXPECTED_TYPE
    E_INVALID_PARAMETERS = _Myoushu.Exception_E_INVALID_PARAMETERS
    E_INDEX_OUT_OF_BOUNDS = _Myoushu.Exception_E_INDEX_OUT_OF_BOUNDS
    E_NO_SUCH_ELEMENT = _Myoushu.Exception_E_NO_SUCH_ELEMENT
    E_CAST_EXCEPTION = _Myoushu.Exception_E_CAST_EXCEPTION
    E_BUFFER_TOO_SMALL = _Myoushu.Exception_E_BUFFER_TOO_SMALL
    E_UNIMPLEMENTED = _Myoushu.Exception_E_UNIMPLEMENTED
    E_DEPRECATED = _Myoushu.Exception_E_DEPRECATED
    E_UNKNOWN_HOST = _Myoushu.Exception_E_UNKNOWN_HOST
    E_UNKNOWN_ERROR = _Myoushu.Exception_E_UNKNOWN_ERROR
    E_PARSE_ERROR = _Myoushu.Exception_E_PARSE_ERROR
    def __init__(self, *args): 
        this = _Myoushu.new_Exception(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Exception
    __del__ = lambda self : None;
    def getMsg(self): return _Myoushu.Exception_getMsg(self)
    def getExceptionType(self): return _Myoushu.Exception_getExceptionType(self)
    def what(self): return _Myoushu.Exception_what(self)
Exception_swigregister = _Myoushu.Exception_swigregister
Exception_swigregister(Exception)

class Serializable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Serializable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Serializable, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ST_NETWORK = _Myoushu.Serializable_ST_NETWORK
    ST_UNKNOWN = _Myoushu.Serializable_ST_UNKNOWN
    def serialize(self, *args): return _Myoushu.Serializable_serialize(self, *args)
    def populateInstance(self, *args): return _Myoushu.Serializable_populateInstance(self, *args)
    __swig_destroy__ = _Myoushu.delete_Serializable
    __del__ = lambda self : None;
Serializable_swigregister = _Myoushu.Serializable_swigregister
Serializable_swigregister(Serializable)

class NamedInstance(Serializable):
    __swig_setmethods__ = {}
    for _s in [Serializable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedInstance, name, value)
    __swig_getmethods__ = {}
    for _s in [Serializable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedInstance, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_NamedInstance(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_NamedInstance
    __del__ = lambda self : None;
    def getName(self): return _Myoushu.NamedInstance_getName(self)
    def serialize(self, *args): return _Myoushu.NamedInstance_serialize(self, *args)
    def populateInstance(self, *args): return _Myoushu.NamedInstance_populateInstance(self, *args)
NamedInstance_swigregister = _Myoushu.NamedInstance_swigregister
NamedInstance_swigregister(NamedInstance)

class Constants(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Constants, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Constants, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Constants()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Constants
    __del__ = lambda self : None;
Constants_swigregister = _Myoushu.Constants_swigregister
Constants_swigregister(Constants)
Constants.AUTHOR = _Myoushu.cvar.Constants_AUTHOR
Constants.VER_MAJOR = _Myoushu.cvar.Constants_VER_MAJOR
Constants.VER_MINOR = _Myoushu.cvar.Constants_VER_MINOR
Constants.APPLICATION_TITLE = _Myoushu.cvar.Constants_APPLICATION_TITLE
Constants.LOG_FILENAME = _Myoushu.cvar.Constants_LOG_FILENAME
Constants.CONFIG_FILES_PATH = _Myoushu.cvar.Constants_CONFIG_FILES_PATH
Constants.VIDEO_CONFIG_FILENAME = _Myoushu.cvar.Constants_VIDEO_CONFIG_FILENAME
Constants.INPUT_CONFIG_FILENAME = _Myoushu.cvar.Constants_INPUT_CONFIG_FILENAME
Constants.RESOURCES_CONFIG_FILENAME = _Myoushu.cvar.Constants_RESOURCES_CONFIG_FILENAME
Constants.HELPERS_SCRIPT = _Myoushu.cvar.Constants_HELPERS_SCRIPT
Constants.GUI_INIT_SCRIPT_FILENAME = _Myoushu.cvar.Constants_GUI_INIT_SCRIPT_FILENAME
Constants.RG_CONFIGFILES = _Myoushu.cvar.Constants_RG_CONFIGFILES
Constants.RG_GUI = _Myoushu.cvar.Constants_RG_GUI
Constants.RG_TEXTFILES = _Myoushu.cvar.Constants_RG_TEXTFILES
Constants.RG_TEXTURES = _Myoushu.cvar.Constants_RG_TEXTURES
Constants.RG_MODELS = _Myoushu.cvar.Constants_RG_MODELS
Constants.RG_SHADERS = _Myoushu.cvar.Constants_RG_SHADERS
Constants.RG_SCRIPTS = _Myoushu.cvar.Constants_RG_SCRIPTS
Constants.RG_REPLAYS = _Myoushu.cvar.Constants_RG_REPLAYS
Constants.RG_FONTS = _Myoushu.cvar.Constants_RG_FONTS
Constants.RG_COLLISION_MESH = _Myoushu.cvar.Constants_RG_COLLISION_MESH
Constants.MAIN_RENDER_TARGET = _Myoushu.cvar.Constants_MAIN_RENDER_TARGET
Constants.INPUT_ACTION_CONSOLE = _Myoushu.cvar.Constants_INPUT_ACTION_CONSOLE
Constants.DEFAULT_CAMERA = _Myoushu.cvar.Constants_DEFAULT_CAMERA
Constants.DEFAULT_SCENE_MANAGER = _Myoushu.cvar.Constants_DEFAULT_SCENE_MANAGER
Constants.TIMER_TASK_PRIORITY = _Myoushu.cvar.Constants_TIMER_TASK_PRIORITY
Constants.TIMER_TASK_EXECUTION_INTERVAL = _Myoushu.cvar.Constants_TIMER_TASK_EXECUTION_INTERVAL
Constants.TIMER_TASK_ITERATION_LIMIT = _Myoushu.cvar.Constants_TIMER_TASK_ITERATION_LIMIT
Constants.TIMER_TASK_NAME = _Myoushu.cvar.Constants_TIMER_TASK_NAME
Constants.PHYSICS_TASK_PRIORITY = _Myoushu.cvar.Constants_PHYSICS_TASK_PRIORITY
Constants.PHYSICS_TASK_EXECUTION_INTERVAL = _Myoushu.cvar.Constants_PHYSICS_TASK_EXECUTION_INTERVAL
Constants.PHYSICS_TASK_ITERATION_LIMIT = _Myoushu.cvar.Constants_PHYSICS_TASK_ITERATION_LIMIT
Constants.PHYSICS_TASK_NAME = _Myoushu.cvar.Constants_PHYSICS_TASK_NAME
Constants.INPUT_TASK_PRIORITY = _Myoushu.cvar.Constants_INPUT_TASK_PRIORITY
Constants.INPUT_TASK_EXECUTION_INTERVAL = _Myoushu.cvar.Constants_INPUT_TASK_EXECUTION_INTERVAL
Constants.INPUT_TASK_ITERATION_LIMIT = _Myoushu.cvar.Constants_INPUT_TASK_ITERATION_LIMIT
Constants.INPUT_TASK_NAME = _Myoushu.cvar.Constants_INPUT_TASK_NAME
Constants.INPUT_ACTION_TASK_PRIORITY = _Myoushu.cvar.Constants_INPUT_ACTION_TASK_PRIORITY
Constants.INPUT_ACTION_TASK_EXECUTION_INTERVAL = _Myoushu.cvar.Constants_INPUT_ACTION_TASK_EXECUTION_INTERVAL
Constants.INPUT_ACTION_TASK_ITERATION_LIMIT = _Myoushu.cvar.Constants_INPUT_ACTION_TASK_ITERATION_LIMIT
Constants.INPUT_ACTION_TASK_NAME = _Myoushu.cvar.Constants_INPUT_ACTION_TASK_NAME
Constants.CONTROLLER_TASK_PRIORITY = _Myoushu.cvar.Constants_CONTROLLER_TASK_PRIORITY
Constants.CONTROLLER_TASK_EXECUTION_INTERVAL = _Myoushu.cvar.Constants_CONTROLLER_TASK_EXECUTION_INTERVAL
Constants.CONTROLLER_TASK_ITERATION_LIMIT = _Myoushu.cvar.Constants_CONTROLLER_TASK_ITERATION_LIMIT
Constants.CONTROLLER_TASK_NAME = _Myoushu.cvar.Constants_CONTROLLER_TASK_NAME
Constants.SCRIPT_TASK_PRIORITY = _Myoushu.cvar.Constants_SCRIPT_TASK_PRIORITY
Constants.SCRIPT_TASK_EXECUTION_INTERVAL = _Myoushu.cvar.Constants_SCRIPT_TASK_EXECUTION_INTERVAL
Constants.SCRIPT_TASK_ITERATION_LIMIT = _Myoushu.cvar.Constants_SCRIPT_TASK_ITERATION_LIMIT
Constants.SCRIPT_TASK_NAME = _Myoushu.cvar.Constants_SCRIPT_TASK_NAME
Constants.GAME_TASK_PRIORITY = _Myoushu.cvar.Constants_GAME_TASK_PRIORITY
Constants.GAME_TASK_EXECUTION_INTERVAL = _Myoushu.cvar.Constants_GAME_TASK_EXECUTION_INTERVAL
Constants.GAME_TASK_ITERATION_LIMIT = _Myoushu.cvar.Constants_GAME_TASK_ITERATION_LIMIT
Constants.GAME_TASK_NAME = _Myoushu.cvar.Constants_GAME_TASK_NAME
Constants.GUI_TASK_PRIORITY = _Myoushu.cvar.Constants_GUI_TASK_PRIORITY
Constants.GUI_TASK_EXECUTION_INTERVAL = _Myoushu.cvar.Constants_GUI_TASK_EXECUTION_INTERVAL
Constants.GUI_TASK_ITERATION_LIMIT = _Myoushu.cvar.Constants_GUI_TASK_ITERATION_LIMIT
Constants.GUI_TASK_NAME = _Myoushu.cvar.Constants_GUI_TASK_NAME
Constants.ANIMATION_TASK_PRIORITY = _Myoushu.cvar.Constants_ANIMATION_TASK_PRIORITY
Constants.ANIMATION_TASK_EXECUTION_INTERVAL = _Myoushu.cvar.Constants_ANIMATION_TASK_EXECUTION_INTERVAL
Constants.ANIMATION_TASK_ITERATION_LIMIT = _Myoushu.cvar.Constants_ANIMATION_TASK_ITERATION_LIMIT
Constants.ANIMATION_TASK_NAME = _Myoushu.cvar.Constants_ANIMATION_TASK_NAME
Constants.VIDEO_TASK_PRIORITY = _Myoushu.cvar.Constants_VIDEO_TASK_PRIORITY
Constants.VIDEO_TASK_EXECUTION_INTERVAL = _Myoushu.cvar.Constants_VIDEO_TASK_EXECUTION_INTERVAL
Constants.VIDEO_TASK_ITERATION_LIMIT = _Myoushu.cvar.Constants_VIDEO_TASK_ITERATION_LIMIT
Constants.VIDEO_TASK_NAME = _Myoushu.cvar.Constants_VIDEO_TASK_NAME
Constants.NETWORK_LISTEN_TASK_PRIORITY = _Myoushu.cvar.Constants_NETWORK_LISTEN_TASK_PRIORITY
Constants.NETWORK_LISTEN_TASK_EXECUTION_INTERVAL = _Myoushu.cvar.Constants_NETWORK_LISTEN_TASK_EXECUTION_INTERVAL
Constants.NETWORK_LISTEN_TASK_ITERATION_LIMIT = _Myoushu.cvar.Constants_NETWORK_LISTEN_TASK_ITERATION_LIMIT
Constants.NETWORK_LISTEN_TASK_NAME = _Myoushu.cvar.Constants_NETWORK_LISTEN_TASK_NAME
Constants.NETWORK_TRANSMIT_TASK_PRIORITY = _Myoushu.cvar.Constants_NETWORK_TRANSMIT_TASK_PRIORITY
Constants.NETWORK_TRANSMIT_TASK_EXECUTION_INTERVAL = _Myoushu.cvar.Constants_NETWORK_TRANSMIT_TASK_EXECUTION_INTERVAL
Constants.NETWORK_TRANSMIT_TASK_ITERATION_LIMIT = _Myoushu.cvar.Constants_NETWORK_TRANSMIT_TASK_ITERATION_LIMIT
Constants.NETWORK_TRANSMIT_TASK_NAME = _Myoushu.cvar.Constants_NETWORK_TRANSMIT_TASK_NAME
Constants.AUDIO_TASK_PRIORITY = _Myoushu.cvar.Constants_AUDIO_TASK_PRIORITY
Constants.AUDIO_TASK_EXECUTION_INTERVAL = _Myoushu.cvar.Constants_AUDIO_TASK_EXECUTION_INTERVAL
Constants.AUDIO_TASK_ITERATION_LIMIT = _Myoushu.cvar.Constants_AUDIO_TASK_ITERATION_LIMIT
Constants.AUDIO_TASK_NAME = _Myoushu.cvar.Constants_AUDIO_TASK_NAME
Constants.GAME_LOG_TASK_PRIORITY = _Myoushu.cvar.Constants_GAME_LOG_TASK_PRIORITY
Constants.GAME_LOG_TASK_EXECUTION_INTERVAL = _Myoushu.cvar.Constants_GAME_LOG_TASK_EXECUTION_INTERVAL
Constants.GAME_LOG_TASK_ITERATION_LIMIT = _Myoushu.cvar.Constants_GAME_LOG_TASK_ITERATION_LIMIT
Constants.GAME_LOG_TASK_NAME = _Myoushu.cvar.Constants_GAME_LOG_TASK_NAME
Constants.REPLAY_TASK_PRIORITY = _Myoushu.cvar.Constants_REPLAY_TASK_PRIORITY
Constants.REPLAY_TASK_EXECUTION_INTERVAL = _Myoushu.cvar.Constants_REPLAY_TASK_EXECUTION_INTERVAL
Constants.REPLAY_TASK_ITERATION_LIMIT = _Myoushu.cvar.Constants_REPLAY_TASK_ITERATION_LIMIT
Constants.REPLAY_TASK_NAME = _Myoushu.cvar.Constants_REPLAY_TASK_NAME
Constants.FPS_OVERLAY_NAME = _Myoushu.cvar.Constants_FPS_OVERLAY_NAME
Constants.TIMER_TASK_MESSAGE_POOL_SIZE = _Myoushu.cvar.Constants_TIMER_TASK_MESSAGE_POOL_SIZE
Constants.INPUT_DEVICE_MESSAGE_POOL_SIZE = _Myoushu.cvar.Constants_INPUT_DEVICE_MESSAGE_POOL_SIZE
Constants.INPUT_MESSAGE_POOL_SIZE = _Myoushu.cvar.Constants_INPUT_MESSAGE_POOL_SIZE
Constants.CONTROLLER_TASK_MESSAGE_POOL_SIZE = _Myoushu.cvar.Constants_CONTROLLER_TASK_MESSAGE_POOL_SIZE
Constants.KERNEL_MESSAGE_POOL_SIZE = _Myoushu.cvar.Constants_KERNEL_MESSAGE_POOL_SIZE
Constants.SCRIPT_MESSAGE_POOL_SIZE = _Myoushu.cvar.Constants_SCRIPT_MESSAGE_POOL_SIZE
Constants.GUI_MESSAGE_POOL_SIZE = _Myoushu.cvar.Constants_GUI_MESSAGE_POOL_SIZE
Constants.ANIMATION_TASK_MESSAGE_POOL_SIZE = _Myoushu.cvar.Constants_ANIMATION_TASK_MESSAGE_POOL_SIZE
Constants.NETWORK_MESSAGE_POOL_SIZE = _Myoushu.cvar.Constants_NETWORK_MESSAGE_POOL_SIZE
Constants.GAME_LOG_MESSAGE_POOL_SIZE = _Myoushu.cvar.Constants_GAME_LOG_MESSAGE_POOL_SIZE
Constants.REPLAY_MESSAGE_POOL_SIZE = _Myoushu.cvar.Constants_REPLAY_MESSAGE_POOL_SIZE
Constants.VIDEO_TASK_MESSAGE_POOL_SIZE = _Myoushu.cvar.Constants_VIDEO_TASK_MESSAGE_POOL_SIZE
Constants.NETWORK_LISTEN_PORT = _Myoushu.cvar.Constants_NETWORK_LISTEN_PORT
Constants.NETWORK_RECEIVE_BUFFER_SIZE = _Myoushu.cvar.Constants_NETWORK_RECEIVE_BUFFER_SIZE
Constants.NETWORK_TRANSMIT_BUFFER_SIZE = _Myoushu.cvar.Constants_NETWORK_TRANSMIT_BUFFER_SIZE
Constants.REPLAY_TASK_BUFFER_SIZE = _Myoushu.cvar.Constants_REPLAY_TASK_BUFFER_SIZE
Constants.MYGUI_EVENT_MOUSE_LOST_FOCUS = _Myoushu.cvar.Constants_MYGUI_EVENT_MOUSE_LOST_FOCUS
Constants.MYGUI_EVENT_MOUSE_SET_FOCUS = _Myoushu.cvar.Constants_MYGUI_EVENT_MOUSE_SET_FOCUS
Constants.MYGUI_EVENT_MOUSE_DRAG = _Myoushu.cvar.Constants_MYGUI_EVENT_MOUSE_DRAG
Constants.MYGUI_EVENT_MOUSE_WHEEL = _Myoushu.cvar.Constants_MYGUI_EVENT_MOUSE_WHEEL
Constants.MYGUI_EVENT_MOUSE_BUTTON_PRESSED = _Myoushu.cvar.Constants_MYGUI_EVENT_MOUSE_BUTTON_PRESSED
Constants.MYGUI_EVENT_MOUSE_BUTTON_RELEASED = _Myoushu.cvar.Constants_MYGUI_EVENT_MOUSE_BUTTON_RELEASED
Constants.MYGUI_EVENT_MOUSE_BUTTON_CLICK = _Myoushu.cvar.Constants_MYGUI_EVENT_MOUSE_BUTTON_CLICK
Constants.MYGUI_EVENT_MOUSE_BUTTON_DOUBLE_CLICK = _Myoushu.cvar.Constants_MYGUI_EVENT_MOUSE_BUTTON_DOUBLE_CLICK
Constants.MYGUI_EVENT_KEY_LOST_FOCUS = _Myoushu.cvar.Constants_MYGUI_EVENT_KEY_LOST_FOCUS
Constants.MYGUI_EVENT_KEY_SET_FOCUS = _Myoushu.cvar.Constants_MYGUI_EVENT_KEY_SET_FOCUS
Constants.MYGUI_EVENT_KEY_BUTTON_PRESSED = _Myoushu.cvar.Constants_MYGUI_EVENT_KEY_BUTTON_PRESSED
Constants.MYGUI_EVENT_KEY_BUTTON_RELEASED = _Myoushu.cvar.Constants_MYGUI_EVENT_KEY_BUTTON_RELEASED
Constants.MYGUI_EVENT_ROOT_MOUSE_CHANGE_FOCUS = _Myoushu.cvar.Constants_MYGUI_EVENT_ROOT_MOUSE_CHANGE_FOCUS
Constants.MYGUI_EVENT_ROOT_KEY_CHANGE_FOCUS = _Myoushu.cvar.Constants_MYGUI_EVENT_ROOT_KEY_CHANGE_FOCUS
Constants.MYGUI_EVENT_ACTION_INFO = _Myoushu.cvar.Constants_MYGUI_EVENT_ACTION_INFO
Constants.MYGUI_REQUEST_GET_DRAG_ITEM_INFO = _Myoushu.cvar.Constants_MYGUI_REQUEST_GET_DRAG_ITEM_INFO
Constants.MYGUI_EVENT_EDIT_SELECT_ACCEPT = _Myoushu.cvar.Constants_MYGUI_EVENT_EDIT_SELECT_ACCEPT
Constants.MYGUI_EVENT_EDIT_TEXT_CHANGE = _Myoushu.cvar.Constants_MYGUI_EVENT_EDIT_TEXT_CHANGE
Constants.MYGUI_EVENT_LIST_SELECT_ACCEPT = _Myoushu.cvar.Constants_MYGUI_EVENT_LIST_SELECT_ACCEPT
Constants.MYGUI_EVENT_LIST_CHANGE_POSITION = _Myoushu.cvar.Constants_MYGUI_EVENT_LIST_CHANGE_POSITION
Constants.MYGUI_EVENT_COMBO_ACCEPT = _Myoushu.cvar.Constants_MYGUI_EVENT_COMBO_ACCEPT
Constants.MYGUI_EVENT_COMBO_CHANGE_POSITION = _Myoushu.cvar.Constants_MYGUI_EVENT_COMBO_CHANGE_POSITION

class Singleton_AnimationManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_AnimationManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_AnimationManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_AnimationManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_AnimationManager
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_AnimationManager_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_AnimationManager_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_AnimationManager_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_AnimationManager_getSingletonPtr)
Singleton_AnimationManager_swigregister = _Myoushu.Singleton_AnimationManager_swigregister
Singleton_AnimationManager_swigregister(Singleton_AnimationManager)

def Singleton_AnimationManager_getSingleton():
  return _Myoushu.Singleton_AnimationManager_getSingleton()
Singleton_AnimationManager_getSingleton = _Myoushu.Singleton_AnimationManager_getSingleton

def Singleton_AnimationManager_getSingletonPtr():
  return _Myoushu.Singleton_AnimationManager_getSingletonPtr()
Singleton_AnimationManager_getSingletonPtr = _Myoushu.Singleton_AnimationManager_getSingletonPtr

class Singleton_Application(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_Application, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_Application, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_Application()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_Application
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_Application_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_Application_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_Application_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_Application_getSingletonPtr)
Singleton_Application_swigregister = _Myoushu.Singleton_Application_swigregister
Singleton_Application_swigregister(Singleton_Application)

def Singleton_Application_getSingleton():
  return _Myoushu.Singleton_Application_getSingleton()
Singleton_Application_getSingleton = _Myoushu.Singleton_Application_getSingleton

def Singleton_Application_getSingletonPtr():
  return _Myoushu.Singleton_Application_getSingletonPtr()
Singleton_Application_getSingletonPtr = _Myoushu.Singleton_Application_getSingletonPtr

class Singleton_Config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_Config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_Config, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_Config()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_Config
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_Config_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_Config_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_Config_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_Config_getSingletonPtr)
Singleton_Config_swigregister = _Myoushu.Singleton_Config_swigregister
Singleton_Config_swigregister(Singleton_Config)

def Singleton_Config_getSingleton():
  return _Myoushu.Singleton_Config_getSingleton()
Singleton_Config_getSingleton = _Myoushu.Singleton_Config_getSingleton

def Singleton_Config_getSingletonPtr():
  return _Myoushu.Singleton_Config_getSingletonPtr()
Singleton_Config_getSingletonPtr = _Myoushu.Singleton_Config_getSingletonPtr

class Singleton_Console(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_Console, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_Console, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_Console()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_Console
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_Console_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_Console_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_Console_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_Console_getSingletonPtr)
Singleton_Console_swigregister = _Myoushu.Singleton_Console_swigregister
Singleton_Console_swigregister(Singleton_Console)

def Singleton_Console_getSingleton():
  return _Myoushu.Singleton_Console_getSingleton()
Singleton_Console_getSingleton = _Myoushu.Singleton_Console_getSingleton

def Singleton_Console_getSingletonPtr():
  return _Myoushu.Singleton_Console_getSingletonPtr()
Singleton_Console_getSingletonPtr = _Myoushu.Singleton_Console_getSingletonPtr

class Singleton_ControllerFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_ControllerFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_ControllerFactory, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_ControllerFactory()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_ControllerFactory
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_ControllerFactory_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_ControllerFactory_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_ControllerFactory_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_ControllerFactory_getSingletonPtr)
Singleton_ControllerFactory_swigregister = _Myoushu.Singleton_ControllerFactory_swigregister
Singleton_ControllerFactory_swigregister(Singleton_ControllerFactory)

def Singleton_ControllerFactory_getSingleton():
  return _Myoushu.Singleton_ControllerFactory_getSingleton()
Singleton_ControllerFactory_getSingleton = _Myoushu.Singleton_ControllerFactory_getSingleton

def Singleton_ControllerFactory_getSingletonPtr():
  return _Myoushu.Singleton_ControllerFactory_getSingletonPtr()
Singleton_ControllerFactory_getSingletonPtr = _Myoushu.Singleton_ControllerFactory_getSingletonPtr

class Singleton_ControllerTaskManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_ControllerTaskManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_ControllerTaskManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_ControllerTaskManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_ControllerTaskManager
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_ControllerTaskManager_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_ControllerTaskManager_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_ControllerTaskManager_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_ControllerTaskManager_getSingletonPtr)
Singleton_ControllerTaskManager_swigregister = _Myoushu.Singleton_ControllerTaskManager_swigregister
Singleton_ControllerTaskManager_swigregister(Singleton_ControllerTaskManager)

def Singleton_ControllerTaskManager_getSingleton():
  return _Myoushu.Singleton_ControllerTaskManager_getSingleton()
Singleton_ControllerTaskManager_getSingleton = _Myoushu.Singleton_ControllerTaskManager_getSingleton

def Singleton_ControllerTaskManager_getSingletonPtr():
  return _Myoushu.Singleton_ControllerTaskManager_getSingletonPtr()
Singleton_ControllerTaskManager_getSingletonPtr = _Myoushu.Singleton_ControllerTaskManager_getSingletonPtr

class Singleton_EngineLog(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_EngineLog, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_EngineLog, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_EngineLog()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_EngineLog
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_EngineLog_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_EngineLog_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_EngineLog_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_EngineLog_getSingletonPtr)
Singleton_EngineLog_swigregister = _Myoushu.Singleton_EngineLog_swigregister
Singleton_EngineLog_swigregister(Singleton_EngineLog)

def Singleton_EngineLog_getSingleton():
  return _Myoushu.Singleton_EngineLog_getSingleton()
Singleton_EngineLog_getSingleton = _Myoushu.Singleton_EngineLog_getSingleton

def Singleton_EngineLog_getSingletonPtr():
  return _Myoushu.Singleton_EngineLog_getSingletonPtr()
Singleton_EngineLog_getSingletonPtr = _Myoushu.Singleton_EngineLog_getSingletonPtr

class Singleton_GameObjectFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_GameObjectFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_GameObjectFactory, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_GameObjectFactory()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_GameObjectFactory
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_GameObjectFactory_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_GameObjectFactory_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_GameObjectFactory_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_GameObjectFactory_getSingletonPtr)
Singleton_GameObjectFactory_swigregister = _Myoushu.Singleton_GameObjectFactory_swigregister
Singleton_GameObjectFactory_swigregister(Singleton_GameObjectFactory)

def Singleton_GameObjectFactory_getSingleton():
  return _Myoushu.Singleton_GameObjectFactory_getSingleton()
Singleton_GameObjectFactory_getSingleton = _Myoushu.Singleton_GameObjectFactory_getSingleton

def Singleton_GameObjectFactory_getSingletonPtr():
  return _Myoushu.Singleton_GameObjectFactory_getSingletonPtr()
Singleton_GameObjectFactory_getSingletonPtr = _Myoushu.Singleton_GameObjectFactory_getSingletonPtr

class Singleton_GUIManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_GUIManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_GUIManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_GUIManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_GUIManager
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_GUIManager_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_GUIManager_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_GUIManager_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_GUIManager_getSingletonPtr)
Singleton_GUIManager_swigregister = _Myoushu.Singleton_GUIManager_swigregister
Singleton_GUIManager_swigregister(Singleton_GUIManager)

def Singleton_GUIManager_getSingleton():
  return _Myoushu.Singleton_GUIManager_getSingleton()
Singleton_GUIManager_getSingleton = _Myoushu.Singleton_GUIManager_getSingleton

def Singleton_GUIManager_getSingletonPtr():
  return _Myoushu.Singleton_GUIManager_getSingletonPtr()
Singleton_GUIManager_getSingletonPtr = _Myoushu.Singleton_GUIManager_getSingletonPtr

class Singleton_InputActionManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_InputActionManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_InputActionManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_InputActionManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_InputActionManager
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_InputActionManager_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_InputActionManager_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_InputActionManager_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_InputActionManager_getSingletonPtr)
Singleton_InputActionManager_swigregister = _Myoushu.Singleton_InputActionManager_swigregister
Singleton_InputActionManager_swigregister(Singleton_InputActionManager)

def Singleton_InputActionManager_getSingleton():
  return _Myoushu.Singleton_InputActionManager_getSingleton()
Singleton_InputActionManager_getSingleton = _Myoushu.Singleton_InputActionManager_getSingleton

def Singleton_InputActionManager_getSingletonPtr():
  return _Myoushu.Singleton_InputActionManager_getSingletonPtr()
Singleton_InputActionManager_getSingletonPtr = _Myoushu.Singleton_InputActionManager_getSingletonPtr

class Singleton_InputDeviceFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_InputDeviceFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_InputDeviceFactory, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_InputDeviceFactory()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_InputDeviceFactory
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_InputDeviceFactory_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_InputDeviceFactory_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_InputDeviceFactory_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_InputDeviceFactory_getSingletonPtr)
Singleton_InputDeviceFactory_swigregister = _Myoushu.Singleton_InputDeviceFactory_swigregister
Singleton_InputDeviceFactory_swigregister(Singleton_InputDeviceFactory)

def Singleton_InputDeviceFactory_getSingleton():
  return _Myoushu.Singleton_InputDeviceFactory_getSingleton()
Singleton_InputDeviceFactory_getSingleton = _Myoushu.Singleton_InputDeviceFactory_getSingleton

def Singleton_InputDeviceFactory_getSingletonPtr():
  return _Myoushu.Singleton_InputDeviceFactory_getSingletonPtr()
Singleton_InputDeviceFactory_getSingletonPtr = _Myoushu.Singleton_InputDeviceFactory_getSingletonPtr

class Singleton_MyoushuOgreOggSoundFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_MyoushuOgreOggSoundFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_MyoushuOgreOggSoundFactory, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_MyoushuOgreOggSoundFactory()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_MyoushuOgreOggSoundFactory
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_MyoushuOgreOggSoundFactory_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_MyoushuOgreOggSoundFactory_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_MyoushuOgreOggSoundFactory_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_MyoushuOgreOggSoundFactory_getSingletonPtr)
Singleton_MyoushuOgreOggSoundFactory_swigregister = _Myoushu.Singleton_MyoushuOgreOggSoundFactory_swigregister
Singleton_MyoushuOgreOggSoundFactory_swigregister(Singleton_MyoushuOgreOggSoundFactory)

def Singleton_MyoushuOgreOggSoundFactory_getSingleton():
  return _Myoushu.Singleton_MyoushuOgreOggSoundFactory_getSingleton()
Singleton_MyoushuOgreOggSoundFactory_getSingleton = _Myoushu.Singleton_MyoushuOgreOggSoundFactory_getSingleton

def Singleton_MyoushuOgreOggSoundFactory_getSingletonPtr():
  return _Myoushu.Singleton_MyoushuOgreOggSoundFactory_getSingletonPtr()
Singleton_MyoushuOgreOggSoundFactory_getSingletonPtr = _Myoushu.Singleton_MyoushuOgreOggSoundFactory_getSingletonPtr

class Singleton_Kernel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_Kernel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_Kernel, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_Kernel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_Kernel
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_Kernel_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_Kernel_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_Kernel_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_Kernel_getSingletonPtr)
Singleton_Kernel_swigregister = _Myoushu.Singleton_Kernel_swigregister
Singleton_Kernel_swigregister(Singleton_Kernel)

def Singleton_Kernel_getSingleton():
  return _Myoushu.Singleton_Kernel_getSingleton()
Singleton_Kernel_getSingleton = _Myoushu.Singleton_Kernel_getSingleton

def Singleton_Kernel_getSingletonPtr():
  return _Myoushu.Singleton_Kernel_getSingletonPtr()
Singleton_Kernel_getSingletonPtr = _Myoushu.Singleton_Kernel_getSingletonPtr

class Singleton_KernelManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_KernelManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_KernelManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_KernelManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_KernelManager
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_KernelManager_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_KernelManager_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_KernelManager_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_KernelManager_getSingletonPtr)
Singleton_KernelManager_swigregister = _Myoushu.Singleton_KernelManager_swigregister
Singleton_KernelManager_swigregister(Singleton_KernelManager)

def Singleton_KernelManager_getSingleton():
  return _Myoushu.Singleton_KernelManager_getSingleton()
Singleton_KernelManager_getSingleton = _Myoushu.Singleton_KernelManager_getSingleton

def Singleton_KernelManager_getSingletonPtr():
  return _Myoushu.Singleton_KernelManager_getSingletonPtr()
Singleton_KernelManager_getSingletonPtr = _Myoushu.Singleton_KernelManager_getSingletonPtr

class Singleton_NamedObjectInstanceCreatorManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_NamedObjectInstanceCreatorManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_NamedObjectInstanceCreatorManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_NamedObjectInstanceCreatorManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_NamedObjectInstanceCreatorManager
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_NamedObjectInstanceCreatorManager_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_NamedObjectInstanceCreatorManager_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_NamedObjectInstanceCreatorManager_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_NamedObjectInstanceCreatorManager_getSingletonPtr)
Singleton_NamedObjectInstanceCreatorManager_swigregister = _Myoushu.Singleton_NamedObjectInstanceCreatorManager_swigregister
Singleton_NamedObjectInstanceCreatorManager_swigregister(Singleton_NamedObjectInstanceCreatorManager)

def Singleton_NamedObjectInstanceCreatorManager_getSingleton():
  return _Myoushu.Singleton_NamedObjectInstanceCreatorManager_getSingleton()
Singleton_NamedObjectInstanceCreatorManager_getSingleton = _Myoushu.Singleton_NamedObjectInstanceCreatorManager_getSingleton

def Singleton_NamedObjectInstanceCreatorManager_getSingletonPtr():
  return _Myoushu.Singleton_NamedObjectInstanceCreatorManager_getSingletonPtr()
Singleton_NamedObjectInstanceCreatorManager_getSingletonPtr = _Myoushu.Singleton_NamedObjectInstanceCreatorManager_getSingletonPtr

class Singleton_NetworkListenTask(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_NetworkListenTask, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_NetworkListenTask, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_NetworkListenTask()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_NetworkListenTask
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_NetworkListenTask_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_NetworkListenTask_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_NetworkListenTask_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_NetworkListenTask_getSingletonPtr)
Singleton_NetworkListenTask_swigregister = _Myoushu.Singleton_NetworkListenTask_swigregister
Singleton_NetworkListenTask_swigregister(Singleton_NetworkListenTask)

def Singleton_NetworkListenTask_getSingleton():
  return _Myoushu.Singleton_NetworkListenTask_getSingleton()
Singleton_NetworkListenTask_getSingleton = _Myoushu.Singleton_NetworkListenTask_getSingleton

def Singleton_NetworkListenTask_getSingletonPtr():
  return _Myoushu.Singleton_NetworkListenTask_getSingletonPtr()
Singleton_NetworkListenTask_getSingletonPtr = _Myoushu.Singleton_NetworkListenTask_getSingletonPtr

class Singleton_NetworkManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_NetworkManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_NetworkManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_NetworkManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_NetworkManager
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_NetworkManager_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_NetworkManager_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_NetworkManager_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_NetworkManager_getSingletonPtr)
Singleton_NetworkManager_swigregister = _Myoushu.Singleton_NetworkManager_swigregister
Singleton_NetworkManager_swigregister(Singleton_NetworkManager)

def Singleton_NetworkManager_getSingleton():
  return _Myoushu.Singleton_NetworkManager_getSingleton()
Singleton_NetworkManager_getSingleton = _Myoushu.Singleton_NetworkManager_getSingleton

def Singleton_NetworkManager_getSingletonPtr():
  return _Myoushu.Singleton_NetworkManager_getSingletonPtr()
Singleton_NetworkManager_getSingletonPtr = _Myoushu.Singleton_NetworkManager_getSingletonPtr

class Singleton_NotificationManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_NotificationManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_NotificationManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_NotificationManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_NotificationManager
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_NotificationManager_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_NotificationManager_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_NotificationManager_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_NotificationManager_getSingletonPtr)
Singleton_NotificationManager_swigregister = _Myoushu.Singleton_NotificationManager_swigregister
Singleton_NotificationManager_swigregister(Singleton_NotificationManager)

def Singleton_NotificationManager_getSingleton():
  return _Myoushu.Singleton_NotificationManager_getSingleton()
Singleton_NotificationManager_getSingleton = _Myoushu.Singleton_NotificationManager_getSingleton

def Singleton_NotificationManager_getSingletonPtr():
  return _Myoushu.Singleton_NotificationManager_getSingletonPtr()
Singleton_NotificationManager_getSingletonPtr = _Myoushu.Singleton_NotificationManager_getSingletonPtr

class Singleton_SceneFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_SceneFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_SceneFactory, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_SceneFactory()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_SceneFactory
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_SceneFactory_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_SceneFactory_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_SceneFactory_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_SceneFactory_getSingletonPtr)
Singleton_SceneFactory_swigregister = _Myoushu.Singleton_SceneFactory_swigregister
Singleton_SceneFactory_swigregister(Singleton_SceneFactory)

def Singleton_SceneFactory_getSingleton():
  return _Myoushu.Singleton_SceneFactory_getSingleton()
Singleton_SceneFactory_getSingleton = _Myoushu.Singleton_SceneFactory_getSingleton

def Singleton_SceneFactory_getSingletonPtr():
  return _Myoushu.Singleton_SceneFactory_getSingletonPtr()
Singleton_SceneFactory_getSingletonPtr = _Myoushu.Singleton_SceneFactory_getSingletonPtr

class Singleton_ScriptManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_ScriptManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_ScriptManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_ScriptManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_ScriptManager
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_ScriptManager_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_ScriptManager_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_ScriptManager_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_ScriptManager_getSingletonPtr)
Singleton_ScriptManager_swigregister = _Myoushu.Singleton_ScriptManager_swigregister
Singleton_ScriptManager_swigregister(Singleton_ScriptManager)

def Singleton_ScriptManager_getSingleton():
  return _Myoushu.Singleton_ScriptManager_getSingleton()
Singleton_ScriptManager_getSingleton = _Myoushu.Singleton_ScriptManager_getSingleton

def Singleton_ScriptManager_getSingletonPtr():
  return _Myoushu.Singleton_ScriptManager_getSingletonPtr()
Singleton_ScriptManager_getSingletonPtr = _Myoushu.Singleton_ScriptManager_getSingletonPtr

class Singleton_TimerTask(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_TimerTask, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_TimerTask, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_TimerTask()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_TimerTask
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_TimerTask_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_TimerTask_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_TimerTask_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_TimerTask_getSingletonPtr)
Singleton_TimerTask_swigregister = _Myoushu.Singleton_TimerTask_swigregister
Singleton_TimerTask_swigregister(Singleton_TimerTask)

def Singleton_TimerTask_getSingleton():
  return _Myoushu.Singleton_TimerTask_getSingleton()
Singleton_TimerTask_getSingleton = _Myoushu.Singleton_TimerTask_getSingleton

def Singleton_TimerTask_getSingletonPtr():
  return _Myoushu.Singleton_TimerTask_getSingletonPtr()
Singleton_TimerTask_getSingletonPtr = _Myoushu.Singleton_TimerTask_getSingletonPtr

class Singleton_VideoTaskManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_VideoTaskManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_VideoTaskManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_VideoTaskManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_VideoTaskManager
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_VideoTaskManager_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_VideoTaskManager_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_VideoTaskManager_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_VideoTaskManager_getSingletonPtr)
Singleton_VideoTaskManager_swigregister = _Myoushu.Singleton_VideoTaskManager_swigregister
Singleton_VideoTaskManager_swigregister(Singleton_VideoTaskManager)

def Singleton_VideoTaskManager_getSingleton():
  return _Myoushu.Singleton_VideoTaskManager_getSingleton()
Singleton_VideoTaskManager_getSingleton = _Myoushu.Singleton_VideoTaskManager_getSingleton

def Singleton_VideoTaskManager_getSingletonPtr():
  return _Myoushu.Singleton_VideoTaskManager_getSingletonPtr()
Singleton_VideoTaskManager_getSingletonPtr = _Myoushu.Singleton_VideoTaskManager_getSingletonPtr

class Singleton_CollisionManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_CollisionManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_CollisionManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_CollisionManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_CollisionManager
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_CollisionManager_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_CollisionManager_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_CollisionManager_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_CollisionManager_getSingletonPtr)
Singleton_CollisionManager_swigregister = _Myoushu.Singleton_CollisionManager_swigregister
Singleton_CollisionManager_swigregister(Singleton_CollisionManager)

def Singleton_CollisionManager_getSingleton():
  return _Myoushu.Singleton_CollisionManager_getSingleton()
Singleton_CollisionManager_getSingleton = _Myoushu.Singleton_CollisionManager_getSingleton

def Singleton_CollisionManager_getSingletonPtr():
  return _Myoushu.Singleton_CollisionManager_getSingletonPtr()
Singleton_CollisionManager_getSingletonPtr = _Myoushu.Singleton_CollisionManager_getSingletonPtr

class Singleton_MyoushuOgreOggSoundManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_MyoushuOgreOggSoundManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_MyoushuOgreOggSoundManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_MyoushuOgreOggSoundManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_MyoushuOgreOggSoundManager
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_MyoushuOgreOggSoundManager_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_MyoushuOgreOggSoundManager_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_MyoushuOgreOggSoundManager_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_MyoushuOgreOggSoundManager_getSingletonPtr)
Singleton_MyoushuOgreOggSoundManager_swigregister = _Myoushu.Singleton_MyoushuOgreOggSoundManager_swigregister
Singleton_MyoushuOgreOggSoundManager_swigregister(Singleton_MyoushuOgreOggSoundManager)

def Singleton_MyoushuOgreOggSoundManager_getSingleton():
  return _Myoushu.Singleton_MyoushuOgreOggSoundManager_getSingleton()
Singleton_MyoushuOgreOggSoundManager_getSingleton = _Myoushu.Singleton_MyoushuOgreOggSoundManager_getSingleton

def Singleton_MyoushuOgreOggSoundManager_getSingletonPtr():
  return _Myoushu.Singleton_MyoushuOgreOggSoundManager_getSingletonPtr()
Singleton_MyoushuOgreOggSoundManager_getSingletonPtr = _Myoushu.Singleton_MyoushuOgreOggSoundManager_getSingletonPtr

class Singleton_SQLiteGameLogManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_SQLiteGameLogManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_SQLiteGameLogManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_SQLiteGameLogManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_SQLiteGameLogManager
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_SQLiteGameLogManager_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_SQLiteGameLogManager_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_SQLiteGameLogManager_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_SQLiteGameLogManager_getSingletonPtr)
Singleton_SQLiteGameLogManager_swigregister = _Myoushu.Singleton_SQLiteGameLogManager_swigregister
Singleton_SQLiteGameLogManager_swigregister(Singleton_SQLiteGameLogManager)

def Singleton_SQLiteGameLogManager_getSingleton():
  return _Myoushu.Singleton_SQLiteGameLogManager_getSingleton()
Singleton_SQLiteGameLogManager_getSingleton = _Myoushu.Singleton_SQLiteGameLogManager_getSingleton

def Singleton_SQLiteGameLogManager_getSingletonPtr():
  return _Myoushu.Singleton_SQLiteGameLogManager_getSingletonPtr()
Singleton_SQLiteGameLogManager_getSingletonPtr = _Myoushu.Singleton_SQLiteGameLogManager_getSingletonPtr

class Singleton_ReplayTaskManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_ReplayTaskManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_ReplayTaskManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_ReplayTaskManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_ReplayTaskManager
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_ReplayTaskManager_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_ReplayTaskManager_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_ReplayTaskManager_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_ReplayTaskManager_getSingletonPtr)
Singleton_ReplayTaskManager_swigregister = _Myoushu.Singleton_ReplayTaskManager_swigregister
Singleton_ReplayTaskManager_swigregister(Singleton_ReplayTaskManager)

def Singleton_ReplayTaskManager_getSingleton():
  return _Myoushu.Singleton_ReplayTaskManager_getSingleton()
Singleton_ReplayTaskManager_getSingleton = _Myoushu.Singleton_ReplayTaskManager_getSingleton

def Singleton_ReplayTaskManager_getSingletonPtr():
  return _Myoushu.Singleton_ReplayTaskManager_getSingletonPtr()
Singleton_ReplayTaskManager_getSingletonPtr = _Myoushu.Singleton_ReplayTaskManager_getSingletonPtr

class Singleton_ReplayFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_ReplayFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_ReplayFactory, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_ReplayFactory()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_ReplayFactory
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_ReplayFactory_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_ReplayFactory_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_ReplayFactory_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_ReplayFactory_getSingletonPtr)
Singleton_ReplayFactory_swigregister = _Myoushu.Singleton_ReplayFactory_swigregister
Singleton_ReplayFactory_swigregister(Singleton_ReplayFactory)

def Singleton_ReplayFactory_getSingleton():
  return _Myoushu.Singleton_ReplayFactory_getSingleton()
Singleton_ReplayFactory_getSingleton = _Myoushu.Singleton_ReplayFactory_getSingleton

def Singleton_ReplayFactory_getSingletonPtr():
  return _Myoushu.Singleton_ReplayFactory_getSingletonPtr()
Singleton_ReplayFactory_getSingletonPtr = _Myoushu.Singleton_ReplayFactory_getSingletonPtr

class Singleton_Random(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_Random, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_Random, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_Random()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_Random
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_Random_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_Random_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_Random_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_Random_getSingletonPtr)
Singleton_Random_swigregister = _Myoushu.Singleton_Random_swigregister
Singleton_Random_swigregister(Singleton_Random)

def Singleton_Random_getSingleton():
  return _Myoushu.Singleton_Random_getSingleton()
Singleton_Random_getSingleton = _Myoushu.Singleton_Random_getSingleton

def Singleton_Random_getSingletonPtr():
  return _Myoushu.Singleton_Random_getSingletonPtr()
Singleton_Random_getSingletonPtr = _Myoushu.Singleton_Random_getSingletonPtr

class Singleton_ContentImporterManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_ContentImporterManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_ContentImporterManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_ContentImporterManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_ContentImporterManager
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_ContentImporterManager_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_ContentImporterManager_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_ContentImporterManager_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_ContentImporterManager_getSingletonPtr)
Singleton_ContentImporterManager_swigregister = _Myoushu.Singleton_ContentImporterManager_swigregister
Singleton_ContentImporterManager_swigregister(Singleton_ContentImporterManager)

def Singleton_ContentImporterManager_getSingleton():
  return _Myoushu.Singleton_ContentImporterManager_getSingleton()
Singleton_ContentImporterManager_getSingleton = _Myoushu.Singleton_ContentImporterManager_getSingleton

def Singleton_ContentImporterManager_getSingletonPtr():
  return _Myoushu.Singleton_ContentImporterManager_getSingletonPtr()
Singleton_ContentImporterManager_getSingletonPtr = _Myoushu.Singleton_ContentImporterManager_getSingletonPtr

class Singleton_FunctorManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_FunctorManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_FunctorManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_FunctorManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_FunctorManager
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_FunctorManager_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_FunctorManager_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_FunctorManager_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_FunctorManager_getSingletonPtr)
Singleton_FunctorManager_swigregister = _Myoushu.Singleton_FunctorManager_swigregister
Singleton_FunctorManager_swigregister(Singleton_FunctorManager)

def Singleton_FunctorManager_getSingleton():
  return _Myoushu.Singleton_FunctorManager_getSingleton()
Singleton_FunctorManager_getSingleton = _Myoushu.Singleton_FunctorManager_getSingleton

def Singleton_FunctorManager_getSingletonPtr():
  return _Myoushu.Singleton_FunctorManager_getSingletonPtr()
Singleton_FunctorManager_getSingletonPtr = _Myoushu.Singleton_FunctorManager_getSingletonPtr

class Singleton_DefaultTranslation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_DefaultTranslation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_DefaultTranslation, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_DefaultTranslation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_DefaultTranslation
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_DefaultTranslation_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_DefaultTranslation_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_DefaultTranslation_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_DefaultTranslation_getSingletonPtr)
Singleton_DefaultTranslation_swigregister = _Myoushu.Singleton_DefaultTranslation_swigregister
Singleton_DefaultTranslation_swigregister(Singleton_DefaultTranslation)

def Singleton_DefaultTranslation_getSingleton():
  return _Myoushu.Singleton_DefaultTranslation_getSingleton()
Singleton_DefaultTranslation_getSingleton = _Myoushu.Singleton_DefaultTranslation_getSingleton

def Singleton_DefaultTranslation_getSingletonPtr():
  return _Myoushu.Singleton_DefaultTranslation_getSingletonPtr()
Singleton_DefaultTranslation_getSingletonPtr = _Myoushu.Singleton_DefaultTranslation_getSingletonPtr

class AutoPtr_AnimationTaskMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoPtr_AnimationTaskMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutoPtr_AnimationTaskMessage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_AutoPtr_AnimationTaskMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_AutoPtr_AnimationTaskMessage
    __del__ = lambda self : None;
    def assign(self, *args): return _Myoushu.AutoPtr_AnimationTaskMessage_assign(self, *args)
    def swap(self, *args): return _Myoushu.AutoPtr_AnimationTaskMessage_swap(self, *args)
    def __deref__(self, *args): return _Myoushu.AutoPtr_AnimationTaskMessage___deref__(self, *args)
    def __ref__(self, *args): return _Myoushu.AutoPtr_AnimationTaskMessage___ref__(self, *args)
    def get(self, *args): return _Myoushu.AutoPtr_AnimationTaskMessage_get(self, *args)
    def isNull(self): return _Myoushu.AutoPtr_AnimationTaskMessage_isNull(self)
    def duplicate(self): return _Myoushu.AutoPtr_AnimationTaskMessage_duplicate(self)
    def __eq__(self, *args): return _Myoushu.AutoPtr_AnimationTaskMessage___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.AutoPtr_AnimationTaskMessage___ne__(self, *args)
    def __lt__(self, *args): return _Myoushu.AutoPtr_AnimationTaskMessage___lt__(self, *args)
    def __le__(self, *args): return _Myoushu.AutoPtr_AnimationTaskMessage___le__(self, *args)
    def __gt__(self, *args): return _Myoushu.AutoPtr_AnimationTaskMessage___gt__(self, *args)
    def __ge__(self, *args): return _Myoushu.AutoPtr_AnimationTaskMessage___ge__(self, *args)
    def getClassName(self): return _Myoushu.AutoPtr_AnimationTaskMessage_getClassName(self)
    def getMessageType(self): return _Myoushu.AutoPtr_AnimationTaskMessage_getMessageType(self)
    def getAnimation(self): return _Myoushu.AutoPtr_AnimationTaskMessage_getAnimation(self)
    def isLoop(self): return _Myoushu.AutoPtr_AnimationTaskMessage_isLoop(self)
    def isRestart(self): return _Myoushu.AutoPtr_AnimationTaskMessage_isRestart(self)
    def isPlayCounter(self): return _Myoushu.AutoPtr_AnimationTaskMessage_isPlayCounter(self)
    def clone(self): return _Myoushu.AutoPtr_AnimationTaskMessage_clone(self)
    def getStartCallback(self): return _Myoushu.AutoPtr_AnimationTaskMessage_getStartCallback(self)
    def getStopCallback(self): return _Myoushu.AutoPtr_AnimationTaskMessage_getStopCallback(self)
    def getCreator(self): return _Myoushu.AutoPtr_AnimationTaskMessage_getCreator(self)
    def serialize(self, *args): return _Myoushu.AutoPtr_AnimationTaskMessage_serialize(self, *args)
AutoPtr_AnimationTaskMessage_swigregister = _Myoushu.AutoPtr_AnimationTaskMessage_swigregister
AutoPtr_AnimationTaskMessage_swigregister(AutoPtr_AnimationTaskMessage)

class AutoPtr_ControllerTaskMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoPtr_ControllerTaskMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutoPtr_ControllerTaskMessage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_AutoPtr_ControllerTaskMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_AutoPtr_ControllerTaskMessage
    __del__ = lambda self : None;
    def assign(self, *args): return _Myoushu.AutoPtr_ControllerTaskMessage_assign(self, *args)
    def swap(self, *args): return _Myoushu.AutoPtr_ControllerTaskMessage_swap(self, *args)
    def __deref__(self, *args): return _Myoushu.AutoPtr_ControllerTaskMessage___deref__(self, *args)
    def __ref__(self, *args): return _Myoushu.AutoPtr_ControllerTaskMessage___ref__(self, *args)
    def get(self, *args): return _Myoushu.AutoPtr_ControllerTaskMessage_get(self, *args)
    def isNull(self): return _Myoushu.AutoPtr_ControllerTaskMessage_isNull(self)
    def duplicate(self): return _Myoushu.AutoPtr_ControllerTaskMessage_duplicate(self)
    def __eq__(self, *args): return _Myoushu.AutoPtr_ControllerTaskMessage___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.AutoPtr_ControllerTaskMessage___ne__(self, *args)
    def __lt__(self, *args): return _Myoushu.AutoPtr_ControllerTaskMessage___lt__(self, *args)
    def __le__(self, *args): return _Myoushu.AutoPtr_ControllerTaskMessage___le__(self, *args)
    def __gt__(self, *args): return _Myoushu.AutoPtr_ControllerTaskMessage___gt__(self, *args)
    def __ge__(self, *args): return _Myoushu.AutoPtr_ControllerTaskMessage___ge__(self, *args)
    def getClassName(self): return _Myoushu.AutoPtr_ControllerTaskMessage_getClassName(self)
    def getMessageType(self): return _Myoushu.AutoPtr_ControllerTaskMessage_getMessageType(self)
    def clone(self): return _Myoushu.AutoPtr_ControllerTaskMessage_clone(self)
    def getCreator(self): return _Myoushu.AutoPtr_ControllerTaskMessage_getCreator(self)
    def serialize(self, *args): return _Myoushu.AutoPtr_ControllerTaskMessage_serialize(self, *args)
AutoPtr_ControllerTaskMessage_swigregister = _Myoushu.AutoPtr_ControllerTaskMessage_swigregister
AutoPtr_ControllerTaskMessage_swigregister(AutoPtr_ControllerTaskMessage)

class AutoPtr_GUIMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoPtr_GUIMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutoPtr_GUIMessage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_AutoPtr_GUIMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_AutoPtr_GUIMessage
    __del__ = lambda self : None;
    def assign(self, *args): return _Myoushu.AutoPtr_GUIMessage_assign(self, *args)
    def swap(self, *args): return _Myoushu.AutoPtr_GUIMessage_swap(self, *args)
    def __deref__(self, *args): return _Myoushu.AutoPtr_GUIMessage___deref__(self, *args)
    def __ref__(self, *args): return _Myoushu.AutoPtr_GUIMessage___ref__(self, *args)
    def get(self, *args): return _Myoushu.AutoPtr_GUIMessage_get(self, *args)
    def isNull(self): return _Myoushu.AutoPtr_GUIMessage_isNull(self)
    def duplicate(self): return _Myoushu.AutoPtr_GUIMessage_duplicate(self)
    def __eq__(self, *args): return _Myoushu.AutoPtr_GUIMessage___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.AutoPtr_GUIMessage___ne__(self, *args)
    def __lt__(self, *args): return _Myoushu.AutoPtr_GUIMessage___lt__(self, *args)
    def __le__(self, *args): return _Myoushu.AutoPtr_GUIMessage___le__(self, *args)
    def __gt__(self, *args): return _Myoushu.AutoPtr_GUIMessage___gt__(self, *args)
    def __ge__(self, *args): return _Myoushu.AutoPtr_GUIMessage___ge__(self, *args)
    def getClassName(self): return _Myoushu.AutoPtr_GUIMessage_getClassName(self)
    def getMessageType(self): return _Myoushu.AutoPtr_GUIMessage_getMessageType(self)
    def isVisible(self): return _Myoushu.AutoPtr_GUIMessage_isVisible(self)
    def getPosition(self): return _Myoushu.AutoPtr_GUIMessage_getPosition(self)
    def getSize(self): return _Myoushu.AutoPtr_GUIMessage_getSize(self)
    def getRelative(self): return _Myoushu.AutoPtr_GUIMessage_getRelative(self)
    def getWidgetType(self): return _Myoushu.AutoPtr_GUIMessage_getWidgetType(self)
    def getWidgetName(self): return _Myoushu.AutoPtr_GUIMessage_getWidgetName(self)
    def getMessage(self): return _Myoushu.AutoPtr_GUIMessage_getMessage(self)
    def getResourceGroup(self): return _Myoushu.AutoPtr_GUIMessage_getResourceGroup(self)
    def clone(self): return _Myoushu.AutoPtr_GUIMessage_clone(self)
    def getCreator(self): return _Myoushu.AutoPtr_GUIMessage_getCreator(self)
    def serialize(self, *args): return _Myoushu.AutoPtr_GUIMessage_serialize(self, *args)
AutoPtr_GUIMessage_swigregister = _Myoushu.AutoPtr_GUIMessage_swigregister
AutoPtr_GUIMessage_swigregister(AutoPtr_GUIMessage)

class AutoPtr_InputDevice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoPtr_InputDevice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutoPtr_InputDevice, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_AutoPtr_InputDevice(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_AutoPtr_InputDevice
    __del__ = lambda self : None;
    def assign(self, *args): return _Myoushu.AutoPtr_InputDevice_assign(self, *args)
    def swap(self, *args): return _Myoushu.AutoPtr_InputDevice_swap(self, *args)
    def __deref__(self, *args): return _Myoushu.AutoPtr_InputDevice___deref__(self, *args)
    def __ref__(self, *args): return _Myoushu.AutoPtr_InputDevice___ref__(self, *args)
    def get(self, *args): return _Myoushu.AutoPtr_InputDevice_get(self, *args)
    def isNull(self): return _Myoushu.AutoPtr_InputDevice_isNull(self)
    def duplicate(self): return _Myoushu.AutoPtr_InputDevice_duplicate(self)
    def __eq__(self, *args): return _Myoushu.AutoPtr_InputDevice___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.AutoPtr_InputDevice___ne__(self, *args)
    def __lt__(self, *args): return _Myoushu.AutoPtr_InputDevice___lt__(self, *args)
    def __le__(self, *args): return _Myoushu.AutoPtr_InputDevice___le__(self, *args)
    def __gt__(self, *args): return _Myoushu.AutoPtr_InputDevice___gt__(self, *args)
    def __ge__(self, *args): return _Myoushu.AutoPtr_InputDevice___ge__(self, *args)
    def getInputEventString(self, *args): return _Myoushu.AutoPtr_InputDevice_getInputEventString(self, *args)
    def getInputCodeFromInputIdentifier(self, *args): return _Myoushu.AutoPtr_InputDevice_getInputCodeFromInputIdentifier(self, *args)
    def getInputIdentifierFromInputCode(self, *args): return _Myoushu.AutoPtr_InputDevice_getInputIdentifierFromInputCode(self, *args)
    def getDeviceType(self): return _Myoushu.AutoPtr_InputDevice_getDeviceType(self)
    def getName(self): return _Myoushu.AutoPtr_InputDevice_getName(self)
    def release(self): return _Myoushu.AutoPtr_InputDevice_release(self)
    def referenceCount(self): return _Myoushu.AutoPtr_InputDevice_referenceCount(self)
AutoPtr_InputDevice_swigregister = _Myoushu.AutoPtr_InputDevice_swigregister
AutoPtr_InputDevice_swigregister(AutoPtr_InputDevice)

class AutoPtr_InputDeviceMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoPtr_InputDeviceMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutoPtr_InputDeviceMessage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_AutoPtr_InputDeviceMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_AutoPtr_InputDeviceMessage
    __del__ = lambda self : None;
    def assign(self, *args): return _Myoushu.AutoPtr_InputDeviceMessage_assign(self, *args)
    def swap(self, *args): return _Myoushu.AutoPtr_InputDeviceMessage_swap(self, *args)
    def __deref__(self, *args): return _Myoushu.AutoPtr_InputDeviceMessage___deref__(self, *args)
    def __ref__(self, *args): return _Myoushu.AutoPtr_InputDeviceMessage___ref__(self, *args)
    def get(self, *args): return _Myoushu.AutoPtr_InputDeviceMessage_get(self, *args)
    def isNull(self): return _Myoushu.AutoPtr_InputDeviceMessage_isNull(self)
    def duplicate(self): return _Myoushu.AutoPtr_InputDeviceMessage_duplicate(self)
    def __eq__(self, *args): return _Myoushu.AutoPtr_InputDeviceMessage___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.AutoPtr_InputDeviceMessage___ne__(self, *args)
    def __lt__(self, *args): return _Myoushu.AutoPtr_InputDeviceMessage___lt__(self, *args)
    def __le__(self, *args): return _Myoushu.AutoPtr_InputDeviceMessage___le__(self, *args)
    def __gt__(self, *args): return _Myoushu.AutoPtr_InputDeviceMessage___gt__(self, *args)
    def __ge__(self, *args): return _Myoushu.AutoPtr_InputDeviceMessage___ge__(self, *args)
    __swig_getmethods__["DS_BUTTON_INDEX"] = _Myoushu.AutoPtr_InputDeviceMessage_DS_BUTTON_INDEX_get
    if _newclass:DS_BUTTON_INDEX = _swig_property(_Myoushu.AutoPtr_InputDeviceMessage_DS_BUTTON_INDEX_get)
    __swig_getmethods__["DS_BUTTONS_STATE_INDEX"] = _Myoushu.AutoPtr_InputDeviceMessage_DS_BUTTONS_STATE_INDEX_get
    if _newclass:DS_BUTTONS_STATE_INDEX = _swig_property(_Myoushu.AutoPtr_InputDeviceMessage_DS_BUTTONS_STATE_INDEX_get)
    __swig_getmethods__["DS_X_INDEX"] = _Myoushu.AutoPtr_InputDeviceMessage_DS_X_INDEX_get
    if _newclass:DS_X_INDEX = _swig_property(_Myoushu.AutoPtr_InputDeviceMessage_DS_X_INDEX_get)
    __swig_getmethods__["DS_Y_INDEX"] = _Myoushu.AutoPtr_InputDeviceMessage_DS_Y_INDEX_get
    if _newclass:DS_Y_INDEX = _swig_property(_Myoushu.AutoPtr_InputDeviceMessage_DS_Y_INDEX_get)
    __swig_getmethods__["DS_Z_INDEX"] = _Myoushu.AutoPtr_InputDeviceMessage_DS_Z_INDEX_get
    if _newclass:DS_Z_INDEX = _swig_property(_Myoushu.AutoPtr_InputDeviceMessage_DS_Z_INDEX_get)
    __swig_getmethods__["DS_X_REL_INDEX"] = _Myoushu.AutoPtr_InputDeviceMessage_DS_X_REL_INDEX_get
    if _newclass:DS_X_REL_INDEX = _swig_property(_Myoushu.AutoPtr_InputDeviceMessage_DS_X_REL_INDEX_get)
    __swig_getmethods__["DS_Y_REL_INDEX"] = _Myoushu.AutoPtr_InputDeviceMessage_DS_Y_REL_INDEX_get
    if _newclass:DS_Y_REL_INDEX = _swig_property(_Myoushu.AutoPtr_InputDeviceMessage_DS_Y_REL_INDEX_get)
    __swig_getmethods__["DS_Z_REL_INDEX"] = _Myoushu.AutoPtr_InputDeviceMessage_DS_Z_REL_INDEX_get
    if _newclass:DS_Z_REL_INDEX = _swig_property(_Myoushu.AutoPtr_InputDeviceMessage_DS_Z_REL_INDEX_get)
    def getClassName(self): return _Myoushu.AutoPtr_InputDeviceMessage_getClassName(self)
    def getInputDevice(self): return _Myoushu.AutoPtr_InputDeviceMessage_getInputDevice(self)
    def getDeviceType(self): return _Myoushu.AutoPtr_InputDeviceMessage_getDeviceType(self)
    def getDeviceAction(self): return _Myoushu.AutoPtr_InputDeviceMessage_getDeviceAction(self)
    def getActionVector(self, *args): return _Myoushu.AutoPtr_InputDeviceMessage_getActionVector(self, *args)
    def getDeviceState(self, *args): return _Myoushu.AutoPtr_InputDeviceMessage_getDeviceState(self, *args)
    def getInputIdentifier(self, *args): return _Myoushu.AutoPtr_InputDeviceMessage_getInputIdentifier(self, *args)
    def clone(self, *args): return _Myoushu.AutoPtr_InputDeviceMessage_clone(self, *args)
    def serialize(self, *args): return _Myoushu.AutoPtr_InputDeviceMessage_serialize(self, *args)
    def getCreator(self): return _Myoushu.AutoPtr_InputDeviceMessage_getCreator(self)
AutoPtr_InputDeviceMessage_swigregister = _Myoushu.AutoPtr_InputDeviceMessage_swigregister
AutoPtr_InputDeviceMessage_swigregister(AutoPtr_InputDeviceMessage)

class AutoPtr_InputMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoPtr_InputMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutoPtr_InputMessage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_AutoPtr_InputMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_AutoPtr_InputMessage
    __del__ = lambda self : None;
    def assign(self, *args): return _Myoushu.AutoPtr_InputMessage_assign(self, *args)
    def swap(self, *args): return _Myoushu.AutoPtr_InputMessage_swap(self, *args)
    def __deref__(self, *args): return _Myoushu.AutoPtr_InputMessage___deref__(self, *args)
    def __ref__(self, *args): return _Myoushu.AutoPtr_InputMessage___ref__(self, *args)
    def get(self, *args): return _Myoushu.AutoPtr_InputMessage_get(self, *args)
    def isNull(self): return _Myoushu.AutoPtr_InputMessage_isNull(self)
    def duplicate(self): return _Myoushu.AutoPtr_InputMessage_duplicate(self)
    def __eq__(self, *args): return _Myoushu.AutoPtr_InputMessage___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.AutoPtr_InputMessage___ne__(self, *args)
    def __lt__(self, *args): return _Myoushu.AutoPtr_InputMessage___lt__(self, *args)
    def __le__(self, *args): return _Myoushu.AutoPtr_InputMessage___le__(self, *args)
    def __gt__(self, *args): return _Myoushu.AutoPtr_InputMessage___gt__(self, *args)
    def __ge__(self, *args): return _Myoushu.AutoPtr_InputMessage___ge__(self, *args)
    __swig_getmethods__["NO_ACTION"] = _Myoushu.AutoPtr_InputMessage_NO_ACTION_get
    if _newclass:NO_ACTION = _swig_property(_Myoushu.AutoPtr_InputMessage_NO_ACTION_get)
    def getClassName(self): return _Myoushu.AutoPtr_InputMessage_getClassName(self)
    def getInputAction(self): return _Myoushu.AutoPtr_InputMessage_getInputAction(self)
    def clone(self, *args): return _Myoushu.AutoPtr_InputMessage_clone(self, *args)
    def serialize(self, *args): return _Myoushu.AutoPtr_InputMessage_serialize(self, *args)
    __swig_getmethods__["DS_BUTTON_INDEX"] = _Myoushu.AutoPtr_InputMessage_DS_BUTTON_INDEX_get
    if _newclass:DS_BUTTON_INDEX = _swig_property(_Myoushu.AutoPtr_InputMessage_DS_BUTTON_INDEX_get)
    __swig_getmethods__["DS_BUTTONS_STATE_INDEX"] = _Myoushu.AutoPtr_InputMessage_DS_BUTTONS_STATE_INDEX_get
    if _newclass:DS_BUTTONS_STATE_INDEX = _swig_property(_Myoushu.AutoPtr_InputMessage_DS_BUTTONS_STATE_INDEX_get)
    __swig_getmethods__["DS_X_INDEX"] = _Myoushu.AutoPtr_InputMessage_DS_X_INDEX_get
    if _newclass:DS_X_INDEX = _swig_property(_Myoushu.AutoPtr_InputMessage_DS_X_INDEX_get)
    __swig_getmethods__["DS_Y_INDEX"] = _Myoushu.AutoPtr_InputMessage_DS_Y_INDEX_get
    if _newclass:DS_Y_INDEX = _swig_property(_Myoushu.AutoPtr_InputMessage_DS_Y_INDEX_get)
    __swig_getmethods__["DS_Z_INDEX"] = _Myoushu.AutoPtr_InputMessage_DS_Z_INDEX_get
    if _newclass:DS_Z_INDEX = _swig_property(_Myoushu.AutoPtr_InputMessage_DS_Z_INDEX_get)
    __swig_getmethods__["DS_X_REL_INDEX"] = _Myoushu.AutoPtr_InputMessage_DS_X_REL_INDEX_get
    if _newclass:DS_X_REL_INDEX = _swig_property(_Myoushu.AutoPtr_InputMessage_DS_X_REL_INDEX_get)
    __swig_getmethods__["DS_Y_REL_INDEX"] = _Myoushu.AutoPtr_InputMessage_DS_Y_REL_INDEX_get
    if _newclass:DS_Y_REL_INDEX = _swig_property(_Myoushu.AutoPtr_InputMessage_DS_Y_REL_INDEX_get)
    __swig_getmethods__["DS_Z_REL_INDEX"] = _Myoushu.AutoPtr_InputMessage_DS_Z_REL_INDEX_get
    if _newclass:DS_Z_REL_INDEX = _swig_property(_Myoushu.AutoPtr_InputMessage_DS_Z_REL_INDEX_get)
    def getInputDevice(self): return _Myoushu.AutoPtr_InputMessage_getInputDevice(self)
    def getDeviceType(self): return _Myoushu.AutoPtr_InputMessage_getDeviceType(self)
    def getDeviceAction(self): return _Myoushu.AutoPtr_InputMessage_getDeviceAction(self)
    def getActionVector(self, *args): return _Myoushu.AutoPtr_InputMessage_getActionVector(self, *args)
    def getDeviceState(self, *args): return _Myoushu.AutoPtr_InputMessage_getDeviceState(self, *args)
    def getInputIdentifier(self, *args): return _Myoushu.AutoPtr_InputMessage_getInputIdentifier(self, *args)
    def getCreator(self): return _Myoushu.AutoPtr_InputMessage_getCreator(self)
AutoPtr_InputMessage_swigregister = _Myoushu.AutoPtr_InputMessage_swigregister
AutoPtr_InputMessage_swigregister(AutoPtr_InputMessage)

class AutoPtr_KernelMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoPtr_KernelMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutoPtr_KernelMessage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_AutoPtr_KernelMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_AutoPtr_KernelMessage
    __del__ = lambda self : None;
    def assign(self, *args): return _Myoushu.AutoPtr_KernelMessage_assign(self, *args)
    def swap(self, *args): return _Myoushu.AutoPtr_KernelMessage_swap(self, *args)
    def __deref__(self, *args): return _Myoushu.AutoPtr_KernelMessage___deref__(self, *args)
    def __ref__(self, *args): return _Myoushu.AutoPtr_KernelMessage___ref__(self, *args)
    def get(self, *args): return _Myoushu.AutoPtr_KernelMessage_get(self, *args)
    def isNull(self): return _Myoushu.AutoPtr_KernelMessage_isNull(self)
    def duplicate(self): return _Myoushu.AutoPtr_KernelMessage_duplicate(self)
    def __eq__(self, *args): return _Myoushu.AutoPtr_KernelMessage___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.AutoPtr_KernelMessage___ne__(self, *args)
    def __lt__(self, *args): return _Myoushu.AutoPtr_KernelMessage___lt__(self, *args)
    def __le__(self, *args): return _Myoushu.AutoPtr_KernelMessage___le__(self, *args)
    def __gt__(self, *args): return _Myoushu.AutoPtr_KernelMessage___gt__(self, *args)
    def __ge__(self, *args): return _Myoushu.AutoPtr_KernelMessage___ge__(self, *args)
    def getClassName(self): return _Myoushu.AutoPtr_KernelMessage_getClassName(self)
    def getMessageType(self): return _Myoushu.AutoPtr_KernelMessage_getMessageType(self)
    def getTaskName(self): return _Myoushu.AutoPtr_KernelMessage_getTaskName(self)
    def clone(self, *args): return _Myoushu.AutoPtr_KernelMessage_clone(self, *args)
    def getCreator(self): return _Myoushu.AutoPtr_KernelMessage_getCreator(self)
    def serialize(self, *args): return _Myoushu.AutoPtr_KernelMessage_serialize(self, *args)
AutoPtr_KernelMessage_swigregister = _Myoushu.AutoPtr_KernelMessage_swigregister
AutoPtr_KernelMessage_swigregister(AutoPtr_KernelMessage)

class AutoPtr_KeyboardOISInputDevice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoPtr_KeyboardOISInputDevice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutoPtr_KeyboardOISInputDevice, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_AutoPtr_KeyboardOISInputDevice(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_AutoPtr_KeyboardOISInputDevice
    __del__ = lambda self : None;
    def assign(self, *args): return _Myoushu.AutoPtr_KeyboardOISInputDevice_assign(self, *args)
    def swap(self, *args): return _Myoushu.AutoPtr_KeyboardOISInputDevice_swap(self, *args)
    def __deref__(self, *args): return _Myoushu.AutoPtr_KeyboardOISInputDevice___deref__(self, *args)
    def __ref__(self, *args): return _Myoushu.AutoPtr_KeyboardOISInputDevice___ref__(self, *args)
    def get(self, *args): return _Myoushu.AutoPtr_KeyboardOISInputDevice_get(self, *args)
    def isNull(self): return _Myoushu.AutoPtr_KeyboardOISInputDevice_isNull(self)
    def duplicate(self): return _Myoushu.AutoPtr_KeyboardOISInputDevice_duplicate(self)
    def __eq__(self, *args): return _Myoushu.AutoPtr_KeyboardOISInputDevice___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.AutoPtr_KeyboardOISInputDevice___ne__(self, *args)
    def __lt__(self, *args): return _Myoushu.AutoPtr_KeyboardOISInputDevice___lt__(self, *args)
    def __le__(self, *args): return _Myoushu.AutoPtr_KeyboardOISInputDevice___le__(self, *args)
    def __gt__(self, *args): return _Myoushu.AutoPtr_KeyboardOISInputDevice___gt__(self, *args)
    def __ge__(self, *args): return _Myoushu.AutoPtr_KeyboardOISInputDevice___ge__(self, *args)
    __swig_getmethods__["INPUT_DEVICE_NAME"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_INPUT_DEVICE_NAME_get
    if _newclass:INPUT_DEVICE_NAME = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_INPUT_DEVICE_NAME_get)
    def getInputEventString(self, *args): return _Myoushu.AutoPtr_KeyboardOISInputDevice_getInputEventString(self, *args)
    def getInputCodeFromInputIdentifier(self, *args): return _Myoushu.AutoPtr_KeyboardOISInputDevice_getInputCodeFromInputIdentifier(self, *args)
    def getInputIdentifierFromInputCode(self, *args): return _Myoushu.AutoPtr_KeyboardOISInputDevice_getInputIdentifierFromInputCode(self, *args)
    __swig_getmethods__["KI_UNASSIGNED"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_UNASSIGNED_get
    if _newclass:KI_UNASSIGNED = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_UNASSIGNED_get)
    __swig_getmethods__["KI_ESCAPE"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_ESCAPE_get
    if _newclass:KI_ESCAPE = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_ESCAPE_get)
    __swig_getmethods__["KI_1"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_1_get
    if _newclass:KI_1 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_1_get)
    __swig_getmethods__["KI_2"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_2_get
    if _newclass:KI_2 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_2_get)
    __swig_getmethods__["KI_3"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_3_get
    if _newclass:KI_3 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_3_get)
    __swig_getmethods__["KI_4"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_4_get
    if _newclass:KI_4 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_4_get)
    __swig_getmethods__["KI_5"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_5_get
    if _newclass:KI_5 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_5_get)
    __swig_getmethods__["KI_6"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_6_get
    if _newclass:KI_6 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_6_get)
    __swig_getmethods__["KI_7"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_7_get
    if _newclass:KI_7 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_7_get)
    __swig_getmethods__["KI_8"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_8_get
    if _newclass:KI_8 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_8_get)
    __swig_getmethods__["KI_9"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_9_get
    if _newclass:KI_9 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_9_get)
    __swig_getmethods__["KI_0"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_0_get
    if _newclass:KI_0 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_0_get)
    __swig_getmethods__["KI_MINUS"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_MINUS_get
    if _newclass:KI_MINUS = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_MINUS_get)
    __swig_getmethods__["KI_EQUALS"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_EQUALS_get
    if _newclass:KI_EQUALS = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_EQUALS_get)
    __swig_getmethods__["KI_BACK"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_BACK_get
    if _newclass:KI_BACK = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_BACK_get)
    __swig_getmethods__["KI_TAB"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_TAB_get
    if _newclass:KI_TAB = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_TAB_get)
    __swig_getmethods__["KI_Q"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_Q_get
    if _newclass:KI_Q = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_Q_get)
    __swig_getmethods__["KI_W"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_W_get
    if _newclass:KI_W = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_W_get)
    __swig_getmethods__["KI_E"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_E_get
    if _newclass:KI_E = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_E_get)
    __swig_getmethods__["KI_R"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_R_get
    if _newclass:KI_R = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_R_get)
    __swig_getmethods__["KI_T"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_T_get
    if _newclass:KI_T = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_T_get)
    __swig_getmethods__["KI_Y"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_Y_get
    if _newclass:KI_Y = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_Y_get)
    __swig_getmethods__["KI_U"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_U_get
    if _newclass:KI_U = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_U_get)
    __swig_getmethods__["KI_I"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_I_get
    if _newclass:KI_I = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_I_get)
    __swig_getmethods__["KI_O"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_O_get
    if _newclass:KI_O = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_O_get)
    __swig_getmethods__["KI_P"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_P_get
    if _newclass:KI_P = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_P_get)
    __swig_getmethods__["KI_LBRACKET"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_LBRACKET_get
    if _newclass:KI_LBRACKET = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_LBRACKET_get)
    __swig_getmethods__["KI_RBRACKET"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_RBRACKET_get
    if _newclass:KI_RBRACKET = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_RBRACKET_get)
    __swig_getmethods__["KI_RETURN"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_RETURN_get
    if _newclass:KI_RETURN = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_RETURN_get)
    __swig_getmethods__["KI_LCONTROL"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_LCONTROL_get
    if _newclass:KI_LCONTROL = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_LCONTROL_get)
    __swig_getmethods__["KI_A"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_A_get
    if _newclass:KI_A = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_A_get)
    __swig_getmethods__["KI_S"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_S_get
    if _newclass:KI_S = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_S_get)
    __swig_getmethods__["KI_D"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_D_get
    if _newclass:KI_D = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_D_get)
    __swig_getmethods__["KI_F"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F_get
    if _newclass:KI_F = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F_get)
    __swig_getmethods__["KI_G"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_G_get
    if _newclass:KI_G = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_G_get)
    __swig_getmethods__["KI_H"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_H_get
    if _newclass:KI_H = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_H_get)
    __swig_getmethods__["KI_J"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_J_get
    if _newclass:KI_J = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_J_get)
    __swig_getmethods__["KI_K"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_K_get
    if _newclass:KI_K = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_K_get)
    __swig_getmethods__["KI_L"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_L_get
    if _newclass:KI_L = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_L_get)
    __swig_getmethods__["KI_SEMICOLON"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_SEMICOLON_get
    if _newclass:KI_SEMICOLON = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_SEMICOLON_get)
    __swig_getmethods__["KI_APOSTROPHE"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_APOSTROPHE_get
    if _newclass:KI_APOSTROPHE = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_APOSTROPHE_get)
    __swig_getmethods__["KI_GRAVE"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_GRAVE_get
    if _newclass:KI_GRAVE = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_GRAVE_get)
    __swig_getmethods__["KI_LSHIFT"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_LSHIFT_get
    if _newclass:KI_LSHIFT = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_LSHIFT_get)
    __swig_getmethods__["KI_BACKSLASH"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_BACKSLASH_get
    if _newclass:KI_BACKSLASH = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_BACKSLASH_get)
    __swig_getmethods__["KI_Z"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_Z_get
    if _newclass:KI_Z = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_Z_get)
    __swig_getmethods__["KI_X"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_X_get
    if _newclass:KI_X = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_X_get)
    __swig_getmethods__["KI_C"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_C_get
    if _newclass:KI_C = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_C_get)
    __swig_getmethods__["KI_V"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_V_get
    if _newclass:KI_V = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_V_get)
    __swig_getmethods__["KI_B"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_B_get
    if _newclass:KI_B = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_B_get)
    __swig_getmethods__["KI_N"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_N_get
    if _newclass:KI_N = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_N_get)
    __swig_getmethods__["KI_M"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_M_get
    if _newclass:KI_M = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_M_get)
    __swig_getmethods__["KI_COMMA"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_COMMA_get
    if _newclass:KI_COMMA = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_COMMA_get)
    __swig_getmethods__["KI_PERIOD"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_PERIOD_get
    if _newclass:KI_PERIOD = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_PERIOD_get)
    __swig_getmethods__["KI_SLASH"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_SLASH_get
    if _newclass:KI_SLASH = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_SLASH_get)
    __swig_getmethods__["KI_RSHIFT"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_RSHIFT_get
    if _newclass:KI_RSHIFT = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_RSHIFT_get)
    __swig_getmethods__["KI_MULTIPLY"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_MULTIPLY_get
    if _newclass:KI_MULTIPLY = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_MULTIPLY_get)
    __swig_getmethods__["KI_LMENU"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_LMENU_get
    if _newclass:KI_LMENU = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_LMENU_get)
    __swig_getmethods__["KI_SPACE"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_SPACE_get
    if _newclass:KI_SPACE = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_SPACE_get)
    __swig_getmethods__["KI_CAPITAL"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_CAPITAL_get
    if _newclass:KI_CAPITAL = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_CAPITAL_get)
    __swig_getmethods__["KI_F1"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F1_get
    if _newclass:KI_F1 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F1_get)
    __swig_getmethods__["KI_F2"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F2_get
    if _newclass:KI_F2 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F2_get)
    __swig_getmethods__["KI_F3"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F3_get
    if _newclass:KI_F3 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F3_get)
    __swig_getmethods__["KI_F4"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F4_get
    if _newclass:KI_F4 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F4_get)
    __swig_getmethods__["KI_F5"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F5_get
    if _newclass:KI_F5 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F5_get)
    __swig_getmethods__["KI_F6"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F6_get
    if _newclass:KI_F6 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F6_get)
    __swig_getmethods__["KI_F7"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F7_get
    if _newclass:KI_F7 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F7_get)
    __swig_getmethods__["KI_F8"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F8_get
    if _newclass:KI_F8 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F8_get)
    __swig_getmethods__["KI_F9"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F9_get
    if _newclass:KI_F9 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F9_get)
    __swig_getmethods__["KI_F10"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F10_get
    if _newclass:KI_F10 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F10_get)
    __swig_getmethods__["KI_NUMLOCK"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NUMLOCK_get
    if _newclass:KI_NUMLOCK = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NUMLOCK_get)
    __swig_getmethods__["KI_SCROLL"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_SCROLL_get
    if _newclass:KI_SCROLL = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_SCROLL_get)
    __swig_getmethods__["KI_NUMPAD7"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NUMPAD7_get
    if _newclass:KI_NUMPAD7 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NUMPAD7_get)
    __swig_getmethods__["KI_NUMPAD8"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NUMPAD8_get
    if _newclass:KI_NUMPAD8 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NUMPAD8_get)
    __swig_getmethods__["KI_NUMPAD9"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NUMPAD9_get
    if _newclass:KI_NUMPAD9 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NUMPAD9_get)
    __swig_getmethods__["KI_SUBTRACT"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_SUBTRACT_get
    if _newclass:KI_SUBTRACT = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_SUBTRACT_get)
    __swig_getmethods__["KI_NUMPAD4"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NUMPAD4_get
    if _newclass:KI_NUMPAD4 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NUMPAD4_get)
    __swig_getmethods__["KI_NUMPAD5"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NUMPAD5_get
    if _newclass:KI_NUMPAD5 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NUMPAD5_get)
    __swig_getmethods__["KI_NUMPAD6"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NUMPAD6_get
    if _newclass:KI_NUMPAD6 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NUMPAD6_get)
    __swig_getmethods__["KI_ADD"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_ADD_get
    if _newclass:KI_ADD = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_ADD_get)
    __swig_getmethods__["KI_NUMPAD1"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NUMPAD1_get
    if _newclass:KI_NUMPAD1 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NUMPAD1_get)
    __swig_getmethods__["KI_NUMPAD2"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NUMPAD2_get
    if _newclass:KI_NUMPAD2 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NUMPAD2_get)
    __swig_getmethods__["KI_NUMPAD3"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NUMPAD3_get
    if _newclass:KI_NUMPAD3 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NUMPAD3_get)
    __swig_getmethods__["KI_NUMPAD0"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NUMPAD0_get
    if _newclass:KI_NUMPAD0 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NUMPAD0_get)
    __swig_getmethods__["KI_DECIMAL"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_DECIMAL_get
    if _newclass:KI_DECIMAL = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_DECIMAL_get)
    __swig_getmethods__["KI_OEM_102"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_OEM_102_get
    if _newclass:KI_OEM_102 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_OEM_102_get)
    __swig_getmethods__["KI_F11"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F11_get
    if _newclass:KI_F11 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F11_get)
    __swig_getmethods__["KI_F12"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F12_get
    if _newclass:KI_F12 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F12_get)
    __swig_getmethods__["KI_F13"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F13_get
    if _newclass:KI_F13 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F13_get)
    __swig_getmethods__["KI_F14"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F14_get
    if _newclass:KI_F14 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F14_get)
    __swig_getmethods__["KI_F15"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F15_get
    if _newclass:KI_F15 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_F15_get)
    __swig_getmethods__["KI_KANA"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_KANA_get
    if _newclass:KI_KANA = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_KANA_get)
    __swig_getmethods__["KI_ABNT_C1"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_ABNT_C1_get
    if _newclass:KI_ABNT_C1 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_ABNT_C1_get)
    __swig_getmethods__["KI_CONVERT"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_CONVERT_get
    if _newclass:KI_CONVERT = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_CONVERT_get)
    __swig_getmethods__["KI_NOCONVERT"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NOCONVERT_get
    if _newclass:KI_NOCONVERT = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NOCONVERT_get)
    __swig_getmethods__["KI_YEN"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_YEN_get
    if _newclass:KI_YEN = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_YEN_get)
    __swig_getmethods__["KI_ABNT_C2"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_ABNT_C2_get
    if _newclass:KI_ABNT_C2 = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_ABNT_C2_get)
    __swig_getmethods__["KI_NUMPADEQUALS"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NUMPADEQUALS_get
    if _newclass:KI_NUMPADEQUALS = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NUMPADEQUALS_get)
    __swig_getmethods__["KI_PREVTRACK"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_PREVTRACK_get
    if _newclass:KI_PREVTRACK = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_PREVTRACK_get)
    __swig_getmethods__["KI_AT"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_AT_get
    if _newclass:KI_AT = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_AT_get)
    __swig_getmethods__["KI_COLON"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_COLON_get
    if _newclass:KI_COLON = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_COLON_get)
    __swig_getmethods__["KI_UNDERLINE"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_UNDERLINE_get
    if _newclass:KI_UNDERLINE = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_UNDERLINE_get)
    __swig_getmethods__["KI_KANJI"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_KANJI_get
    if _newclass:KI_KANJI = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_KANJI_get)
    __swig_getmethods__["KI_STOP"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_STOP_get
    if _newclass:KI_STOP = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_STOP_get)
    __swig_getmethods__["KI_AX"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_AX_get
    if _newclass:KI_AX = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_AX_get)
    __swig_getmethods__["KI_UNLABELED"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_UNLABELED_get
    if _newclass:KI_UNLABELED = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_UNLABELED_get)
    __swig_getmethods__["KI_NEXTTRACK"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NEXTTRACK_get
    if _newclass:KI_NEXTTRACK = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NEXTTRACK_get)
    __swig_getmethods__["KI_NUMPADENTER"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NUMPADENTER_get
    if _newclass:KI_NUMPADENTER = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NUMPADENTER_get)
    __swig_getmethods__["KI_RCONTROL"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_RCONTROL_get
    if _newclass:KI_RCONTROL = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_RCONTROL_get)
    __swig_getmethods__["KI_MUTE"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_MUTE_get
    if _newclass:KI_MUTE = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_MUTE_get)
    __swig_getmethods__["KI_CALCULATOR"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_CALCULATOR_get
    if _newclass:KI_CALCULATOR = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_CALCULATOR_get)
    __swig_getmethods__["KI_PLAYPAUSE"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_PLAYPAUSE_get
    if _newclass:KI_PLAYPAUSE = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_PLAYPAUSE_get)
    __swig_getmethods__["KI_MEDIASTOP"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_MEDIASTOP_get
    if _newclass:KI_MEDIASTOP = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_MEDIASTOP_get)
    __swig_getmethods__["KI_VOLUMEDOWN"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_VOLUMEDOWN_get
    if _newclass:KI_VOLUMEDOWN = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_VOLUMEDOWN_get)
    __swig_getmethods__["KI_VOLUMEUP"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_VOLUMEUP_get
    if _newclass:KI_VOLUMEUP = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_VOLUMEUP_get)
    __swig_getmethods__["KI_WEBHOME"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_WEBHOME_get
    if _newclass:KI_WEBHOME = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_WEBHOME_get)
    __swig_getmethods__["KI_NUMPADCOMMA"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NUMPADCOMMA_get
    if _newclass:KI_NUMPADCOMMA = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_NUMPADCOMMA_get)
    __swig_getmethods__["KI_DIVIDE"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_DIVIDE_get
    if _newclass:KI_DIVIDE = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_DIVIDE_get)
    __swig_getmethods__["KI_SYSRQ"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_SYSRQ_get
    if _newclass:KI_SYSRQ = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_SYSRQ_get)
    __swig_getmethods__["KI_RMENU"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_RMENU_get
    if _newclass:KI_RMENU = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_RMENU_get)
    __swig_getmethods__["KI_PAUSE"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_PAUSE_get
    if _newclass:KI_PAUSE = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_PAUSE_get)
    __swig_getmethods__["KI_HOME"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_HOME_get
    if _newclass:KI_HOME = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_HOME_get)
    __swig_getmethods__["KI_UP"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_UP_get
    if _newclass:KI_UP = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_UP_get)
    __swig_getmethods__["KI_PGUP"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_PGUP_get
    if _newclass:KI_PGUP = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_PGUP_get)
    __swig_getmethods__["KI_LEFT"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_LEFT_get
    if _newclass:KI_LEFT = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_LEFT_get)
    __swig_getmethods__["KI_RIGHT"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_RIGHT_get
    if _newclass:KI_RIGHT = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_RIGHT_get)
    __swig_getmethods__["KI_END"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_END_get
    if _newclass:KI_END = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_END_get)
    __swig_getmethods__["KI_DOWN"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_DOWN_get
    if _newclass:KI_DOWN = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_DOWN_get)
    __swig_getmethods__["KI_PGDOWN"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_PGDOWN_get
    if _newclass:KI_PGDOWN = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_PGDOWN_get)
    __swig_getmethods__["KI_INSERT"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_INSERT_get
    if _newclass:KI_INSERT = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_INSERT_get)
    __swig_getmethods__["KI_DELETE"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_DELETE_get
    if _newclass:KI_DELETE = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_DELETE_get)
    __swig_getmethods__["KI_LWIN"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_LWIN_get
    if _newclass:KI_LWIN = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_LWIN_get)
    __swig_getmethods__["KI_RWIN"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_RWIN_get
    if _newclass:KI_RWIN = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_RWIN_get)
    __swig_getmethods__["KI_APPS"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_APPS_get
    if _newclass:KI_APPS = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_APPS_get)
    __swig_getmethods__["KI_POWER"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_POWER_get
    if _newclass:KI_POWER = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_POWER_get)
    __swig_getmethods__["KI_SLEEP"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_SLEEP_get
    if _newclass:KI_SLEEP = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_SLEEP_get)
    __swig_getmethods__["KI_WAKE"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_WAKE_get
    if _newclass:KI_WAKE = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_WAKE_get)
    __swig_getmethods__["KI_WEBSEARCH"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_WEBSEARCH_get
    if _newclass:KI_WEBSEARCH = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_WEBSEARCH_get)
    __swig_getmethods__["KI_WEBFAVORITES"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_WEBFAVORITES_get
    if _newclass:KI_WEBFAVORITES = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_WEBFAVORITES_get)
    __swig_getmethods__["KI_WEBREFRESH"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_WEBREFRESH_get
    if _newclass:KI_WEBREFRESH = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_WEBREFRESH_get)
    __swig_getmethods__["KI_WEBSTOP"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_WEBSTOP_get
    if _newclass:KI_WEBSTOP = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_WEBSTOP_get)
    __swig_getmethods__["KI_WEBFORWARD"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_WEBFORWARD_get
    if _newclass:KI_WEBFORWARD = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_WEBFORWARD_get)
    __swig_getmethods__["KI_WEBBACK"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_WEBBACK_get
    if _newclass:KI_WEBBACK = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_WEBBACK_get)
    __swig_getmethods__["KI_MYCOMPUTER"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_MYCOMPUTER_get
    if _newclass:KI_MYCOMPUTER = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_MYCOMPUTER_get)
    __swig_getmethods__["KI_MAIL"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_MAIL_get
    if _newclass:KI_MAIL = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_MAIL_get)
    __swig_getmethods__["KI_MEDIASELECT"] = _Myoushu.AutoPtr_KeyboardOISInputDevice_KI_MEDIASELECT_get
    if _newclass:KI_MEDIASELECT = _swig_property(_Myoushu.AutoPtr_KeyboardOISInputDevice_KI_MEDIASELECT_get)
    def getDeviceType(self): return _Myoushu.AutoPtr_KeyboardOISInputDevice_getDeviceType(self)
    def getName(self): return _Myoushu.AutoPtr_KeyboardOISInputDevice_getName(self)
    def release(self): return _Myoushu.AutoPtr_KeyboardOISInputDevice_release(self)
    def referenceCount(self): return _Myoushu.AutoPtr_KeyboardOISInputDevice_referenceCount(self)
AutoPtr_KeyboardOISInputDevice_swigregister = _Myoushu.AutoPtr_KeyboardOISInputDevice_swigregister
AutoPtr_KeyboardOISInputDevice_swigregister(AutoPtr_KeyboardOISInputDevice)

class AutoPtr_Message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoPtr_Message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutoPtr_Message, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_AutoPtr_Message(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_AutoPtr_Message
    __del__ = lambda self : None;
    def assign(self, *args): return _Myoushu.AutoPtr_Message_assign(self, *args)
    def swap(self, *args): return _Myoushu.AutoPtr_Message_swap(self, *args)
    def __deref__(self, *args): return _Myoushu.AutoPtr_Message___deref__(self, *args)
    def __ref__(self, *args): return _Myoushu.AutoPtr_Message___ref__(self, *args)
    def get(self, *args): return _Myoushu.AutoPtr_Message_get(self, *args)
    def isNull(self): return _Myoushu.AutoPtr_Message_isNull(self)
    def duplicate(self): return _Myoushu.AutoPtr_Message_duplicate(self)
    def __eq__(self, *args): return _Myoushu.AutoPtr_Message___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.AutoPtr_Message___ne__(self, *args)
    def __lt__(self, *args): return _Myoushu.AutoPtr_Message___lt__(self, *args)
    def __le__(self, *args): return _Myoushu.AutoPtr_Message___le__(self, *args)
    def __gt__(self, *args): return _Myoushu.AutoPtr_Message___gt__(self, *args)
    def __ge__(self, *args): return _Myoushu.AutoPtr_Message___ge__(self, *args)
    def getClassName(self): return _Myoushu.AutoPtr_Message_getClassName(self)
    def clone(self): return _Myoushu.AutoPtr_Message_clone(self)
    def getCreator(self): return _Myoushu.AutoPtr_Message_getCreator(self)
    def serialize(self, *args): return _Myoushu.AutoPtr_Message_serialize(self, *args)
AutoPtr_Message_swigregister = _Myoushu.AutoPtr_Message_swigregister
AutoPtr_Message_swigregister(AutoPtr_Message)

class AutoPtr_MouseOISInputDevice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoPtr_MouseOISInputDevice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutoPtr_MouseOISInputDevice, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_AutoPtr_MouseOISInputDevice(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_AutoPtr_MouseOISInputDevice
    __del__ = lambda self : None;
    def assign(self, *args): return _Myoushu.AutoPtr_MouseOISInputDevice_assign(self, *args)
    def swap(self, *args): return _Myoushu.AutoPtr_MouseOISInputDevice_swap(self, *args)
    def __deref__(self, *args): return _Myoushu.AutoPtr_MouseOISInputDevice___deref__(self, *args)
    def __ref__(self, *args): return _Myoushu.AutoPtr_MouseOISInputDevice___ref__(self, *args)
    def get(self, *args): return _Myoushu.AutoPtr_MouseOISInputDevice_get(self, *args)
    def isNull(self): return _Myoushu.AutoPtr_MouseOISInputDevice_isNull(self)
    def duplicate(self): return _Myoushu.AutoPtr_MouseOISInputDevice_duplicate(self)
    def __eq__(self, *args): return _Myoushu.AutoPtr_MouseOISInputDevice___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.AutoPtr_MouseOISInputDevice___ne__(self, *args)
    def __lt__(self, *args): return _Myoushu.AutoPtr_MouseOISInputDevice___lt__(self, *args)
    def __le__(self, *args): return _Myoushu.AutoPtr_MouseOISInputDevice___le__(self, *args)
    def __gt__(self, *args): return _Myoushu.AutoPtr_MouseOISInputDevice___gt__(self, *args)
    def __ge__(self, *args): return _Myoushu.AutoPtr_MouseOISInputDevice___ge__(self, *args)
    __swig_getmethods__["INPUT_DEVICE_NAME"] = _Myoushu.AutoPtr_MouseOISInputDevice_INPUT_DEVICE_NAME_get
    if _newclass:INPUT_DEVICE_NAME = _swig_property(_Myoushu.AutoPtr_MouseOISInputDevice_INPUT_DEVICE_NAME_get)
    def getInputEventString(self, *args): return _Myoushu.AutoPtr_MouseOISInputDevice_getInputEventString(self, *args)
    def getInputCodeFromInputIdentifier(self, *args): return _Myoushu.AutoPtr_MouseOISInputDevice_getInputCodeFromInputIdentifier(self, *args)
    def getInputIdentifierFromInputCode(self, *args): return _Myoushu.AutoPtr_MouseOISInputDevice_getInputIdentifierFromInputCode(self, *args)
    __swig_getmethods__["MI_X_AXIS"] = _Myoushu.AutoPtr_MouseOISInputDevice_MI_X_AXIS_get
    if _newclass:MI_X_AXIS = _swig_property(_Myoushu.AutoPtr_MouseOISInputDevice_MI_X_AXIS_get)
    __swig_getmethods__["MI_Y_AXIS"] = _Myoushu.AutoPtr_MouseOISInputDevice_MI_Y_AXIS_get
    if _newclass:MI_Y_AXIS = _swig_property(_Myoushu.AutoPtr_MouseOISInputDevice_MI_Y_AXIS_get)
    __swig_getmethods__["MI_WHEEL"] = _Myoushu.AutoPtr_MouseOISInputDevice_MI_WHEEL_get
    if _newclass:MI_WHEEL = _swig_property(_Myoushu.AutoPtr_MouseOISInputDevice_MI_WHEEL_get)
    __swig_getmethods__["MI_BUTTON"] = _Myoushu.AutoPtr_MouseOISInputDevice_MI_BUTTON_get
    if _newclass:MI_BUTTON = _swig_property(_Myoushu.AutoPtr_MouseOISInputDevice_MI_BUTTON_get)
    __swig_getmethods__["MI_BUTTON_0"] = _Myoushu.AutoPtr_MouseOISInputDevice_MI_BUTTON_0_get
    if _newclass:MI_BUTTON_0 = _swig_property(_Myoushu.AutoPtr_MouseOISInputDevice_MI_BUTTON_0_get)
    __swig_getmethods__["MI_BUTTON_1"] = _Myoushu.AutoPtr_MouseOISInputDevice_MI_BUTTON_1_get
    if _newclass:MI_BUTTON_1 = _swig_property(_Myoushu.AutoPtr_MouseOISInputDevice_MI_BUTTON_1_get)
    __swig_getmethods__["MI_BUTTON_2"] = _Myoushu.AutoPtr_MouseOISInputDevice_MI_BUTTON_2_get
    if _newclass:MI_BUTTON_2 = _swig_property(_Myoushu.AutoPtr_MouseOISInputDevice_MI_BUTTON_2_get)
    __swig_getmethods__["MI_BUTTON_3"] = _Myoushu.AutoPtr_MouseOISInputDevice_MI_BUTTON_3_get
    if _newclass:MI_BUTTON_3 = _swig_property(_Myoushu.AutoPtr_MouseOISInputDevice_MI_BUTTON_3_get)
    __swig_getmethods__["MI_BUTTON_4"] = _Myoushu.AutoPtr_MouseOISInputDevice_MI_BUTTON_4_get
    if _newclass:MI_BUTTON_4 = _swig_property(_Myoushu.AutoPtr_MouseOISInputDevice_MI_BUTTON_4_get)
    __swig_getmethods__["MI_BUTTON_5"] = _Myoushu.AutoPtr_MouseOISInputDevice_MI_BUTTON_5_get
    if _newclass:MI_BUTTON_5 = _swig_property(_Myoushu.AutoPtr_MouseOISInputDevice_MI_BUTTON_5_get)
    __swig_getmethods__["MI_BUTTON_6"] = _Myoushu.AutoPtr_MouseOISInputDevice_MI_BUTTON_6_get
    if _newclass:MI_BUTTON_6 = _swig_property(_Myoushu.AutoPtr_MouseOISInputDevice_MI_BUTTON_6_get)
    __swig_getmethods__["MI_BUTTON_7"] = _Myoushu.AutoPtr_MouseOISInputDevice_MI_BUTTON_7_get
    if _newclass:MI_BUTTON_7 = _swig_property(_Myoushu.AutoPtr_MouseOISInputDevice_MI_BUTTON_7_get)
    __swig_getmethods__["MI_BUTTON_8"] = _Myoushu.AutoPtr_MouseOISInputDevice_MI_BUTTON_8_get
    if _newclass:MI_BUTTON_8 = _swig_property(_Myoushu.AutoPtr_MouseOISInputDevice_MI_BUTTON_8_get)
    __swig_getmethods__["MI_BUTTON_9"] = _Myoushu.AutoPtr_MouseOISInputDevice_MI_BUTTON_9_get
    if _newclass:MI_BUTTON_9 = _swig_property(_Myoushu.AutoPtr_MouseOISInputDevice_MI_BUTTON_9_get)
    def getDeviceType(self): return _Myoushu.AutoPtr_MouseOISInputDevice_getDeviceType(self)
    def getName(self): return _Myoushu.AutoPtr_MouseOISInputDevice_getName(self)
    def release(self): return _Myoushu.AutoPtr_MouseOISInputDevice_release(self)
    def referenceCount(self): return _Myoushu.AutoPtr_MouseOISInputDevice_referenceCount(self)
AutoPtr_MouseOISInputDevice_swigregister = _Myoushu.AutoPtr_MouseOISInputDevice_swigregister
AutoPtr_MouseOISInputDevice_swigregister(AutoPtr_MouseOISInputDevice)

class AutoPtr_NetworkMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoPtr_NetworkMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutoPtr_NetworkMessage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_AutoPtr_NetworkMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_AutoPtr_NetworkMessage
    __del__ = lambda self : None;
    def assign(self, *args): return _Myoushu.AutoPtr_NetworkMessage_assign(self, *args)
    def swap(self, *args): return _Myoushu.AutoPtr_NetworkMessage_swap(self, *args)
    def __deref__(self, *args): return _Myoushu.AutoPtr_NetworkMessage___deref__(self, *args)
    def __ref__(self, *args): return _Myoushu.AutoPtr_NetworkMessage___ref__(self, *args)
    def get(self, *args): return _Myoushu.AutoPtr_NetworkMessage_get(self, *args)
    def isNull(self): return _Myoushu.AutoPtr_NetworkMessage_isNull(self)
    def duplicate(self): return _Myoushu.AutoPtr_NetworkMessage_duplicate(self)
    def __eq__(self, *args): return _Myoushu.AutoPtr_NetworkMessage___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.AutoPtr_NetworkMessage___ne__(self, *args)
    def __lt__(self, *args): return _Myoushu.AutoPtr_NetworkMessage___lt__(self, *args)
    def __le__(self, *args): return _Myoushu.AutoPtr_NetworkMessage___le__(self, *args)
    def __gt__(self, *args): return _Myoushu.AutoPtr_NetworkMessage___gt__(self, *args)
    def __ge__(self, *args): return _Myoushu.AutoPtr_NetworkMessage___ge__(self, *args)
    def getClassName(self): return _Myoushu.AutoPtr_NetworkMessage_getClassName(self)
    def getType(self): return _Myoushu.AutoPtr_NetworkMessage_getType(self)
    def getDestination(self): return _Myoushu.AutoPtr_NetworkMessage_getDestination(self)
    def getSource(self): return _Myoushu.AutoPtr_NetworkMessage_getSource(self)
    def getSourceAsString(self): return _Myoushu.AutoPtr_NetworkMessage_getSourceAsString(self)
    def getObjectName(self): return _Myoushu.AutoPtr_NetworkMessage_getObjectName(self)
    def getObjectClassName(self): return _Myoushu.AutoPtr_NetworkMessage_getObjectClassName(self)
    def clone(self, *args): return _Myoushu.AutoPtr_NetworkMessage_clone(self, *args)
    def serialize(self, *args): return _Myoushu.AutoPtr_NetworkMessage_serialize(self, *args)
    def getCreator(self): return _Myoushu.AutoPtr_NetworkMessage_getCreator(self)
AutoPtr_NetworkMessage_swigregister = _Myoushu.AutoPtr_NetworkMessage_swigregister
AutoPtr_NetworkMessage_swigregister(AutoPtr_NetworkMessage)

class AutoPtr_ScriptMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoPtr_ScriptMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutoPtr_ScriptMessage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_AutoPtr_ScriptMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_AutoPtr_ScriptMessage
    __del__ = lambda self : None;
    def assign(self, *args): return _Myoushu.AutoPtr_ScriptMessage_assign(self, *args)
    def swap(self, *args): return _Myoushu.AutoPtr_ScriptMessage_swap(self, *args)
    def __deref__(self, *args): return _Myoushu.AutoPtr_ScriptMessage___deref__(self, *args)
    def __ref__(self, *args): return _Myoushu.AutoPtr_ScriptMessage___ref__(self, *args)
    def get(self, *args): return _Myoushu.AutoPtr_ScriptMessage_get(self, *args)
    def isNull(self): return _Myoushu.AutoPtr_ScriptMessage_isNull(self)
    def duplicate(self): return _Myoushu.AutoPtr_ScriptMessage_duplicate(self)
    def __eq__(self, *args): return _Myoushu.AutoPtr_ScriptMessage___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.AutoPtr_ScriptMessage___ne__(self, *args)
    def __lt__(self, *args): return _Myoushu.AutoPtr_ScriptMessage___lt__(self, *args)
    def __le__(self, *args): return _Myoushu.AutoPtr_ScriptMessage___le__(self, *args)
    def __gt__(self, *args): return _Myoushu.AutoPtr_ScriptMessage___gt__(self, *args)
    def __ge__(self, *args): return _Myoushu.AutoPtr_ScriptMessage___ge__(self, *args)
    def getClassName(self): return _Myoushu.AutoPtr_ScriptMessage_getClassName(self)
    def getMessageType(self): return _Myoushu.AutoPtr_ScriptMessage_getMessageType(self)
    def getScript(self): return _Myoushu.AutoPtr_ScriptMessage_getScript(self)
    def clone(self, *args): return _Myoushu.AutoPtr_ScriptMessage_clone(self, *args)
    def getCreator(self): return _Myoushu.AutoPtr_ScriptMessage_getCreator(self)
    def serialize(self, *args): return _Myoushu.AutoPtr_ScriptMessage_serialize(self, *args)
AutoPtr_ScriptMessage_swigregister = _Myoushu.AutoPtr_ScriptMessage_swigregister
AutoPtr_ScriptMessage_swigregister(AutoPtr_ScriptMessage)

class AutoPtr_Task(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoPtr_Task, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutoPtr_Task, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_AutoPtr_Task(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_AutoPtr_Task
    __del__ = lambda self : None;
    def assign(self, *args): return _Myoushu.AutoPtr_Task_assign(self, *args)
    def swap(self, *args): return _Myoushu.AutoPtr_Task_swap(self, *args)
    def __deref__(self, *args): return _Myoushu.AutoPtr_Task___deref__(self, *args)
    def __ref__(self, *args): return _Myoushu.AutoPtr_Task___ref__(self, *args)
    def get(self, *args): return _Myoushu.AutoPtr_Task_get(self, *args)
    def isNull(self): return _Myoushu.AutoPtr_Task_isNull(self)
    def duplicate(self): return _Myoushu.AutoPtr_Task_duplicate(self)
    def __eq__(self, *args): return _Myoushu.AutoPtr_Task___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.AutoPtr_Task___ne__(self, *args)
    def __lt__(self, *args): return _Myoushu.AutoPtr_Task___lt__(self, *args)
    def __le__(self, *args): return _Myoushu.AutoPtr_Task___le__(self, *args)
    def __gt__(self, *args): return _Myoushu.AutoPtr_Task___gt__(self, *args)
    def __ge__(self, *args): return _Myoushu.AutoPtr_Task___ge__(self, *args)
    def getClassName(self): return _Myoushu.AutoPtr_Task_getClassName(self)
    def getPriority(self): return _Myoushu.AutoPtr_Task_getPriority(self)
    def getExecutionInterval(self): return _Myoushu.AutoPtr_Task_getExecutionInterval(self)
    def getIterationLimit(self): return _Myoushu.AutoPtr_Task_getIterationLimit(self)
    def getState(self): return _Myoushu.AutoPtr_Task_getState(self)
    def getTimeLastExecuted(self): return _Myoushu.AutoPtr_Task_getTimeLastExecuted(self)
    def getName(self): return _Myoushu.AutoPtr_Task_getName(self)
    def serialize(self, *args): return _Myoushu.AutoPtr_Task_serialize(self, *args)
    def release(self): return _Myoushu.AutoPtr_Task_release(self)
    def referenceCount(self): return _Myoushu.AutoPtr_Task_referenceCount(self)
AutoPtr_Task_swigregister = _Myoushu.AutoPtr_Task_swigregister
AutoPtr_Task_swigregister(AutoPtr_Task)

class AutoPtr_TimerTaskMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoPtr_TimerTaskMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutoPtr_TimerTaskMessage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_AutoPtr_TimerTaskMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_AutoPtr_TimerTaskMessage
    __del__ = lambda self : None;
    def assign(self, *args): return _Myoushu.AutoPtr_TimerTaskMessage_assign(self, *args)
    def swap(self, *args): return _Myoushu.AutoPtr_TimerTaskMessage_swap(self, *args)
    def __deref__(self, *args): return _Myoushu.AutoPtr_TimerTaskMessage___deref__(self, *args)
    def __ref__(self, *args): return _Myoushu.AutoPtr_TimerTaskMessage___ref__(self, *args)
    def get(self, *args): return _Myoushu.AutoPtr_TimerTaskMessage_get(self, *args)
    def isNull(self): return _Myoushu.AutoPtr_TimerTaskMessage_isNull(self)
    def duplicate(self): return _Myoushu.AutoPtr_TimerTaskMessage_duplicate(self)
    def __eq__(self, *args): return _Myoushu.AutoPtr_TimerTaskMessage___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.AutoPtr_TimerTaskMessage___ne__(self, *args)
    def __lt__(self, *args): return _Myoushu.AutoPtr_TimerTaskMessage___lt__(self, *args)
    def __le__(self, *args): return _Myoushu.AutoPtr_TimerTaskMessage___le__(self, *args)
    def __gt__(self, *args): return _Myoushu.AutoPtr_TimerTaskMessage___gt__(self, *args)
    def __ge__(self, *args): return _Myoushu.AutoPtr_TimerTaskMessage___ge__(self, *args)
    def getClassName(self): return _Myoushu.AutoPtr_TimerTaskMessage_getClassName(self)
    def getMessageType(self): return _Myoushu.AutoPtr_TimerTaskMessage_getMessageType(self)
    def getAbsTime(self): return _Myoushu.AutoPtr_TimerTaskMessage_getAbsTime(self)
    def getDelta(self): return _Myoushu.AutoPtr_TimerTaskMessage_getDelta(self)
    def clone(self, *args): return _Myoushu.AutoPtr_TimerTaskMessage_clone(self, *args)
    def getCreator(self): return _Myoushu.AutoPtr_TimerTaskMessage_getCreator(self)
    def serialize(self, *args): return _Myoushu.AutoPtr_TimerTaskMessage_serialize(self, *args)
AutoPtr_TimerTaskMessage_swigregister = _Myoushu.AutoPtr_TimerTaskMessage_swigregister
AutoPtr_TimerTaskMessage_swigregister(AutoPtr_TimerTaskMessage)

class AutoPtr_Sound(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoPtr_Sound, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutoPtr_Sound, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_AutoPtr_Sound(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_AutoPtr_Sound
    __del__ = lambda self : None;
    def assign(self, *args): return _Myoushu.AutoPtr_Sound_assign(self, *args)
    def swap(self, *args): return _Myoushu.AutoPtr_Sound_swap(self, *args)
    def __deref__(self, *args): return _Myoushu.AutoPtr_Sound___deref__(self, *args)
    def __ref__(self, *args): return _Myoushu.AutoPtr_Sound___ref__(self, *args)
    def get(self, *args): return _Myoushu.AutoPtr_Sound_get(self, *args)
    def isNull(self): return _Myoushu.AutoPtr_Sound_isNull(self)
    def duplicate(self): return _Myoushu.AutoPtr_Sound_duplicate(self)
    def __eq__(self, *args): return _Myoushu.AutoPtr_Sound___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.AutoPtr_Sound___ne__(self, *args)
    def __lt__(self, *args): return _Myoushu.AutoPtr_Sound___lt__(self, *args)
    def __le__(self, *args): return _Myoushu.AutoPtr_Sound___le__(self, *args)
    def __gt__(self, *args): return _Myoushu.AutoPtr_Sound___gt__(self, *args)
    def __ge__(self, *args): return _Myoushu.AutoPtr_Sound___ge__(self, *args)
    def getClassName(self): return _Myoushu.AutoPtr_Sound_getClassName(self)
    def getName(self): return _Myoushu.AutoPtr_Sound_getName(self)
    def serialize(self, *args): return _Myoushu.AutoPtr_Sound_serialize(self, *args)
    def release(self): return _Myoushu.AutoPtr_Sound_release(self)
    def referenceCount(self): return _Myoushu.AutoPtr_Sound_referenceCount(self)
AutoPtr_Sound_swigregister = _Myoushu.AutoPtr_Sound_swigregister
AutoPtr_Sound_swigregister(AutoPtr_Sound)

class AutoPtr_GameLogMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoPtr_GameLogMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutoPtr_GameLogMessage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_AutoPtr_GameLogMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_AutoPtr_GameLogMessage
    __del__ = lambda self : None;
    def assign(self, *args): return _Myoushu.AutoPtr_GameLogMessage_assign(self, *args)
    def swap(self, *args): return _Myoushu.AutoPtr_GameLogMessage_swap(self, *args)
    def __deref__(self, *args): return _Myoushu.AutoPtr_GameLogMessage___deref__(self, *args)
    def __ref__(self, *args): return _Myoushu.AutoPtr_GameLogMessage___ref__(self, *args)
    def get(self, *args): return _Myoushu.AutoPtr_GameLogMessage_get(self, *args)
    def isNull(self): return _Myoushu.AutoPtr_GameLogMessage_isNull(self)
    def duplicate(self): return _Myoushu.AutoPtr_GameLogMessage_duplicate(self)
    def __eq__(self, *args): return _Myoushu.AutoPtr_GameLogMessage___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.AutoPtr_GameLogMessage___ne__(self, *args)
    def __lt__(self, *args): return _Myoushu.AutoPtr_GameLogMessage___lt__(self, *args)
    def __le__(self, *args): return _Myoushu.AutoPtr_GameLogMessage___le__(self, *args)
    def __gt__(self, *args): return _Myoushu.AutoPtr_GameLogMessage___gt__(self, *args)
    def __ge__(self, *args): return _Myoushu.AutoPtr_GameLogMessage___ge__(self, *args)
AutoPtr_GameLogMessage_swigregister = _Myoushu.AutoPtr_GameLogMessage_swigregister
AutoPtr_GameLogMessage_swigregister(AutoPtr_GameLogMessage)

class AutoPtr_GameLogEntity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoPtr_GameLogEntity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutoPtr_GameLogEntity, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_AutoPtr_GameLogEntity(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_AutoPtr_GameLogEntity
    __del__ = lambda self : None;
    def assign(self, *args): return _Myoushu.AutoPtr_GameLogEntity_assign(self, *args)
    def swap(self, *args): return _Myoushu.AutoPtr_GameLogEntity_swap(self, *args)
    def __deref__(self, *args): return _Myoushu.AutoPtr_GameLogEntity___deref__(self, *args)
    def __ref__(self, *args): return _Myoushu.AutoPtr_GameLogEntity___ref__(self, *args)
    def get(self, *args): return _Myoushu.AutoPtr_GameLogEntity_get(self, *args)
    def isNull(self): return _Myoushu.AutoPtr_GameLogEntity_isNull(self)
    def duplicate(self): return _Myoushu.AutoPtr_GameLogEntity_duplicate(self)
    def __eq__(self, *args): return _Myoushu.AutoPtr_GameLogEntity___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.AutoPtr_GameLogEntity___ne__(self, *args)
    def __lt__(self, *args): return _Myoushu.AutoPtr_GameLogEntity___lt__(self, *args)
    def __le__(self, *args): return _Myoushu.AutoPtr_GameLogEntity___le__(self, *args)
    def __gt__(self, *args): return _Myoushu.AutoPtr_GameLogEntity___gt__(self, *args)
    def __ge__(self, *args): return _Myoushu.AutoPtr_GameLogEntity___ge__(self, *args)
    def getClassName(self): return _Myoushu.AutoPtr_GameLogEntity_getClassName(self)
    def getAttributeNames(self): return _Myoushu.AutoPtr_GameLogEntity_getAttributeNames(self)
    def attributeNamesBegin(self): return _Myoushu.AutoPtr_GameLogEntity_attributeNamesBegin(self)
    def attributeNamesEnd(self): return _Myoushu.AutoPtr_GameLogEntity_attributeNamesEnd(self)
    def keyAttributesBegin(self): return _Myoushu.AutoPtr_GameLogEntity_keyAttributesBegin(self)
    def keyAttributesEnd(self): return _Myoushu.AutoPtr_GameLogEntity_keyAttributesEnd(self)
    def getName(self): return _Myoushu.AutoPtr_GameLogEntity_getName(self)
    def serialize(self, *args): return _Myoushu.AutoPtr_GameLogEntity_serialize(self, *args)
    def release(self): return _Myoushu.AutoPtr_GameLogEntity_release(self)
    def referenceCount(self): return _Myoushu.AutoPtr_GameLogEntity_referenceCount(self)
AutoPtr_GameLogEntity_swigregister = _Myoushu.AutoPtr_GameLogEntity_swigregister
AutoPtr_GameLogEntity_swigregister(AutoPtr_GameLogEntity)

class AutoPtr_ReplayMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoPtr_ReplayMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutoPtr_ReplayMessage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_AutoPtr_ReplayMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_AutoPtr_ReplayMessage
    __del__ = lambda self : None;
    def assign(self, *args): return _Myoushu.AutoPtr_ReplayMessage_assign(self, *args)
    def swap(self, *args): return _Myoushu.AutoPtr_ReplayMessage_swap(self, *args)
    def __deref__(self, *args): return _Myoushu.AutoPtr_ReplayMessage___deref__(self, *args)
    def __ref__(self, *args): return _Myoushu.AutoPtr_ReplayMessage___ref__(self, *args)
    def get(self, *args): return _Myoushu.AutoPtr_ReplayMessage_get(self, *args)
    def isNull(self): return _Myoushu.AutoPtr_ReplayMessage_isNull(self)
    def duplicate(self): return _Myoushu.AutoPtr_ReplayMessage_duplicate(self)
    def __eq__(self, *args): return _Myoushu.AutoPtr_ReplayMessage___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.AutoPtr_ReplayMessage___ne__(self, *args)
    def __lt__(self, *args): return _Myoushu.AutoPtr_ReplayMessage___lt__(self, *args)
    def __le__(self, *args): return _Myoushu.AutoPtr_ReplayMessage___le__(self, *args)
    def __gt__(self, *args): return _Myoushu.AutoPtr_ReplayMessage___gt__(self, *args)
    def __ge__(self, *args): return _Myoushu.AutoPtr_ReplayMessage___ge__(self, *args)
    def getClassName(self): return _Myoushu.AutoPtr_ReplayMessage_getClassName(self)
    def getMessageType(self): return _Myoushu.AutoPtr_ReplayMessage_getMessageType(self)
    def getReplayName(self): return _Myoushu.AutoPtr_ReplayMessage_getReplayName(self)
    def getReplay(self): return _Myoushu.AutoPtr_ReplayMessage_getReplay(self)
    def clone(self): return _Myoushu.AutoPtr_ReplayMessage_clone(self)
    def getCreator(self): return _Myoushu.AutoPtr_ReplayMessage_getCreator(self)
    def serialize(self, *args): return _Myoushu.AutoPtr_ReplayMessage_serialize(self, *args)
AutoPtr_ReplayMessage_swigregister = _Myoushu.AutoPtr_ReplayMessage_swigregister
AutoPtr_ReplayMessage_swigregister(AutoPtr_ReplayMessage)

class AutoPtr_Replay(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoPtr_Replay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutoPtr_Replay, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_AutoPtr_Replay(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_AutoPtr_Replay
    __del__ = lambda self : None;
    def assign(self, *args): return _Myoushu.AutoPtr_Replay_assign(self, *args)
    def swap(self, *args): return _Myoushu.AutoPtr_Replay_swap(self, *args)
    def __deref__(self, *args): return _Myoushu.AutoPtr_Replay___deref__(self, *args)
    def __ref__(self, *args): return _Myoushu.AutoPtr_Replay___ref__(self, *args)
    def get(self, *args): return _Myoushu.AutoPtr_Replay_get(self, *args)
    def isNull(self): return _Myoushu.AutoPtr_Replay_isNull(self)
    def duplicate(self): return _Myoushu.AutoPtr_Replay_duplicate(self)
    def __eq__(self, *args): return _Myoushu.AutoPtr_Replay___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.AutoPtr_Replay___ne__(self, *args)
    def __lt__(self, *args): return _Myoushu.AutoPtr_Replay___lt__(self, *args)
    def __le__(self, *args): return _Myoushu.AutoPtr_Replay___le__(self, *args)
    def __gt__(self, *args): return _Myoushu.AutoPtr_Replay___gt__(self, *args)
    def __ge__(self, *args): return _Myoushu.AutoPtr_Replay___ge__(self, *args)
    def getClassName(self): return _Myoushu.AutoPtr_Replay_getClassName(self)
    def serialize(self, *args): return _Myoushu.AutoPtr_Replay_serialize(self, *args)
    def getName(self): return _Myoushu.AutoPtr_Replay_getName(self)
    def release(self): return _Myoushu.AutoPtr_Replay_release(self)
    def referenceCount(self): return _Myoushu.AutoPtr_Replay_referenceCount(self)
AutoPtr_Replay_swigregister = _Myoushu.AutoPtr_Replay_swigregister
AutoPtr_Replay_swigregister(AutoPtr_Replay)

class AutoPtr_VideoTaskMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoPtr_VideoTaskMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutoPtr_VideoTaskMessage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_AutoPtr_VideoTaskMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_AutoPtr_VideoTaskMessage
    __del__ = lambda self : None;
    def assign(self, *args): return _Myoushu.AutoPtr_VideoTaskMessage_assign(self, *args)
    def swap(self, *args): return _Myoushu.AutoPtr_VideoTaskMessage_swap(self, *args)
    def __deref__(self, *args): return _Myoushu.AutoPtr_VideoTaskMessage___deref__(self, *args)
    def __ref__(self, *args): return _Myoushu.AutoPtr_VideoTaskMessage___ref__(self, *args)
    def get(self, *args): return _Myoushu.AutoPtr_VideoTaskMessage_get(self, *args)
    def isNull(self): return _Myoushu.AutoPtr_VideoTaskMessage_isNull(self)
    def duplicate(self): return _Myoushu.AutoPtr_VideoTaskMessage_duplicate(self)
    def __eq__(self, *args): return _Myoushu.AutoPtr_VideoTaskMessage___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.AutoPtr_VideoTaskMessage___ne__(self, *args)
    def __lt__(self, *args): return _Myoushu.AutoPtr_VideoTaskMessage___lt__(self, *args)
    def __le__(self, *args): return _Myoushu.AutoPtr_VideoTaskMessage___le__(self, *args)
    def __gt__(self, *args): return _Myoushu.AutoPtr_VideoTaskMessage___gt__(self, *args)
    def __ge__(self, *args): return _Myoushu.AutoPtr_VideoTaskMessage___ge__(self, *args)
    def getClassName(self): return _Myoushu.AutoPtr_VideoTaskMessage_getClassName(self)
    def getMessageType(self): return _Myoushu.AutoPtr_VideoTaskMessage_getMessageType(self)
    def clone(self): return _Myoushu.AutoPtr_VideoTaskMessage_clone(self)
    def getCreator(self): return _Myoushu.AutoPtr_VideoTaskMessage_getCreator(self)
    def serialize(self, *args): return _Myoushu.AutoPtr_VideoTaskMessage_serialize(self, *args)
AutoPtr_VideoTaskMessage_swigregister = _Myoushu.AutoPtr_VideoTaskMessage_swigregister
AutoPtr_VideoTaskMessage_swigregister(AutoPtr_VideoTaskMessage)

class AutoPtr_ContentImporter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoPtr_ContentImporter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutoPtr_ContentImporter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_AutoPtr_ContentImporter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_AutoPtr_ContentImporter
    __del__ = lambda self : None;
    def assign(self, *args): return _Myoushu.AutoPtr_ContentImporter_assign(self, *args)
    def swap(self, *args): return _Myoushu.AutoPtr_ContentImporter_swap(self, *args)
    def __deref__(self, *args): return _Myoushu.AutoPtr_ContentImporter___deref__(self, *args)
    def __ref__(self, *args): return _Myoushu.AutoPtr_ContentImporter___ref__(self, *args)
    def get(self, *args): return _Myoushu.AutoPtr_ContentImporter_get(self, *args)
    def isNull(self): return _Myoushu.AutoPtr_ContentImporter_isNull(self)
    def duplicate(self): return _Myoushu.AutoPtr_ContentImporter_duplicate(self)
    def __eq__(self, *args): return _Myoushu.AutoPtr_ContentImporter___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.AutoPtr_ContentImporter___ne__(self, *args)
    def __lt__(self, *args): return _Myoushu.AutoPtr_ContentImporter___lt__(self, *args)
    def __le__(self, *args): return _Myoushu.AutoPtr_ContentImporter___le__(self, *args)
    def __gt__(self, *args): return _Myoushu.AutoPtr_ContentImporter___gt__(self, *args)
    def __ge__(self, *args): return _Myoushu.AutoPtr_ContentImporter___ge__(self, *args)
    def getClassName(self): return _Myoushu.AutoPtr_ContentImporter_getClassName(self)
    def getName(self): return _Myoushu.AutoPtr_ContentImporter_getName(self)
    def serialize(self, *args): return _Myoushu.AutoPtr_ContentImporter_serialize(self, *args)
    def release(self): return _Myoushu.AutoPtr_ContentImporter_release(self)
    def referenceCount(self): return _Myoushu.AutoPtr_ContentImporter_referenceCount(self)
AutoPtr_ContentImporter_swigregister = _Myoushu.AutoPtr_ContentImporter_swigregister
AutoPtr_ContentImporter_swigregister(AutoPtr_ContentImporter)

class AutoPtr_FunctorBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoPtr_FunctorBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutoPtr_FunctorBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_AutoPtr_FunctorBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_AutoPtr_FunctorBase
    __del__ = lambda self : None;
    def assign(self, *args): return _Myoushu.AutoPtr_FunctorBase_assign(self, *args)
    def swap(self, *args): return _Myoushu.AutoPtr_FunctorBase_swap(self, *args)
    def __deref__(self, *args): return _Myoushu.AutoPtr_FunctorBase___deref__(self, *args)
    def __ref__(self, *args): return _Myoushu.AutoPtr_FunctorBase___ref__(self, *args)
    def get(self, *args): return _Myoushu.AutoPtr_FunctorBase_get(self, *args)
    def isNull(self): return _Myoushu.AutoPtr_FunctorBase_isNull(self)
    def duplicate(self): return _Myoushu.AutoPtr_FunctorBase_duplicate(self)
    def __eq__(self, *args): return _Myoushu.AutoPtr_FunctorBase___eq__(self, *args)
    def __ne__(self, *args): return _Myoushu.AutoPtr_FunctorBase___ne__(self, *args)
    def __lt__(self, *args): return _Myoushu.AutoPtr_FunctorBase___lt__(self, *args)
    def __le__(self, *args): return _Myoushu.AutoPtr_FunctorBase___le__(self, *args)
    def __gt__(self, *args): return _Myoushu.AutoPtr_FunctorBase___gt__(self, *args)
    def __ge__(self, *args): return _Myoushu.AutoPtr_FunctorBase___ge__(self, *args)
    def getClassName(self): return _Myoushu.AutoPtr_FunctorBase_getClassName(self)
    def clone(self): return _Myoushu.AutoPtr_FunctorBase_clone(self)
    def release(self): return _Myoushu.AutoPtr_FunctorBase_release(self)
    def referenceCount(self): return _Myoushu.AutoPtr_FunctorBase_referenceCount(self)
    def getName(self): return _Myoushu.AutoPtr_FunctorBase_getName(self)
    def serialize(self, *args): return _Myoushu.AutoPtr_FunctorBase_serialize(self, *args)
AutoPtr_FunctorBase_swigregister = _Myoushu.AutoPtr_FunctorBase_swigregister
AutoPtr_FunctorBase_swigregister(AutoPtr_FunctorBase)

class OutputStream(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutputStream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_OutputStream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_OutputStream
    __del__ = lambda self : None;
    def __lshift__(self, *args): return _Myoushu.OutputStream___lshift__(self, *args)
OutputStream_swigregister = _Myoushu.OutputStream_swigregister
OutputStream_swigregister(OutputStream)

class Cloneable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cloneable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cloneable, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def clone(self): return _Myoushu.Cloneable_clone(self)
    __swig_destroy__ = _Myoushu.delete_Cloneable
    __del__ = lambda self : None;
Cloneable_swigregister = _Myoushu.Cloneable_swigregister
Cloneable_swigregister(Cloneable)

class NamedObjectBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObjectBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObjectBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObjectBase
    __del__ = lambda self : None;
NamedObjectBase_swigregister = _Myoushu.NamedObjectBase_swigregister
NamedObjectBase_swigregister(NamedObjectBase)

class NamedObject_AnimationTask(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_AnimationTask, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_AnimationTask, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_AnimationTask
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_AnimationTask_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_AnimationTask_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_AnimationTask_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_AnimationTask_staticCastPtr)
NamedObject_AnimationTask_swigregister = _Myoushu.NamedObject_AnimationTask_swigregister
NamedObject_AnimationTask_swigregister(NamedObject_AnimationTask)

def NamedObject_AnimationTask_getStaticClassName():
  return _Myoushu.NamedObject_AnimationTask_getStaticClassName()
NamedObject_AnimationTask_getStaticClassName = _Myoushu.NamedObject_AnimationTask_getStaticClassName

def NamedObject_AnimationTask_staticCastPtr(*args):
  return _Myoushu.NamedObject_AnimationTask_staticCastPtr(*args)
NamedObject_AnimationTask_staticCastPtr = _Myoushu.NamedObject_AnimationTask_staticCastPtr

class NamedObject_AnimationTaskMessage(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_AnimationTaskMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_AnimationTaskMessage, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_AnimationTaskMessage
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_AnimationTaskMessage_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_AnimationTaskMessage_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_AnimationTaskMessage_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_AnimationTaskMessage_staticCastPtr)
NamedObject_AnimationTaskMessage_swigregister = _Myoushu.NamedObject_AnimationTaskMessage_swigregister
NamedObject_AnimationTaskMessage_swigregister(NamedObject_AnimationTaskMessage)

def NamedObject_AnimationTaskMessage_getStaticClassName():
  return _Myoushu.NamedObject_AnimationTaskMessage_getStaticClassName()
NamedObject_AnimationTaskMessage_getStaticClassName = _Myoushu.NamedObject_AnimationTaskMessage_getStaticClassName

def NamedObject_AnimationTaskMessage_staticCastPtr(*args):
  return _Myoushu.NamedObject_AnimationTaskMessage_staticCastPtr(*args)
NamedObject_AnimationTaskMessage_staticCastPtr = _Myoushu.NamedObject_AnimationTaskMessage_staticCastPtr

class NamedObject_Application(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_Application, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_Application, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_Application
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_Application_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_Application_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_Application_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_Application_staticCastPtr)
NamedObject_Application_swigregister = _Myoushu.NamedObject_Application_swigregister
NamedObject_Application_swigregister(NamedObject_Application)

def NamedObject_Application_getStaticClassName():
  return _Myoushu.NamedObject_Application_getStaticClassName()
NamedObject_Application_getStaticClassName = _Myoushu.NamedObject_Application_getStaticClassName

def NamedObject_Application_staticCastPtr(*args):
  return _Myoushu.NamedObject_Application_staticCastPtr(*args)
NamedObject_Application_staticCastPtr = _Myoushu.NamedObject_Application_staticCastPtr

class NamedObject_ClientNetworkListenBehaviour(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_ClientNetworkListenBehaviour, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_ClientNetworkListenBehaviour, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_ClientNetworkListenBehaviour
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_ClientNetworkListenBehaviour_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_ClientNetworkListenBehaviour_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_ClientNetworkListenBehaviour_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_ClientNetworkListenBehaviour_staticCastPtr)
NamedObject_ClientNetworkListenBehaviour_swigregister = _Myoushu.NamedObject_ClientNetworkListenBehaviour_swigregister
NamedObject_ClientNetworkListenBehaviour_swigregister(NamedObject_ClientNetworkListenBehaviour)

def NamedObject_ClientNetworkListenBehaviour_getStaticClassName():
  return _Myoushu.NamedObject_ClientNetworkListenBehaviour_getStaticClassName()
NamedObject_ClientNetworkListenBehaviour_getStaticClassName = _Myoushu.NamedObject_ClientNetworkListenBehaviour_getStaticClassName

def NamedObject_ClientNetworkListenBehaviour_staticCastPtr(*args):
  return _Myoushu.NamedObject_ClientNetworkListenBehaviour_staticCastPtr(*args)
NamedObject_ClientNetworkListenBehaviour_staticCastPtr = _Myoushu.NamedObject_ClientNetworkListenBehaviour_staticCastPtr

class NamedObject_ClientRecord(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_ClientRecord, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_ClientRecord, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_ClientRecord
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_ClientRecord_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_ClientRecord_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_ClientRecord_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_ClientRecord_staticCastPtr)
NamedObject_ClientRecord_swigregister = _Myoushu.NamedObject_ClientRecord_swigregister
NamedObject_ClientRecord_swigregister(NamedObject_ClientRecord)

def NamedObject_ClientRecord_getStaticClassName():
  return _Myoushu.NamedObject_ClientRecord_getStaticClassName()
NamedObject_ClientRecord_getStaticClassName = _Myoushu.NamedObject_ClientRecord_getStaticClassName

def NamedObject_ClientRecord_staticCastPtr(*args):
  return _Myoushu.NamedObject_ClientRecord_staticCastPtr(*args)
NamedObject_ClientRecord_staticCastPtr = _Myoushu.NamedObject_ClientRecord_staticCastPtr

class NamedObject_ConcurrentTask(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_ConcurrentTask, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_ConcurrentTask, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_ConcurrentTask
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_ConcurrentTask_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_ConcurrentTask_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_ConcurrentTask_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_ConcurrentTask_staticCastPtr)
NamedObject_ConcurrentTask_swigregister = _Myoushu.NamedObject_ConcurrentTask_swigregister
NamedObject_ConcurrentTask_swigregister(NamedObject_ConcurrentTask)

def NamedObject_ConcurrentTask_getStaticClassName():
  return _Myoushu.NamedObject_ConcurrentTask_getStaticClassName()
NamedObject_ConcurrentTask_getStaticClassName = _Myoushu.NamedObject_ConcurrentTask_getStaticClassName

def NamedObject_ConcurrentTask_staticCastPtr(*args):
  return _Myoushu.NamedObject_ConcurrentTask_staticCastPtr(*args)
NamedObject_ConcurrentTask_staticCastPtr = _Myoushu.NamedObject_ConcurrentTask_staticCastPtr

class NamedObject_Controller(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_Controller, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_Controller, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_Controller
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_Controller_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_Controller_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_Controller_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_Controller_staticCastPtr)
NamedObject_Controller_swigregister = _Myoushu.NamedObject_Controller_swigregister
NamedObject_Controller_swigregister(NamedObject_Controller)

def NamedObject_Controller_getStaticClassName():
  return _Myoushu.NamedObject_Controller_getStaticClassName()
NamedObject_Controller_getStaticClassName = _Myoushu.NamedObject_Controller_getStaticClassName

def NamedObject_Controller_staticCastPtr(*args):
  return _Myoushu.NamedObject_Controller_staticCastPtr(*args)
NamedObject_Controller_staticCastPtr = _Myoushu.NamedObject_Controller_staticCastPtr

class NamedObject_ControllerTask(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_ControllerTask, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_ControllerTask, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_ControllerTask
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_ControllerTask_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_ControllerTask_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_ControllerTask_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_ControllerTask_staticCastPtr)
NamedObject_ControllerTask_swigregister = _Myoushu.NamedObject_ControllerTask_swigregister
NamedObject_ControllerTask_swigregister(NamedObject_ControllerTask)

def NamedObject_ControllerTask_getStaticClassName():
  return _Myoushu.NamedObject_ControllerTask_getStaticClassName()
NamedObject_ControllerTask_getStaticClassName = _Myoushu.NamedObject_ControllerTask_getStaticClassName

def NamedObject_ControllerTask_staticCastPtr(*args):
  return _Myoushu.NamedObject_ControllerTask_staticCastPtr(*args)
NamedObject_ControllerTask_staticCastPtr = _Myoushu.NamedObject_ControllerTask_staticCastPtr

class NamedObject_ControllerTaskMessage(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_ControllerTaskMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_ControllerTaskMessage, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_ControllerTaskMessage
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_ControllerTaskMessage_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_ControllerTaskMessage_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_ControllerTaskMessage_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_ControllerTaskMessage_staticCastPtr)
NamedObject_ControllerTaskMessage_swigregister = _Myoushu.NamedObject_ControllerTaskMessage_swigregister
NamedObject_ControllerTaskMessage_swigregister(NamedObject_ControllerTaskMessage)

def NamedObject_ControllerTaskMessage_getStaticClassName():
  return _Myoushu.NamedObject_ControllerTaskMessage_getStaticClassName()
NamedObject_ControllerTaskMessage_getStaticClassName = _Myoushu.NamedObject_ControllerTaskMessage_getStaticClassName

def NamedObject_ControllerTaskMessage_staticCastPtr(*args):
  return _Myoushu.NamedObject_ControllerTaskMessage_staticCastPtr(*args)
NamedObject_ControllerTaskMessage_staticCastPtr = _Myoushu.NamedObject_ControllerTaskMessage_staticCastPtr

class NamedObject_DefaultNetworkListenBehaviour(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_DefaultNetworkListenBehaviour, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_DefaultNetworkListenBehaviour, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_DefaultNetworkListenBehaviour
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_DefaultNetworkListenBehaviour_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_DefaultNetworkListenBehaviour_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_DefaultNetworkListenBehaviour_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_DefaultNetworkListenBehaviour_staticCastPtr)
NamedObject_DefaultNetworkListenBehaviour_swigregister = _Myoushu.NamedObject_DefaultNetworkListenBehaviour_swigregister
NamedObject_DefaultNetworkListenBehaviour_swigregister(NamedObject_DefaultNetworkListenBehaviour)

def NamedObject_DefaultNetworkListenBehaviour_getStaticClassName():
  return _Myoushu.NamedObject_DefaultNetworkListenBehaviour_getStaticClassName()
NamedObject_DefaultNetworkListenBehaviour_getStaticClassName = _Myoushu.NamedObject_DefaultNetworkListenBehaviour_getStaticClassName

def NamedObject_DefaultNetworkListenBehaviour_staticCastPtr(*args):
  return _Myoushu.NamedObject_DefaultNetworkListenBehaviour_staticCastPtr(*args)
NamedObject_DefaultNetworkListenBehaviour_staticCastPtr = _Myoushu.NamedObject_DefaultNetworkListenBehaviour_staticCastPtr

class NamedObject_GameObject(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_GameObject, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_GameObject, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_GameObject
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_GameObject_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_GameObject_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_GameObject_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_GameObject_staticCastPtr)
NamedObject_GameObject_swigregister = _Myoushu.NamedObject_GameObject_swigregister
NamedObject_GameObject_swigregister(NamedObject_GameObject)

def NamedObject_GameObject_getStaticClassName():
  return _Myoushu.NamedObject_GameObject_getStaticClassName()
NamedObject_GameObject_getStaticClassName = _Myoushu.NamedObject_GameObject_getStaticClassName

def NamedObject_GameObject_staticCastPtr(*args):
  return _Myoushu.NamedObject_GameObject_staticCastPtr(*args)
NamedObject_GameObject_staticCastPtr = _Myoushu.NamedObject_GameObject_staticCastPtr

class NamedObject_GameObjectAction(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_GameObjectAction, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_GameObjectAction, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_GameObjectAction
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_GameObjectAction_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_GameObjectAction_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_GameObjectAction_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_GameObjectAction_staticCastPtr)
NamedObject_GameObjectAction_swigregister = _Myoushu.NamedObject_GameObjectAction_swigregister
NamedObject_GameObjectAction_swigregister(NamedObject_GameObjectAction)

def NamedObject_GameObjectAction_getStaticClassName():
  return _Myoushu.NamedObject_GameObjectAction_getStaticClassName()
NamedObject_GameObjectAction_getStaticClassName = _Myoushu.NamedObject_GameObjectAction_getStaticClassName

def NamedObject_GameObjectAction_staticCastPtr(*args):
  return _Myoushu.NamedObject_GameObjectAction_staticCastPtr(*args)
NamedObject_GameObjectAction_staticCastPtr = _Myoushu.NamedObject_GameObjectAction_staticCastPtr

class NamedObject_GameActorObject(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_GameActorObject, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_GameActorObject, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_GameActorObject
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_GameActorObject_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_GameActorObject_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_GameActorObject_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_GameActorObject_staticCastPtr)
NamedObject_GameActorObject_swigregister = _Myoushu.NamedObject_GameActorObject_swigregister
NamedObject_GameActorObject_swigregister(NamedObject_GameActorObject)

def NamedObject_GameActorObject_getStaticClassName():
  return _Myoushu.NamedObject_GameActorObject_getStaticClassName()
NamedObject_GameActorObject_getStaticClassName = _Myoushu.NamedObject_GameActorObject_getStaticClassName

def NamedObject_GameActorObject_staticCastPtr(*args):
  return _Myoushu.NamedObject_GameActorObject_staticCastPtr(*args)
NamedObject_GameActorObject_staticCastPtr = _Myoushu.NamedObject_GameActorObject_staticCastPtr

class NamedObject_GameBodyObject(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_GameBodyObject, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_GameBodyObject, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_GameBodyObject
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_GameBodyObject_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_GameBodyObject_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_GameBodyObject_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_GameBodyObject_staticCastPtr)
NamedObject_GameBodyObject_swigregister = _Myoushu.NamedObject_GameBodyObject_swigregister
NamedObject_GameBodyObject_swigregister(NamedObject_GameBodyObject)

def NamedObject_GameBodyObject_getStaticClassName():
  return _Myoushu.NamedObject_GameBodyObject_getStaticClassName()
NamedObject_GameBodyObject_getStaticClassName = _Myoushu.NamedObject_GameBodyObject_getStaticClassName

def NamedObject_GameBodyObject_staticCastPtr(*args):
  return _Myoushu.NamedObject_GameBodyObject_staticCastPtr(*args)
NamedObject_GameBodyObject_staticCastPtr = _Myoushu.NamedObject_GameBodyObject_staticCastPtr

class NamedObject_GameCharacterObject(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_GameCharacterObject, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_GameCharacterObject, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_GameCharacterObject
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_GameCharacterObject_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_GameCharacterObject_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_GameCharacterObject_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_GameCharacterObject_staticCastPtr)
NamedObject_GameCharacterObject_swigregister = _Myoushu.NamedObject_GameCharacterObject_swigregister
NamedObject_GameCharacterObject_swigregister(NamedObject_GameCharacterObject)

def NamedObject_GameCharacterObject_getStaticClassName():
  return _Myoushu.NamedObject_GameCharacterObject_getStaticClassName()
NamedObject_GameCharacterObject_getStaticClassName = _Myoushu.NamedObject_GameCharacterObject_getStaticClassName

def NamedObject_GameCharacterObject_staticCastPtr(*args):
  return _Myoushu.NamedObject_GameCharacterObject_staticCastPtr(*args)
NamedObject_GameCharacterObject_staticCastPtr = _Myoushu.NamedObject_GameCharacterObject_staticCastPtr

class NamedObject_GameCharacterObjectAction(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_GameCharacterObjectAction, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_GameCharacterObjectAction, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_GameCharacterObjectAction
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_GameCharacterObjectAction_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_GameCharacterObjectAction_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_GameCharacterObjectAction_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_GameCharacterObjectAction_staticCastPtr)
NamedObject_GameCharacterObjectAction_swigregister = _Myoushu.NamedObject_GameCharacterObjectAction_swigregister
NamedObject_GameCharacterObjectAction_swigregister(NamedObject_GameCharacterObjectAction)

def NamedObject_GameCharacterObjectAction_getStaticClassName():
  return _Myoushu.NamedObject_GameCharacterObjectAction_getStaticClassName()
NamedObject_GameCharacterObjectAction_getStaticClassName = _Myoushu.NamedObject_GameCharacterObjectAction_getStaticClassName

def NamedObject_GameCharacterObjectAction_staticCastPtr(*args):
  return _Myoushu.NamedObject_GameCharacterObjectAction_staticCastPtr(*args)
NamedObject_GameCharacterObjectAction_staticCastPtr = _Myoushu.NamedObject_GameCharacterObjectAction_staticCastPtr

class NamedObject_GameCharacterObjectController(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_GameCharacterObjectController, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_GameCharacterObjectController, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_GameCharacterObjectController
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_GameCharacterObjectController_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_GameCharacterObjectController_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_GameCharacterObjectController_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_GameCharacterObjectController_staticCastPtr)
NamedObject_GameCharacterObjectController_swigregister = _Myoushu.NamedObject_GameCharacterObjectController_swigregister
NamedObject_GameCharacterObjectController_swigregister(NamedObject_GameCharacterObjectController)

def NamedObject_GameCharacterObjectController_getStaticClassName():
  return _Myoushu.NamedObject_GameCharacterObjectController_getStaticClassName()
NamedObject_GameCharacterObjectController_getStaticClassName = _Myoushu.NamedObject_GameCharacterObjectController_getStaticClassName

def NamedObject_GameCharacterObjectController_staticCastPtr(*args):
  return _Myoushu.NamedObject_GameCharacterObjectController_staticCastPtr(*args)
NamedObject_GameCharacterObjectController_staticCastPtr = _Myoushu.NamedObject_GameCharacterObjectController_staticCastPtr

class NamedObject_GameTask(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_GameTask, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_GameTask, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_GameTask
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_GameTask_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_GameTask_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_GameTask_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_GameTask_staticCastPtr)
NamedObject_GameTask_swigregister = _Myoushu.NamedObject_GameTask_swigregister
NamedObject_GameTask_swigregister(NamedObject_GameTask)

def NamedObject_GameTask_getStaticClassName():
  return _Myoushu.NamedObject_GameTask_getStaticClassName()
NamedObject_GameTask_getStaticClassName = _Myoushu.NamedObject_GameTask_getStaticClassName

def NamedObject_GameTask_staticCastPtr(*args):
  return _Myoushu.NamedObject_GameTask_staticCastPtr(*args)
NamedObject_GameTask_staticCastPtr = _Myoushu.NamedObject_GameTask_staticCastPtr

class NamedObject_GUIMessage(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_GUIMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_GUIMessage, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_GUIMessage
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_GUIMessage_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_GUIMessage_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_GUIMessage_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_GUIMessage_staticCastPtr)
NamedObject_GUIMessage_swigregister = _Myoushu.NamedObject_GUIMessage_swigregister
NamedObject_GUIMessage_swigregister(NamedObject_GUIMessage)

def NamedObject_GUIMessage_getStaticClassName():
  return _Myoushu.NamedObject_GUIMessage_getStaticClassName()
NamedObject_GUIMessage_getStaticClassName = _Myoushu.NamedObject_GUIMessage_getStaticClassName

def NamedObject_GUIMessage_staticCastPtr(*args):
  return _Myoushu.NamedObject_GUIMessage_staticCastPtr(*args)
NamedObject_GUIMessage_staticCastPtr = _Myoushu.NamedObject_GUIMessage_staticCastPtr

class NamedObject_GUITask(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_GUITask, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_GUITask, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_GUITask
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_GUITask_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_GUITask_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_GUITask_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_GUITask_staticCastPtr)
NamedObject_GUITask_swigregister = _Myoushu.NamedObject_GUITask_swigregister
NamedObject_GUITask_swigregister(NamedObject_GUITask)

def NamedObject_GUITask_getStaticClassName():
  return _Myoushu.NamedObject_GUITask_getStaticClassName()
NamedObject_GUITask_getStaticClassName = _Myoushu.NamedObject_GUITask_getStaticClassName

def NamedObject_GUITask_staticCastPtr(*args):
  return _Myoushu.NamedObject_GUITask_staticCastPtr(*args)
NamedObject_GUITask_staticCastPtr = _Myoushu.NamedObject_GUITask_staticCastPtr

class NamedObject_HostRecord(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_HostRecord, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_HostRecord, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_HostRecord
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_HostRecord_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_HostRecord_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_HostRecord_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_HostRecord_staticCastPtr)
NamedObject_HostRecord_swigregister = _Myoushu.NamedObject_HostRecord_swigregister
NamedObject_HostRecord_swigregister(NamedObject_HostRecord)

def NamedObject_HostRecord_getStaticClassName():
  return _Myoushu.NamedObject_HostRecord_getStaticClassName()
NamedObject_HostRecord_getStaticClassName = _Myoushu.NamedObject_HostRecord_getStaticClassName

def NamedObject_HostRecord_staticCastPtr(*args):
  return _Myoushu.NamedObject_HostRecord_staticCastPtr(*args)
NamedObject_HostRecord_staticCastPtr = _Myoushu.NamedObject_HostRecord_staticCastPtr

class NamedObject_InputDeviceMessage(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_InputDeviceMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_InputDeviceMessage, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_InputDeviceMessage
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_InputDeviceMessage_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_InputDeviceMessage_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_InputDeviceMessage_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_InputDeviceMessage_staticCastPtr)
NamedObject_InputDeviceMessage_swigregister = _Myoushu.NamedObject_InputDeviceMessage_swigregister
NamedObject_InputDeviceMessage_swigregister(NamedObject_InputDeviceMessage)

def NamedObject_InputDeviceMessage_getStaticClassName():
  return _Myoushu.NamedObject_InputDeviceMessage_getStaticClassName()
NamedObject_InputDeviceMessage_getStaticClassName = _Myoushu.NamedObject_InputDeviceMessage_getStaticClassName

def NamedObject_InputDeviceMessage_staticCastPtr(*args):
  return _Myoushu.NamedObject_InputDeviceMessage_staticCastPtr(*args)
NamedObject_InputDeviceMessage_staticCastPtr = _Myoushu.NamedObject_InputDeviceMessage_staticCastPtr

class NamedObject_InputMessage(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_InputMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_InputMessage, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_InputMessage
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_InputMessage_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_InputMessage_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_InputMessage_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_InputMessage_staticCastPtr)
NamedObject_InputMessage_swigregister = _Myoushu.NamedObject_InputMessage_swigregister
NamedObject_InputMessage_swigregister(NamedObject_InputMessage)

def NamedObject_InputMessage_getStaticClassName():
  return _Myoushu.NamedObject_InputMessage_getStaticClassName()
NamedObject_InputMessage_getStaticClassName = _Myoushu.NamedObject_InputMessage_getStaticClassName

def NamedObject_InputMessage_staticCastPtr(*args):
  return _Myoushu.NamedObject_InputMessage_staticCastPtr(*args)
NamedObject_InputMessage_staticCastPtr = _Myoushu.NamedObject_InputMessage_staticCastPtr

class NamedObject_InputTask(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_InputTask, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_InputTask, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_InputTask
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_InputTask_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_InputTask_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_InputTask_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_InputTask_staticCastPtr)
NamedObject_InputTask_swigregister = _Myoushu.NamedObject_InputTask_swigregister
NamedObject_InputTask_swigregister(NamedObject_InputTask)

def NamedObject_InputTask_getStaticClassName():
  return _Myoushu.NamedObject_InputTask_getStaticClassName()
NamedObject_InputTask_getStaticClassName = _Myoushu.NamedObject_InputTask_getStaticClassName

def NamedObject_InputTask_staticCastPtr(*args):
  return _Myoushu.NamedObject_InputTask_staticCastPtr(*args)
NamedObject_InputTask_staticCastPtr = _Myoushu.NamedObject_InputTask_staticCastPtr

class NamedObject_KernelMessage(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_KernelMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_KernelMessage, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_KernelMessage
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_KernelMessage_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_KernelMessage_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_KernelMessage_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_KernelMessage_staticCastPtr)
NamedObject_KernelMessage_swigregister = _Myoushu.NamedObject_KernelMessage_swigregister
NamedObject_KernelMessage_swigregister(NamedObject_KernelMessage)

def NamedObject_KernelMessage_getStaticClassName():
  return _Myoushu.NamedObject_KernelMessage_getStaticClassName()
NamedObject_KernelMessage_getStaticClassName = _Myoushu.NamedObject_KernelMessage_getStaticClassName

def NamedObject_KernelMessage_staticCastPtr(*args):
  return _Myoushu.NamedObject_KernelMessage_staticCastPtr(*args)
NamedObject_KernelMessage_staticCastPtr = _Myoushu.NamedObject_KernelMessage_staticCastPtr

class NamedObject_Message(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_Message, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_Message, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_Message
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_Message_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_Message_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_Message_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_Message_staticCastPtr)
NamedObject_Message_swigregister = _Myoushu.NamedObject_Message_swigregister
NamedObject_Message_swigregister(NamedObject_Message)

def NamedObject_Message_getStaticClassName():
  return _Myoushu.NamedObject_Message_getStaticClassName()
NamedObject_Message_getStaticClassName = _Myoushu.NamedObject_Message_getStaticClassName

def NamedObject_Message_staticCastPtr(*args):
  return _Myoushu.NamedObject_Message_staticCastPtr(*args)
NamedObject_Message_staticCastPtr = _Myoushu.NamedObject_Message_staticCastPtr

class NamedObject_NetworkListenBehaviour(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_NetworkListenBehaviour, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_NetworkListenBehaviour, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_NetworkListenBehaviour
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_NetworkListenBehaviour_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_NetworkListenBehaviour_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_NetworkListenBehaviour_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_NetworkListenBehaviour_staticCastPtr)
NamedObject_NetworkListenBehaviour_swigregister = _Myoushu.NamedObject_NetworkListenBehaviour_swigregister
NamedObject_NetworkListenBehaviour_swigregister(NamedObject_NetworkListenBehaviour)

def NamedObject_NetworkListenBehaviour_getStaticClassName():
  return _Myoushu.NamedObject_NetworkListenBehaviour_getStaticClassName()
NamedObject_NetworkListenBehaviour_getStaticClassName = _Myoushu.NamedObject_NetworkListenBehaviour_getStaticClassName

def NamedObject_NetworkListenBehaviour_staticCastPtr(*args):
  return _Myoushu.NamedObject_NetworkListenBehaviour_staticCastPtr(*args)
NamedObject_NetworkListenBehaviour_staticCastPtr = _Myoushu.NamedObject_NetworkListenBehaviour_staticCastPtr

class NamedObject_NetworkListenTask(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_NetworkListenTask, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_NetworkListenTask, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_NetworkListenTask
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_NetworkListenTask_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_NetworkListenTask_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_NetworkListenTask_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_NetworkListenTask_staticCastPtr)
NamedObject_NetworkListenTask_swigregister = _Myoushu.NamedObject_NetworkListenTask_swigregister
NamedObject_NetworkListenTask_swigregister(NamedObject_NetworkListenTask)

def NamedObject_NetworkListenTask_getStaticClassName():
  return _Myoushu.NamedObject_NetworkListenTask_getStaticClassName()
NamedObject_NetworkListenTask_getStaticClassName = _Myoushu.NamedObject_NetworkListenTask_getStaticClassName

def NamedObject_NetworkListenTask_staticCastPtr(*args):
  return _Myoushu.NamedObject_NetworkListenTask_staticCastPtr(*args)
NamedObject_NetworkListenTask_staticCastPtr = _Myoushu.NamedObject_NetworkListenTask_staticCastPtr

class NamedObject_NetworkMessage(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_NetworkMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_NetworkMessage, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_NetworkMessage
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_NetworkMessage_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_NetworkMessage_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_NetworkMessage_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_NetworkMessage_staticCastPtr)
NamedObject_NetworkMessage_swigregister = _Myoushu.NamedObject_NetworkMessage_swigregister
NamedObject_NetworkMessage_swigregister(NamedObject_NetworkMessage)

def NamedObject_NetworkMessage_getStaticClassName():
  return _Myoushu.NamedObject_NetworkMessage_getStaticClassName()
NamedObject_NetworkMessage_getStaticClassName = _Myoushu.NamedObject_NetworkMessage_getStaticClassName

def NamedObject_NetworkMessage_staticCastPtr(*args):
  return _Myoushu.NamedObject_NetworkMessage_staticCastPtr(*args)
NamedObject_NetworkMessage_staticCastPtr = _Myoushu.NamedObject_NetworkMessage_staticCastPtr

class NamedObject_NetworkTransmitTask(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_NetworkTransmitTask, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_NetworkTransmitTask, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_NetworkTransmitTask
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_NetworkTransmitTask_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_NetworkTransmitTask_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_NetworkTransmitTask_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_NetworkTransmitTask_staticCastPtr)
NamedObject_NetworkTransmitTask_swigregister = _Myoushu.NamedObject_NetworkTransmitTask_swigregister
NamedObject_NetworkTransmitTask_swigregister(NamedObject_NetworkTransmitTask)

def NamedObject_NetworkTransmitTask_getStaticClassName():
  return _Myoushu.NamedObject_NetworkTransmitTask_getStaticClassName()
NamedObject_NetworkTransmitTask_getStaticClassName = _Myoushu.NamedObject_NetworkTransmitTask_getStaticClassName

def NamedObject_NetworkTransmitTask_staticCastPtr(*args):
  return _Myoushu.NamedObject_NetworkTransmitTask_staticCastPtr(*args)
NamedObject_NetworkTransmitTask_staticCastPtr = _Myoushu.NamedObject_NetworkTransmitTask_staticCastPtr

class NamedObject_P2PNetworkListenBehaviour(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_P2PNetworkListenBehaviour, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_P2PNetworkListenBehaviour, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_P2PNetworkListenBehaviour
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_P2PNetworkListenBehaviour_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_P2PNetworkListenBehaviour_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_P2PNetworkListenBehaviour_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_P2PNetworkListenBehaviour_staticCastPtr)
NamedObject_P2PNetworkListenBehaviour_swigregister = _Myoushu.NamedObject_P2PNetworkListenBehaviour_swigregister
NamedObject_P2PNetworkListenBehaviour_swigregister(NamedObject_P2PNetworkListenBehaviour)

def NamedObject_P2PNetworkListenBehaviour_getStaticClassName():
  return _Myoushu.NamedObject_P2PNetworkListenBehaviour_getStaticClassName()
NamedObject_P2PNetworkListenBehaviour_getStaticClassName = _Myoushu.NamedObject_P2PNetworkListenBehaviour_getStaticClassName

def NamedObject_P2PNetworkListenBehaviour_staticCastPtr(*args):
  return _Myoushu.NamedObject_P2PNetworkListenBehaviour_staticCastPtr(*args)
NamedObject_P2PNetworkListenBehaviour_staticCastPtr = _Myoushu.NamedObject_P2PNetworkListenBehaviour_staticCastPtr

class NamedObject_PoolObject(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_PoolObject, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_PoolObject, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_PoolObject
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_PoolObject_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_PoolObject_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_PoolObject_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_PoolObject_staticCastPtr)
NamedObject_PoolObject_swigregister = _Myoushu.NamedObject_PoolObject_swigregister
NamedObject_PoolObject_swigregister(NamedObject_PoolObject)

def NamedObject_PoolObject_getStaticClassName():
  return _Myoushu.NamedObject_PoolObject_getStaticClassName()
NamedObject_PoolObject_getStaticClassName = _Myoushu.NamedObject_PoolObject_getStaticClassName

def NamedObject_PoolObject_staticCastPtr(*args):
  return _Myoushu.NamedObject_PoolObject_staticCastPtr(*args)
NamedObject_PoolObject_staticCastPtr = _Myoushu.NamedObject_PoolObject_staticCastPtr

class NamedObject_PhysicsTask(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_PhysicsTask, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_PhysicsTask, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_PhysicsTask
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_PhysicsTask_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_PhysicsTask_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_PhysicsTask_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_PhysicsTask_staticCastPtr)
NamedObject_PhysicsTask_swigregister = _Myoushu.NamedObject_PhysicsTask_swigregister
NamedObject_PhysicsTask_swigregister(NamedObject_PhysicsTask)

def NamedObject_PhysicsTask_getStaticClassName():
  return _Myoushu.NamedObject_PhysicsTask_getStaticClassName()
NamedObject_PhysicsTask_getStaticClassName = _Myoushu.NamedObject_PhysicsTask_getStaticClassName

def NamedObject_PhysicsTask_staticCastPtr(*args):
  return _Myoushu.NamedObject_PhysicsTask_staticCastPtr(*args)
NamedObject_PhysicsTask_staticCastPtr = _Myoushu.NamedObject_PhysicsTask_staticCastPtr

class NamedObject_Scene(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_Scene, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_Scene, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_Scene
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_Scene_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_Scene_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_Scene_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_Scene_staticCastPtr)
NamedObject_Scene_swigregister = _Myoushu.NamedObject_Scene_swigregister
NamedObject_Scene_swigregister(NamedObject_Scene)

def NamedObject_Scene_getStaticClassName():
  return _Myoushu.NamedObject_Scene_getStaticClassName()
NamedObject_Scene_getStaticClassName = _Myoushu.NamedObject_Scene_getStaticClassName

def NamedObject_Scene_staticCastPtr(*args):
  return _Myoushu.NamedObject_Scene_staticCastPtr(*args)
NamedObject_Scene_staticCastPtr = _Myoushu.NamedObject_Scene_staticCastPtr

class NamedObject_ScriptMessage(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_ScriptMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_ScriptMessage, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_ScriptMessage
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_ScriptMessage_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_ScriptMessage_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_ScriptMessage_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_ScriptMessage_staticCastPtr)
NamedObject_ScriptMessage_swigregister = _Myoushu.NamedObject_ScriptMessage_swigregister
NamedObject_ScriptMessage_swigregister(NamedObject_ScriptMessage)

def NamedObject_ScriptMessage_getStaticClassName():
  return _Myoushu.NamedObject_ScriptMessage_getStaticClassName()
NamedObject_ScriptMessage_getStaticClassName = _Myoushu.NamedObject_ScriptMessage_getStaticClassName

def NamedObject_ScriptMessage_staticCastPtr(*args):
  return _Myoushu.NamedObject_ScriptMessage_staticCastPtr(*args)
NamedObject_ScriptMessage_staticCastPtr = _Myoushu.NamedObject_ScriptMessage_staticCastPtr

class NamedObject_ScriptTask(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_ScriptTask, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_ScriptTask, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_ScriptTask
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_ScriptTask_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_ScriptTask_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_ScriptTask_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_ScriptTask_staticCastPtr)
NamedObject_ScriptTask_swigregister = _Myoushu.NamedObject_ScriptTask_swigregister
NamedObject_ScriptTask_swigregister(NamedObject_ScriptTask)

def NamedObject_ScriptTask_getStaticClassName():
  return _Myoushu.NamedObject_ScriptTask_getStaticClassName()
NamedObject_ScriptTask_getStaticClassName = _Myoushu.NamedObject_ScriptTask_getStaticClassName

def NamedObject_ScriptTask_staticCastPtr(*args):
  return _Myoushu.NamedObject_ScriptTask_staticCastPtr(*args)
NamedObject_ScriptTask_staticCastPtr = _Myoushu.NamedObject_ScriptTask_staticCastPtr

class NamedObject_ServerNetworkListenBehaviour(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_ServerNetworkListenBehaviour, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_ServerNetworkListenBehaviour, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_ServerNetworkListenBehaviour
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_ServerNetworkListenBehaviour_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_ServerNetworkListenBehaviour_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_ServerNetworkListenBehaviour_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_ServerNetworkListenBehaviour_staticCastPtr)
NamedObject_ServerNetworkListenBehaviour_swigregister = _Myoushu.NamedObject_ServerNetworkListenBehaviour_swigregister
NamedObject_ServerNetworkListenBehaviour_swigregister(NamedObject_ServerNetworkListenBehaviour)

def NamedObject_ServerNetworkListenBehaviour_getStaticClassName():
  return _Myoushu.NamedObject_ServerNetworkListenBehaviour_getStaticClassName()
NamedObject_ServerNetworkListenBehaviour_getStaticClassName = _Myoushu.NamedObject_ServerNetworkListenBehaviour_getStaticClassName

def NamedObject_ServerNetworkListenBehaviour_staticCastPtr(*args):
  return _Myoushu.NamedObject_ServerNetworkListenBehaviour_staticCastPtr(*args)
NamedObject_ServerNetworkListenBehaviour_staticCastPtr = _Myoushu.NamedObject_ServerNetworkListenBehaviour_staticCastPtr

class NamedObject_ServerRecord(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_ServerRecord, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_ServerRecord, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_ServerRecord
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_ServerRecord_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_ServerRecord_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_ServerRecord_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_ServerRecord_staticCastPtr)
NamedObject_ServerRecord_swigregister = _Myoushu.NamedObject_ServerRecord_swigregister
NamedObject_ServerRecord_swigregister(NamedObject_ServerRecord)

def NamedObject_ServerRecord_getStaticClassName():
  return _Myoushu.NamedObject_ServerRecord_getStaticClassName()
NamedObject_ServerRecord_getStaticClassName = _Myoushu.NamedObject_ServerRecord_getStaticClassName

def NamedObject_ServerRecord_staticCastPtr(*args):
  return _Myoushu.NamedObject_ServerRecord_staticCastPtr(*args)
NamedObject_ServerRecord_staticCastPtr = _Myoushu.NamedObject_ServerRecord_staticCastPtr

class NamedObject_Task(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_Task, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_Task, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_Task
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_Task_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_Task_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_Task_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_Task_staticCastPtr)
NamedObject_Task_swigregister = _Myoushu.NamedObject_Task_swigregister
NamedObject_Task_swigregister(NamedObject_Task)

def NamedObject_Task_getStaticClassName():
  return _Myoushu.NamedObject_Task_getStaticClassName()
NamedObject_Task_getStaticClassName = _Myoushu.NamedObject_Task_getStaticClassName

def NamedObject_Task_staticCastPtr(*args):
  return _Myoushu.NamedObject_Task_staticCastPtr(*args)
NamedObject_Task_staticCastPtr = _Myoushu.NamedObject_Task_staticCastPtr

class NamedObject_TimerTask(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_TimerTask, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_TimerTask, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_TimerTask
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_TimerTask_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_TimerTask_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_TimerTask_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_TimerTask_staticCastPtr)
NamedObject_TimerTask_swigregister = _Myoushu.NamedObject_TimerTask_swigregister
NamedObject_TimerTask_swigregister(NamedObject_TimerTask)

def NamedObject_TimerTask_getStaticClassName():
  return _Myoushu.NamedObject_TimerTask_getStaticClassName()
NamedObject_TimerTask_getStaticClassName = _Myoushu.NamedObject_TimerTask_getStaticClassName

def NamedObject_TimerTask_staticCastPtr(*args):
  return _Myoushu.NamedObject_TimerTask_staticCastPtr(*args)
NamedObject_TimerTask_staticCastPtr = _Myoushu.NamedObject_TimerTask_staticCastPtr

class NamedObject_TimerTaskMessage(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_TimerTaskMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_TimerTaskMessage, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_TimerTaskMessage
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_TimerTaskMessage_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_TimerTaskMessage_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_TimerTaskMessage_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_TimerTaskMessage_staticCastPtr)
NamedObject_TimerTaskMessage_swigregister = _Myoushu.NamedObject_TimerTaskMessage_swigregister
NamedObject_TimerTaskMessage_swigregister(NamedObject_TimerTaskMessage)

def NamedObject_TimerTaskMessage_getStaticClassName():
  return _Myoushu.NamedObject_TimerTaskMessage_getStaticClassName()
NamedObject_TimerTaskMessage_getStaticClassName = _Myoushu.NamedObject_TimerTaskMessage_getStaticClassName

def NamedObject_TimerTaskMessage_staticCastPtr(*args):
  return _Myoushu.NamedObject_TimerTaskMessage_staticCastPtr(*args)
NamedObject_TimerTaskMessage_staticCastPtr = _Myoushu.NamedObject_TimerTaskMessage_staticCastPtr

class NamedObject_VideoTask(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_VideoTask, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_VideoTask, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_VideoTask
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_VideoTask_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_VideoTask_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_VideoTask_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_VideoTask_staticCastPtr)
NamedObject_VideoTask_swigregister = _Myoushu.NamedObject_VideoTask_swigregister
NamedObject_VideoTask_swigregister(NamedObject_VideoTask)

def NamedObject_VideoTask_getStaticClassName():
  return _Myoushu.NamedObject_VideoTask_getStaticClassName()
NamedObject_VideoTask_getStaticClassName = _Myoushu.NamedObject_VideoTask_getStaticClassName

def NamedObject_VideoTask_staticCastPtr(*args):
  return _Myoushu.NamedObject_VideoTask_staticCastPtr(*args)
NamedObject_VideoTask_staticCastPtr = _Myoushu.NamedObject_VideoTask_staticCastPtr

class NamedObject_CallbackTask(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_CallbackTask, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_CallbackTask, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_CallbackTask
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_CallbackTask_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_CallbackTask_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_CallbackTask_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_CallbackTask_staticCastPtr)
NamedObject_CallbackTask_swigregister = _Myoushu.NamedObject_CallbackTask_swigregister
NamedObject_CallbackTask_swigregister(NamedObject_CallbackTask)

def NamedObject_CallbackTask_getStaticClassName():
  return _Myoushu.NamedObject_CallbackTask_getStaticClassName()
NamedObject_CallbackTask_getStaticClassName = _Myoushu.NamedObject_CallbackTask_getStaticClassName

def NamedObject_CallbackTask_staticCastPtr(*args):
  return _Myoushu.NamedObject_CallbackTask_staticCastPtr(*args)
NamedObject_CallbackTask_staticCastPtr = _Myoushu.NamedObject_CallbackTask_staticCastPtr

class NamedObject_Sound(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_Sound, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_Sound, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_Sound
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_Sound_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_Sound_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_Sound_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_Sound_staticCastPtr)
NamedObject_Sound_swigregister = _Myoushu.NamedObject_Sound_swigregister
NamedObject_Sound_swigregister(NamedObject_Sound)

def NamedObject_Sound_getStaticClassName():
  return _Myoushu.NamedObject_Sound_getStaticClassName()
NamedObject_Sound_getStaticClassName = _Myoushu.NamedObject_Sound_getStaticClassName

def NamedObject_Sound_staticCastPtr(*args):
  return _Myoushu.NamedObject_Sound_staticCastPtr(*args)
NamedObject_Sound_staticCastPtr = _Myoushu.NamedObject_Sound_staticCastPtr

class NamedObject_StaticSound(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_StaticSound, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_StaticSound, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_StaticSound
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_StaticSound_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_StaticSound_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_StaticSound_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_StaticSound_staticCastPtr)
NamedObject_StaticSound_swigregister = _Myoushu.NamedObject_StaticSound_swigregister
NamedObject_StaticSound_swigregister(NamedObject_StaticSound)

def NamedObject_StaticSound_getStaticClassName():
  return _Myoushu.NamedObject_StaticSound_getStaticClassName()
NamedObject_StaticSound_getStaticClassName = _Myoushu.NamedObject_StaticSound_getStaticClassName

def NamedObject_StaticSound_staticCastPtr(*args):
  return _Myoushu.NamedObject_StaticSound_staticCastPtr(*args)
NamedObject_StaticSound_staticCastPtr = _Myoushu.NamedObject_StaticSound_staticCastPtr

class NamedObject_StreamSound(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_StreamSound, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_StreamSound, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_StreamSound
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_StreamSound_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_StreamSound_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_StreamSound_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_StreamSound_staticCastPtr)
NamedObject_StreamSound_swigregister = _Myoushu.NamedObject_StreamSound_swigregister
NamedObject_StreamSound_swigregister(NamedObject_StreamSound)

def NamedObject_StreamSound_getStaticClassName():
  return _Myoushu.NamedObject_StreamSound_getStaticClassName()
NamedObject_StreamSound_getStaticClassName = _Myoushu.NamedObject_StreamSound_getStaticClassName

def NamedObject_StreamSound_staticCastPtr(*args):
  return _Myoushu.NamedObject_StreamSound_staticCastPtr(*args)
NamedObject_StreamSound_staticCastPtr = _Myoushu.NamedObject_StreamSound_staticCastPtr

class NamedObject_MyoushuOgreOggStaticSound(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_MyoushuOgreOggStaticSound, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_MyoushuOgreOggStaticSound, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_MyoushuOgreOggStaticSound
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_MyoushuOgreOggStaticSound_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_MyoushuOgreOggStaticSound_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_MyoushuOgreOggStaticSound_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_MyoushuOgreOggStaticSound_staticCastPtr)
NamedObject_MyoushuOgreOggStaticSound_swigregister = _Myoushu.NamedObject_MyoushuOgreOggStaticSound_swigregister
NamedObject_MyoushuOgreOggStaticSound_swigregister(NamedObject_MyoushuOgreOggStaticSound)

def NamedObject_MyoushuOgreOggStaticSound_getStaticClassName():
  return _Myoushu.NamedObject_MyoushuOgreOggStaticSound_getStaticClassName()
NamedObject_MyoushuOgreOggStaticSound_getStaticClassName = _Myoushu.NamedObject_MyoushuOgreOggStaticSound_getStaticClassName

def NamedObject_MyoushuOgreOggStaticSound_staticCastPtr(*args):
  return _Myoushu.NamedObject_MyoushuOgreOggStaticSound_staticCastPtr(*args)
NamedObject_MyoushuOgreOggStaticSound_staticCastPtr = _Myoushu.NamedObject_MyoushuOgreOggStaticSound_staticCastPtr

class NamedObject_MyoushuOgreOggStreamSound(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_MyoushuOgreOggStreamSound, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_MyoushuOgreOggStreamSound, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_MyoushuOgreOggStreamSound
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_MyoushuOgreOggStreamSound_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_MyoushuOgreOggStreamSound_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_MyoushuOgreOggStreamSound_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_MyoushuOgreOggStreamSound_staticCastPtr)
NamedObject_MyoushuOgreOggStreamSound_swigregister = _Myoushu.NamedObject_MyoushuOgreOggStreamSound_swigregister
NamedObject_MyoushuOgreOggStreamSound_swigregister(NamedObject_MyoushuOgreOggStreamSound)

def NamedObject_MyoushuOgreOggStreamSound_getStaticClassName():
  return _Myoushu.NamedObject_MyoushuOgreOggStreamSound_getStaticClassName()
NamedObject_MyoushuOgreOggStreamSound_getStaticClassName = _Myoushu.NamedObject_MyoushuOgreOggStreamSound_getStaticClassName

def NamedObject_MyoushuOgreOggStreamSound_staticCastPtr(*args):
  return _Myoushu.NamedObject_MyoushuOgreOggStreamSound_staticCastPtr(*args)
NamedObject_MyoushuOgreOggStreamSound_staticCastPtr = _Myoushu.NamedObject_MyoushuOgreOggStreamSound_staticCastPtr

class NamedObject_GameLogEntity(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_GameLogEntity, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_GameLogEntity, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_GameLogEntity
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_GameLogEntity_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_GameLogEntity_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_GameLogEntity_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_GameLogEntity_staticCastPtr)
NamedObject_GameLogEntity_swigregister = _Myoushu.NamedObject_GameLogEntity_swigregister
NamedObject_GameLogEntity_swigregister(NamedObject_GameLogEntity)

def NamedObject_GameLogEntity_getStaticClassName():
  return _Myoushu.NamedObject_GameLogEntity_getStaticClassName()
NamedObject_GameLogEntity_getStaticClassName = _Myoushu.NamedObject_GameLogEntity_getStaticClassName

def NamedObject_GameLogEntity_staticCastPtr(*args):
  return _Myoushu.NamedObject_GameLogEntity_staticCastPtr(*args)
NamedObject_GameLogEntity_staticCastPtr = _Myoushu.NamedObject_GameLogEntity_staticCastPtr

class NamedObject_GameLogMessage(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_GameLogMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_GameLogMessage, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_GameLogMessage
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_GameLogMessage_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_GameLogMessage_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_GameLogMessage_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_GameLogMessage_staticCastPtr)
NamedObject_GameLogMessage_swigregister = _Myoushu.NamedObject_GameLogMessage_swigregister
NamedObject_GameLogMessage_swigregister(NamedObject_GameLogMessage)

def NamedObject_GameLogMessage_getStaticClassName():
  return _Myoushu.NamedObject_GameLogMessage_getStaticClassName()
NamedObject_GameLogMessage_getStaticClassName = _Myoushu.NamedObject_GameLogMessage_getStaticClassName

def NamedObject_GameLogMessage_staticCastPtr(*args):
  return _Myoushu.NamedObject_GameLogMessage_staticCastPtr(*args)
NamedObject_GameLogMessage_staticCastPtr = _Myoushu.NamedObject_GameLogMessage_staticCastPtr

class NamedObject_SQLiteGameLogEntity(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_SQLiteGameLogEntity, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_SQLiteGameLogEntity, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_SQLiteGameLogEntity
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_SQLiteGameLogEntity_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_SQLiteGameLogEntity_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_SQLiteGameLogEntity_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_SQLiteGameLogEntity_staticCastPtr)
NamedObject_SQLiteGameLogEntity_swigregister = _Myoushu.NamedObject_SQLiteGameLogEntity_swigregister
NamedObject_SQLiteGameLogEntity_swigregister(NamedObject_SQLiteGameLogEntity)

def NamedObject_SQLiteGameLogEntity_getStaticClassName():
  return _Myoushu.NamedObject_SQLiteGameLogEntity_getStaticClassName()
NamedObject_SQLiteGameLogEntity_getStaticClassName = _Myoushu.NamedObject_SQLiteGameLogEntity_getStaticClassName

def NamedObject_SQLiteGameLogEntity_staticCastPtr(*args):
  return _Myoushu.NamedObject_SQLiteGameLogEntity_staticCastPtr(*args)
NamedObject_SQLiteGameLogEntity_staticCastPtr = _Myoushu.NamedObject_SQLiteGameLogEntity_staticCastPtr

class NamedObject_Replay(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_Replay, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_Replay, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_Replay
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_Replay_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_Replay_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_Replay_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_Replay_staticCastPtr)
NamedObject_Replay_swigregister = _Myoushu.NamedObject_Replay_swigregister
NamedObject_Replay_swigregister(NamedObject_Replay)

def NamedObject_Replay_getStaticClassName():
  return _Myoushu.NamedObject_Replay_getStaticClassName()
NamedObject_Replay_getStaticClassName = _Myoushu.NamedObject_Replay_getStaticClassName

def NamedObject_Replay_staticCastPtr(*args):
  return _Myoushu.NamedObject_Replay_staticCastPtr(*args)
NamedObject_Replay_staticCastPtr = _Myoushu.NamedObject_Replay_staticCastPtr

class NamedObject_ContentImporter(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_ContentImporter, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_ContentImporter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_ContentImporter
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_ContentImporter_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_ContentImporter_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_ContentImporter_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_ContentImporter_staticCastPtr)
NamedObject_ContentImporter_swigregister = _Myoushu.NamedObject_ContentImporter_swigregister
NamedObject_ContentImporter_swigregister(NamedObject_ContentImporter)

def NamedObject_ContentImporter_getStaticClassName():
  return _Myoushu.NamedObject_ContentImporter_getStaticClassName()
NamedObject_ContentImporter_getStaticClassName = _Myoushu.NamedObject_ContentImporter_getStaticClassName

def NamedObject_ContentImporter_staticCastPtr(*args):
  return _Myoushu.NamedObject_ContentImporter_staticCastPtr(*args)
NamedObject_ContentImporter_staticCastPtr = _Myoushu.NamedObject_ContentImporter_staticCastPtr

class NamedObject_FunctorBase(NamedObjectBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject_FunctorBase, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject_FunctorBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObject_FunctorBase
    __del__ = lambda self : None;
    __swig_getmethods__["getStaticClassName"] = lambda x: _Myoushu.NamedObject_FunctorBase_getStaticClassName
    if _newclass:getStaticClassName = staticmethod(_Myoushu.NamedObject_FunctorBase_getStaticClassName)
    __swig_getmethods__["staticCastPtr"] = lambda x: _Myoushu.NamedObject_FunctorBase_staticCastPtr
    if _newclass:staticCastPtr = staticmethod(_Myoushu.NamedObject_FunctorBase_staticCastPtr)
NamedObject_FunctorBase_swigregister = _Myoushu.NamedObject_FunctorBase_swigregister
NamedObject_FunctorBase_swigregister(NamedObject_FunctorBase)

def NamedObject_FunctorBase_getStaticClassName():
  return _Myoushu.NamedObject_FunctorBase_getStaticClassName()
NamedObject_FunctorBase_getStaticClassName = _Myoushu.NamedObject_FunctorBase_getStaticClassName

def NamedObject_FunctorBase_staticCastPtr(*args):
  return _Myoushu.NamedObject_FunctorBase_staticCastPtr(*args)
NamedObject_FunctorBase_staticCastPtr = _Myoushu.NamedObject_FunctorBase_staticCastPtr

class Plugin(NamedInstance):
    __swig_setmethods__ = {}
    for _s in [NamedInstance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plugin, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedInstance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Plugin, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_Plugin
    __del__ = lambda self : None;
    def install(self): return _Myoushu.Plugin_install(self)
    def initialise(self): return _Myoushu.Plugin_initialise(self)
    def shutdown(self): return _Myoushu.Plugin_shutdown(self)
    def uninstall(self): return _Myoushu.Plugin_uninstall(self)
Plugin_swigregister = _Myoushu.Plugin_swigregister
Plugin_swigregister(Plugin)

class PoolObjectReferenceCounter(ReferenceCounterBase):
    __swig_setmethods__ = {}
    for _s in [ReferenceCounterBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoolObjectReferenceCounter, name, value)
    __swig_getmethods__ = {}
    for _s in [ReferenceCounterBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PoolObjectReferenceCounter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_PoolObjectReferenceCounter()
        try: self.this.append(this)
        except: self.this = this
    def duplicate(self): return _Myoushu.PoolObjectReferenceCounter_duplicate(self)
    def release(self): return _Myoushu.PoolObjectReferenceCounter_release(self)
    def referenceCount(self): return _Myoushu.PoolObjectReferenceCounter_referenceCount(self)
PoolObjectReferenceCounter_swigregister = _Myoushu.PoolObjectReferenceCounter_swigregister
PoolObjectReferenceCounter_swigregister(PoolObjectReferenceCounter)

class PoolObject(NamedObject_PoolObject):
    __swig_setmethods__ = {}
    for _s in [NamedObject_PoolObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoolObject, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObject_PoolObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PoolObject, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_PoolObject
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.PoolObject_getClassName(self)
    def castPtr(self, *args): return _Myoushu.PoolObject_castPtr(self, *args)
    def clear(self): return _Myoushu.PoolObject_clear(self)
    def returnToPool(self, autoDelete = False): return _Myoushu.PoolObject_returnToPool(self, autoDelete)
PoolObject_swigregister = _Myoushu.PoolObject_swigregister
PoolObject_swigregister(PoolObject)

class Value(RefCountedObject,Serializable):
    __swig_setmethods__ = {}
    for _s in [RefCountedObject,Serializable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Value, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountedObject,Serializable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Value, name)
    __repr__ = _swig_repr
    VT_CHAR = _Myoushu.Value_VT_CHAR
    VT_UCHAR = _Myoushu.Value_VT_UCHAR
    VT_SHORT = _Myoushu.Value_VT_SHORT
    VT_USHORT = _Myoushu.Value_VT_USHORT
    VT_INT = _Myoushu.Value_VT_INT
    VT_UINT = _Myoushu.Value_VT_UINT
    VT_LONG = _Myoushu.Value_VT_LONG
    VT_ULONG = _Myoushu.Value_VT_ULONG
    VT_FLOAT = _Myoushu.Value_VT_FLOAT
    VT_DOUBLE = _Myoushu.Value_VT_DOUBLE
    VT_STRING = _Myoushu.Value_VT_STRING
    VT_NAMED_INSTANCE = _Myoushu.Value_VT_NAMED_INSTANCE
    VT_VOID_PTR = _Myoushu.Value_VT_VOID_PTR
    VT_CONST_NAMED_INSTANCE = _Myoushu.Value_VT_CONST_NAMED_INSTANCE
    VT_CONST_VOID_PTR = _Myoushu.Value_VT_CONST_VOID_PTR
    VT_JVALUE = _Myoushu.Value_VT_JVALUE
    VT_UNKNOWN = _Myoushu.Value_VT_UNKNOWN
    def __init__(self, *args): 
        this = _Myoushu.new_Value(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Value
    __del__ = lambda self : None;
    def clearValue(self): return _Myoushu.Value_clearValue(self)
    def set(self, *args): return _Myoushu.Value_set(self, *args)
    def setChar(self, *args): return _Myoushu.Value_setChar(self, *args)
    def setUChar(self, *args): return _Myoushu.Value_setUChar(self, *args)
    def setShort(self, *args): return _Myoushu.Value_setShort(self, *args)
    def setUShort(self, *args): return _Myoushu.Value_setUShort(self, *args)
    def setInt(self, *args): return _Myoushu.Value_setInt(self, *args)
    def setUInt(self, *args): return _Myoushu.Value_setUInt(self, *args)
    def setLong(self, *args): return _Myoushu.Value_setLong(self, *args)
    def setULong(self, *args): return _Myoushu.Value_setULong(self, *args)
    def setFloat(self, *args): return _Myoushu.Value_setFloat(self, *args)
    def setDouble(self, *args): return _Myoushu.Value_setDouble(self, *args)
    def setString(self, *args): return _Myoushu.Value_setString(self, *args)
    def setNamedInstancePtr(self, *args): return _Myoushu.Value_setNamedInstancePtr(self, *args)
    def setVoidPtr(self, *args): return _Myoushu.Value_setVoidPtr(self, *args)
    def setConstNamedInstancePtr(self, *args): return _Myoushu.Value_setConstNamedInstancePtr(self, *args)
    def setConstVoidPtr(self, *args): return _Myoushu.Value_setConstVoidPtr(self, *args)
    def setJValue(self, *args): return _Myoushu.Value_setJValue(self, *args)
    def get(self, *args): return _Myoushu.Value_get(self, *args)
    def getChar(self): return _Myoushu.Value_getChar(self)
    def getUnsignedChar(self): return _Myoushu.Value_getUnsignedChar(self)
    def getShort(self): return _Myoushu.Value_getShort(self)
    def getUnsignedShort(self): return _Myoushu.Value_getUnsignedShort(self)
    def getInt(self): return _Myoushu.Value_getInt(self)
    def getUnsignedInt(self): return _Myoushu.Value_getUnsignedInt(self)
    def getLong(self): return _Myoushu.Value_getLong(self)
    def getUnsignedLong(self): return _Myoushu.Value_getUnsignedLong(self)
    def getFloat(self): return _Myoushu.Value_getFloat(self)
    def getDouble(self): return _Myoushu.Value_getDouble(self)
    def getString(self): return _Myoushu.Value_getString(self)
    def getNamedInstance(self): return _Myoushu.Value_getNamedInstance(self)
    def getVoidPtr(self): return _Myoushu.Value_getVoidPtr(self)
    def getConstNamedInstance(self): return _Myoushu.Value_getConstNamedInstance(self)
    def getConstVoidPtr(self): return _Myoushu.Value_getConstVoidPtr(self)
    def getJValue(self): return _Myoushu.Value_getJValue(self)
    def getType(self): return _Myoushu.Value_getType(self)
    def getAutoPtr(self): return _Myoushu.Value_getAutoPtr(self)
    def toString(self): return _Myoushu.Value_toString(self)
    def serialize(self, *args): return _Myoushu.Value_serialize(self, *args)
    def populateInstance(self, *args): return _Myoushu.Value_populateInstance(self, *args)
Value_swigregister = _Myoushu.Value_swigregister
Value_swigregister(Value)

class FunctorBase(Cloneable,RefCountedObject,NamedObject_FunctorBase,NamedInstance):
    __swig_setmethods__ = {}
    for _s in [Cloneable,RefCountedObject,NamedObject_FunctorBase,NamedInstance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FunctorBase, name, value)
    __swig_getmethods__ = {}
    for _s in [Cloneable,RefCountedObject,NamedObject_FunctorBase,NamedInstance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FunctorBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getClassName(self): return _Myoushu.FunctorBase_getClassName(self)
    def castPtr(self, *args): return _Myoushu.FunctorBase_castPtr(self, *args)
    def __call__(self): return _Myoushu.FunctorBase___call__(self)
    __swig_destroy__ = _Myoushu.delete_FunctorBase
    __del__ = lambda self : None;
FunctorBase_swigregister = _Myoushu.FunctorBase_swigregister
FunctorBase_swigregister(FunctorBase)

class Message(Cloneable,NamedObject_Message,PoolObject,Serializable):
    __swig_setmethods__ = {}
    for _s in [Cloneable,NamedObject_Message,PoolObject,Serializable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Message, name, value)
    __swig_getmethods__ = {}
    for _s in [Cloneable,NamedObject_Message,PoolObject,Serializable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Message, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_Message
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.Message_getClassName(self)
    def castPtr(self, *args): return _Myoushu.Message_castPtr(self, *args)
    def clone(self): return _Myoushu.Message_clone(self)
    def getCreator(self): return _Myoushu.Message_getCreator(self)
    def setCreator(self, *args): return _Myoushu.Message_setCreator(self, *args)
    def clear(self): return _Myoushu.Message_clear(self)
    def serialize(self, *args): return _Myoushu.Message_serialize(self, *args)
    def populateInstance(self, *args): return _Myoushu.Message_populateInstance(self, *args)
Message_swigregister = _Myoushu.Message_swigregister
Message_swigregister(Message)

class TimerTaskMessage(NamedObject_TimerTaskMessage,Message):
    __swig_setmethods__ = {}
    for _s in [NamedObject_TimerTaskMessage,Message]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimerTaskMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObject_TimerTaskMessage,Message]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimerTaskMessage, name)
    __repr__ = _swig_repr
    TM_UPDATE = _Myoushu.TimerTaskMessage_TM_UPDATE
    TM_UNKNOWN = _Myoushu.TimerTaskMessage_TM_UNKNOWN
    def __init__(self, *args): 
        this = _Myoushu.new_TimerTaskMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_TimerTaskMessage
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.TimerTaskMessage_getClassName(self)
    def castPtr(self, *args): return _Myoushu.TimerTaskMessage_castPtr(self, *args)
    def getMessageType(self): return _Myoushu.TimerTaskMessage_getMessageType(self)
    def setMessageType(self, *args): return _Myoushu.TimerTaskMessage_setMessageType(self, *args)
    def getAbsTime(self): return _Myoushu.TimerTaskMessage_getAbsTime(self)
    def setAbsTime(self, *args): return _Myoushu.TimerTaskMessage_setAbsTime(self, *args)
    def getDelta(self): return _Myoushu.TimerTaskMessage_getDelta(self)
    def setDelta(self, *args): return _Myoushu.TimerTaskMessage_setDelta(self, *args)
    def clear(self): return _Myoushu.TimerTaskMessage_clear(self)
    def clone(self, *args): return _Myoushu.TimerTaskMessage_clone(self, *args)
    def __eq__(self, *args): return _Myoushu.TimerTaskMessage___eq__(self, *args)
TimerTaskMessage_swigregister = _Myoushu.TimerTaskMessage_swigregister
TimerTaskMessage_swigregister(TimerTaskMessage)

class KeyValueProperties(Serializable):
    __swig_setmethods__ = {}
    for _s in [Serializable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyValueProperties, name, value)
    __swig_getmethods__ = {}
    for _s in [Serializable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KeyValueProperties, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_KeyValueProperties()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_KeyValueProperties
    __del__ = lambda self : None;
    def clear(self): return _Myoushu.KeyValueProperties_clear(self)
    def getBeginIterator(self): return _Myoushu.KeyValueProperties_getBeginIterator(self)
    def getEndIterator(self): return _Myoushu.KeyValueProperties_getEndIterator(self)
    def getBeginConstIterator(self): return _Myoushu.KeyValueProperties_getBeginConstIterator(self)
    def getEndConstIterator(self): return _Myoushu.KeyValueProperties_getEndConstIterator(self)
    def insert(self, *args): return _Myoushu.KeyValueProperties_insert(self, *args)
    def removeAndGetValue(self, *args): return _Myoushu.KeyValueProperties_removeAndGetValue(self, *args)
    def remove(self, *args): return _Myoushu.KeyValueProperties_remove(self, *args)
    def get(self, *args): return _Myoushu.KeyValueProperties_get(self, *args)
    def serialize(self, *args): return _Myoushu.KeyValueProperties_serialize(self, *args)
    def populateInstance(self, *args): return _Myoushu.KeyValueProperties_populateInstance(self, *args)
KeyValueProperties_swigregister = _Myoushu.KeyValueProperties_swigregister
KeyValueProperties_swigregister(KeyValueProperties)

class NamedObjectFactoryBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObjectFactoryBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObjectFactoryBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObjectFactoryBase
    __del__ = lambda self : None;
    def findByName(self, *args): return _Myoushu.NamedObjectFactoryBase_findByName(self, *args)
    def removeByName(self, *args): return _Myoushu.NamedObjectFactoryBase_removeByName(self, *args)
    def make(self, *args): return _Myoushu.NamedObjectFactoryBase_make(self, *args)
    __swig_getmethods__["registerObjectFactory"] = lambda x: _Myoushu.NamedObjectFactoryBase_registerObjectFactory
    if _newclass:registerObjectFactory = staticmethod(_Myoushu.NamedObjectFactoryBase_registerObjectFactory)
    __swig_getmethods__["unregisterObjectFactory"] = lambda x: _Myoushu.NamedObjectFactoryBase_unregisterObjectFactory
    if _newclass:unregisterObjectFactory = staticmethod(_Myoushu.NamedObjectFactoryBase_unregisterObjectFactory)
    __swig_getmethods__["getObjectFactoryFromClassName"] = lambda x: _Myoushu.NamedObjectFactoryBase_getObjectFactoryFromClassName
    if _newclass:getObjectFactoryFromClassName = staticmethod(_Myoushu.NamedObjectFactoryBase_getObjectFactoryFromClassName)
NamedObjectFactoryBase_swigregister = _Myoushu.NamedObjectFactoryBase_swigregister
NamedObjectFactoryBase_swigregister(NamedObjectFactoryBase)

def NamedObjectFactoryBase_registerObjectFactory(*args):
  return _Myoushu.NamedObjectFactoryBase_registerObjectFactory(*args)
NamedObjectFactoryBase_registerObjectFactory = _Myoushu.NamedObjectFactoryBase_registerObjectFactory

def NamedObjectFactoryBase_unregisterObjectFactory(*args):
  return _Myoushu.NamedObjectFactoryBase_unregisterObjectFactory(*args)
NamedObjectFactoryBase_unregisterObjectFactory = _Myoushu.NamedObjectFactoryBase_unregisterObjectFactory

def NamedObjectFactoryBase_getObjectFactoryFromClassName(*args):
  return _Myoushu.NamedObjectFactoryBase_getObjectFactoryFromClassName(*args)
NamedObjectFactoryBase_getObjectFactoryFromClassName = _Myoushu.NamedObjectFactoryBase_getObjectFactoryFromClassName

class NamedObjectFactory_Controller(NamedObjectFactoryBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectFactoryBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObjectFactory_Controller, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectFactoryBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObjectFactory_Controller, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObjectFactory_Controller
    __del__ = lambda self : None;
    def begin(self, *args): return _Myoushu.NamedObjectFactory_Controller_begin(self, *args)
    def end(self, *args): return _Myoushu.NamedObjectFactory_Controller_end(self, *args)
    def add(self, *args): return _Myoushu.NamedObjectFactory_Controller_add(self, *args)
    def remove(self, *args): return _Myoushu.NamedObjectFactory_Controller_remove(self, *args)
    def removeByName(self, *args): return _Myoushu.NamedObjectFactory_Controller_removeByName(self, *args)
    def find(self, *args): return _Myoushu.NamedObjectFactory_Controller_find(self, *args)
    def findByName(self, *args): return _Myoushu.NamedObjectFactory_Controller_findByName(self, *args)
    def clear(self): return _Myoushu.NamedObjectFactory_Controller_clear(self)
    def acquireReadLock(self): return _Myoushu.NamedObjectFactory_Controller_acquireReadLock(self)
    def releaseLock(self): return _Myoushu.NamedObjectFactory_Controller_releaseLock(self)
NamedObjectFactory_Controller_swigregister = _Myoushu.NamedObjectFactory_Controller_swigregister
NamedObjectFactory_Controller_swigregister(NamedObjectFactory_Controller)

class NamedObjectFactory_GameObject(NamedObjectFactoryBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectFactoryBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObjectFactory_GameObject, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectFactoryBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObjectFactory_GameObject, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObjectFactory_GameObject
    __del__ = lambda self : None;
    def begin(self, *args): return _Myoushu.NamedObjectFactory_GameObject_begin(self, *args)
    def end(self, *args): return _Myoushu.NamedObjectFactory_GameObject_end(self, *args)
    def add(self, *args): return _Myoushu.NamedObjectFactory_GameObject_add(self, *args)
    def remove(self, *args): return _Myoushu.NamedObjectFactory_GameObject_remove(self, *args)
    def removeByName(self, *args): return _Myoushu.NamedObjectFactory_GameObject_removeByName(self, *args)
    def find(self, *args): return _Myoushu.NamedObjectFactory_GameObject_find(self, *args)
    def findByName(self, *args): return _Myoushu.NamedObjectFactory_GameObject_findByName(self, *args)
    def clear(self): return _Myoushu.NamedObjectFactory_GameObject_clear(self)
    def acquireReadLock(self): return _Myoushu.NamedObjectFactory_GameObject_acquireReadLock(self)
    def releaseLock(self): return _Myoushu.NamedObjectFactory_GameObject_releaseLock(self)
NamedObjectFactory_GameObject_swigregister = _Myoushu.NamedObjectFactory_GameObject_swigregister
NamedObjectFactory_GameObject_swigregister(NamedObjectFactory_GameObject)

class NamedObjectFactory_Scene(NamedObjectFactoryBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectFactoryBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObjectFactory_Scene, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectFactoryBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObjectFactory_Scene, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObjectFactory_Scene
    __del__ = lambda self : None;
    def begin(self, *args): return _Myoushu.NamedObjectFactory_Scene_begin(self, *args)
    def end(self, *args): return _Myoushu.NamedObjectFactory_Scene_end(self, *args)
    def add(self, *args): return _Myoushu.NamedObjectFactory_Scene_add(self, *args)
    def remove(self, *args): return _Myoushu.NamedObjectFactory_Scene_remove(self, *args)
    def removeByName(self, *args): return _Myoushu.NamedObjectFactory_Scene_removeByName(self, *args)
    def find(self, *args): return _Myoushu.NamedObjectFactory_Scene_find(self, *args)
    def findByName(self, *args): return _Myoushu.NamedObjectFactory_Scene_findByName(self, *args)
    def clear(self): return _Myoushu.NamedObjectFactory_Scene_clear(self)
    def acquireReadLock(self): return _Myoushu.NamedObjectFactory_Scene_acquireReadLock(self)
    def releaseLock(self): return _Myoushu.NamedObjectFactory_Scene_releaseLock(self)
NamedObjectFactory_Scene_swigregister = _Myoushu.NamedObjectFactory_Scene_swigregister
NamedObjectFactory_Scene_swigregister(NamedObjectFactory_Scene)

class NamedObjectFactory_Sound(NamedObjectFactoryBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectFactoryBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObjectFactory_Sound, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectFactoryBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObjectFactory_Sound, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObjectFactory_Sound
    __del__ = lambda self : None;
    def begin(self, *args): return _Myoushu.NamedObjectFactory_Sound_begin(self, *args)
    def end(self, *args): return _Myoushu.NamedObjectFactory_Sound_end(self, *args)
    def add(self, *args): return _Myoushu.NamedObjectFactory_Sound_add(self, *args)
    def remove(self, *args): return _Myoushu.NamedObjectFactory_Sound_remove(self, *args)
    def removeByName(self, *args): return _Myoushu.NamedObjectFactory_Sound_removeByName(self, *args)
    def find(self, *args): return _Myoushu.NamedObjectFactory_Sound_find(self, *args)
    def findByName(self, *args): return _Myoushu.NamedObjectFactory_Sound_findByName(self, *args)
    def clear(self): return _Myoushu.NamedObjectFactory_Sound_clear(self)
    def acquireReadLock(self): return _Myoushu.NamedObjectFactory_Sound_acquireReadLock(self)
    def releaseLock(self): return _Myoushu.NamedObjectFactory_Sound_releaseLock(self)
NamedObjectFactory_Sound_swigregister = _Myoushu.NamedObjectFactory_Sound_swigregister
NamedObjectFactory_Sound_swigregister(NamedObjectFactory_Sound)

class NamedObjectFactory_GameLogEntity(NamedObjectFactoryBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectFactoryBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObjectFactory_GameLogEntity, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectFactoryBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObjectFactory_GameLogEntity, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObjectFactory_GameLogEntity
    __del__ = lambda self : None;
    def begin(self, *args): return _Myoushu.NamedObjectFactory_GameLogEntity_begin(self, *args)
    def end(self, *args): return _Myoushu.NamedObjectFactory_GameLogEntity_end(self, *args)
    def add(self, *args): return _Myoushu.NamedObjectFactory_GameLogEntity_add(self, *args)
    def remove(self, *args): return _Myoushu.NamedObjectFactory_GameLogEntity_remove(self, *args)
    def removeByName(self, *args): return _Myoushu.NamedObjectFactory_GameLogEntity_removeByName(self, *args)
    def find(self, *args): return _Myoushu.NamedObjectFactory_GameLogEntity_find(self, *args)
    def findByName(self, *args): return _Myoushu.NamedObjectFactory_GameLogEntity_findByName(self, *args)
    def clear(self): return _Myoushu.NamedObjectFactory_GameLogEntity_clear(self)
    def acquireReadLock(self): return _Myoushu.NamedObjectFactory_GameLogEntity_acquireReadLock(self)
    def releaseLock(self): return _Myoushu.NamedObjectFactory_GameLogEntity_releaseLock(self)
NamedObjectFactory_GameLogEntity_swigregister = _Myoushu.NamedObjectFactory_GameLogEntity_swigregister
NamedObjectFactory_GameLogEntity_swigregister(NamedObjectFactory_GameLogEntity)

class NamedObjectFactory_Replay(NamedObjectFactoryBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectFactoryBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObjectFactory_Replay, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectFactoryBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObjectFactory_Replay, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObjectFactory_Replay
    __del__ = lambda self : None;
    def begin(self, *args): return _Myoushu.NamedObjectFactory_Replay_begin(self, *args)
    def end(self, *args): return _Myoushu.NamedObjectFactory_Replay_end(self, *args)
    def add(self, *args): return _Myoushu.NamedObjectFactory_Replay_add(self, *args)
    def remove(self, *args): return _Myoushu.NamedObjectFactory_Replay_remove(self, *args)
    def removeByName(self, *args): return _Myoushu.NamedObjectFactory_Replay_removeByName(self, *args)
    def find(self, *args): return _Myoushu.NamedObjectFactory_Replay_find(self, *args)
    def findByName(self, *args): return _Myoushu.NamedObjectFactory_Replay_findByName(self, *args)
    def clear(self): return _Myoushu.NamedObjectFactory_Replay_clear(self)
    def acquireReadLock(self): return _Myoushu.NamedObjectFactory_Replay_acquireReadLock(self)
    def releaseLock(self): return _Myoushu.NamedObjectFactory_Replay_releaseLock(self)
NamedObjectFactory_Replay_swigregister = _Myoushu.NamedObjectFactory_Replay_swigregister
NamedObjectFactory_Replay_swigregister(NamedObjectFactory_Replay)

class NamedObjectFactory_ContentImporter(NamedObjectFactoryBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectFactoryBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObjectFactory_ContentImporter, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectFactoryBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObjectFactory_ContentImporter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObjectFactory_ContentImporter
    __del__ = lambda self : None;
    def begin(self, *args): return _Myoushu.NamedObjectFactory_ContentImporter_begin(self, *args)
    def end(self, *args): return _Myoushu.NamedObjectFactory_ContentImporter_end(self, *args)
    def add(self, *args): return _Myoushu.NamedObjectFactory_ContentImporter_add(self, *args)
    def remove(self, *args): return _Myoushu.NamedObjectFactory_ContentImporter_remove(self, *args)
    def removeByName(self, *args): return _Myoushu.NamedObjectFactory_ContentImporter_removeByName(self, *args)
    def find(self, *args): return _Myoushu.NamedObjectFactory_ContentImporter_find(self, *args)
    def findByName(self, *args): return _Myoushu.NamedObjectFactory_ContentImporter_findByName(self, *args)
    def clear(self): return _Myoushu.NamedObjectFactory_ContentImporter_clear(self)
    def acquireReadLock(self): return _Myoushu.NamedObjectFactory_ContentImporter_acquireReadLock(self)
    def releaseLock(self): return _Myoushu.NamedObjectFactory_ContentImporter_releaseLock(self)
NamedObjectFactory_ContentImporter_swigregister = _Myoushu.NamedObjectFactory_ContentImporter_swigregister
NamedObjectFactory_ContentImporter_swigregister(NamedObjectFactory_ContentImporter)

class NamedObjectFactory_FunctorBase(NamedObjectFactoryBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectFactoryBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObjectFactory_FunctorBase, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectFactoryBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObjectFactory_FunctorBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NamedObjectFactory_FunctorBase
    __del__ = lambda self : None;
    def begin(self, *args): return _Myoushu.NamedObjectFactory_FunctorBase_begin(self, *args)
    def end(self, *args): return _Myoushu.NamedObjectFactory_FunctorBase_end(self, *args)
    def add(self, *args): return _Myoushu.NamedObjectFactory_FunctorBase_add(self, *args)
    def remove(self, *args): return _Myoushu.NamedObjectFactory_FunctorBase_remove(self, *args)
    def removeByName(self, *args): return _Myoushu.NamedObjectFactory_FunctorBase_removeByName(self, *args)
    def find(self, *args): return _Myoushu.NamedObjectFactory_FunctorBase_find(self, *args)
    def findByName(self, *args): return _Myoushu.NamedObjectFactory_FunctorBase_findByName(self, *args)
    def clear(self): return _Myoushu.NamedObjectFactory_FunctorBase_clear(self)
    def acquireReadLock(self): return _Myoushu.NamedObjectFactory_FunctorBase_acquireReadLock(self)
    def releaseLock(self): return _Myoushu.NamedObjectFactory_FunctorBase_releaseLock(self)
NamedObjectFactory_FunctorBase_swigregister = _Myoushu.NamedObjectFactory_FunctorBase_swigregister
NamedObjectFactory_FunctorBase_swigregister(NamedObjectFactory_FunctorBase)

class ObjectPool_AnimationTaskMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectPool_AnimationTaskMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectPool_AnimationTaskMessage, name)
    __repr__ = _swig_repr
    def __init__(self, maxNumberOfObjects = 0): 
        this = _Myoushu.new_ObjectPool_AnimationTaskMessage(maxNumberOfObjects)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ObjectPool_AnimationTaskMessage
    __del__ = lambda self : None;
    def add(self, *args): return _Myoushu.ObjectPool_AnimationTaskMessage_add(self, *args)
    def get(self, autoCreate = False): return _Myoushu.ObjectPool_AnimationTaskMessage_get(self, autoCreate)
ObjectPool_AnimationTaskMessage_swigregister = _Myoushu.ObjectPool_AnimationTaskMessage_swigregister
ObjectPool_AnimationTaskMessage_swigregister(ObjectPool_AnimationTaskMessage)

class ObjectPool_KernelMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectPool_KernelMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectPool_KernelMessage, name)
    __repr__ = _swig_repr
    def __init__(self, maxNumberOfObjects = 0): 
        this = _Myoushu.new_ObjectPool_KernelMessage(maxNumberOfObjects)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ObjectPool_KernelMessage
    __del__ = lambda self : None;
    def add(self, *args): return _Myoushu.ObjectPool_KernelMessage_add(self, *args)
    def get(self, autoCreate = False): return _Myoushu.ObjectPool_KernelMessage_get(self, autoCreate)
ObjectPool_KernelMessage_swigregister = _Myoushu.ObjectPool_KernelMessage_swigregister
ObjectPool_KernelMessage_swigregister(ObjectPool_KernelMessage)

class ObjectPool_GUIMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectPool_GUIMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectPool_GUIMessage, name)
    __repr__ = _swig_repr
    def __init__(self, maxNumberOfObjects = 0): 
        this = _Myoushu.new_ObjectPool_GUIMessage(maxNumberOfObjects)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ObjectPool_GUIMessage
    __del__ = lambda self : None;
    def add(self, *args): return _Myoushu.ObjectPool_GUIMessage_add(self, *args)
    def get(self, autoCreate = False): return _Myoushu.ObjectPool_GUIMessage_get(self, autoCreate)
ObjectPool_GUIMessage_swigregister = _Myoushu.ObjectPool_GUIMessage_swigregister
ObjectPool_GUIMessage_swigregister(ObjectPool_GUIMessage)

class ObjectPool_ControllerTaskMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectPool_ControllerTaskMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectPool_ControllerTaskMessage, name)
    __repr__ = _swig_repr
    def __init__(self, maxNumberOfObjects = 0): 
        this = _Myoushu.new_ObjectPool_ControllerTaskMessage(maxNumberOfObjects)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ObjectPool_ControllerTaskMessage
    __del__ = lambda self : None;
    def add(self, *args): return _Myoushu.ObjectPool_ControllerTaskMessage_add(self, *args)
    def get(self, autoCreate = False): return _Myoushu.ObjectPool_ControllerTaskMessage_get(self, autoCreate)
ObjectPool_ControllerTaskMessage_swigregister = _Myoushu.ObjectPool_ControllerTaskMessage_swigregister
ObjectPool_ControllerTaskMessage_swigregister(ObjectPool_ControllerTaskMessage)

class ObjectPool_InputDeviceMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectPool_InputDeviceMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectPool_InputDeviceMessage, name)
    __repr__ = _swig_repr
    def __init__(self, maxNumberOfObjects = 0): 
        this = _Myoushu.new_ObjectPool_InputDeviceMessage(maxNumberOfObjects)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ObjectPool_InputDeviceMessage
    __del__ = lambda self : None;
    def add(self, *args): return _Myoushu.ObjectPool_InputDeviceMessage_add(self, *args)
    def get(self, autoCreate = False): return _Myoushu.ObjectPool_InputDeviceMessage_get(self, autoCreate)
ObjectPool_InputDeviceMessage_swigregister = _Myoushu.ObjectPool_InputDeviceMessage_swigregister
ObjectPool_InputDeviceMessage_swigregister(ObjectPool_InputDeviceMessage)

class ObjectPool_InputMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectPool_InputMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectPool_InputMessage, name)
    __repr__ = _swig_repr
    def __init__(self, maxNumberOfObjects = 0): 
        this = _Myoushu.new_ObjectPool_InputMessage(maxNumberOfObjects)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ObjectPool_InputMessage
    __del__ = lambda self : None;
    def add(self, *args): return _Myoushu.ObjectPool_InputMessage_add(self, *args)
    def get(self, autoCreate = False): return _Myoushu.ObjectPool_InputMessage_get(self, autoCreate)
ObjectPool_InputMessage_swigregister = _Myoushu.ObjectPool_InputMessage_swigregister
ObjectPool_InputMessage_swigregister(ObjectPool_InputMessage)

class ObjectPool_ScriptMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectPool_ScriptMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectPool_ScriptMessage, name)
    __repr__ = _swig_repr
    def __init__(self, maxNumberOfObjects = 0): 
        this = _Myoushu.new_ObjectPool_ScriptMessage(maxNumberOfObjects)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ObjectPool_ScriptMessage
    __del__ = lambda self : None;
    def add(self, *args): return _Myoushu.ObjectPool_ScriptMessage_add(self, *args)
    def get(self, autoCreate = False): return _Myoushu.ObjectPool_ScriptMessage_get(self, autoCreate)
ObjectPool_ScriptMessage_swigregister = _Myoushu.ObjectPool_ScriptMessage_swigregister
ObjectPool_ScriptMessage_swigregister(ObjectPool_ScriptMessage)

class ObjectPool_NetworkMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectPool_NetworkMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectPool_NetworkMessage, name)
    __repr__ = _swig_repr
    def __init__(self, maxNumberOfObjects = 0): 
        this = _Myoushu.new_ObjectPool_NetworkMessage(maxNumberOfObjects)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ObjectPool_NetworkMessage
    __del__ = lambda self : None;
    def add(self, *args): return _Myoushu.ObjectPool_NetworkMessage_add(self, *args)
    def get(self, autoCreate = False): return _Myoushu.ObjectPool_NetworkMessage_get(self, autoCreate)
ObjectPool_NetworkMessage_swigregister = _Myoushu.ObjectPool_NetworkMessage_swigregister
ObjectPool_NetworkMessage_swigregister(ObjectPool_NetworkMessage)

class ObjectPool_TimerTaskMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectPool_TimerTaskMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectPool_TimerTaskMessage, name)
    __repr__ = _swig_repr
    def __init__(self, maxNumberOfObjects = 0): 
        this = _Myoushu.new_ObjectPool_TimerTaskMessage(maxNumberOfObjects)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ObjectPool_TimerTaskMessage
    __del__ = lambda self : None;
    def add(self, *args): return _Myoushu.ObjectPool_TimerTaskMessage_add(self, *args)
    def get(self, autoCreate = False): return _Myoushu.ObjectPool_TimerTaskMessage_get(self, autoCreate)
ObjectPool_TimerTaskMessage_swigregister = _Myoushu.ObjectPool_TimerTaskMessage_swigregister
ObjectPool_TimerTaskMessage_swigregister(ObjectPool_TimerTaskMessage)

class ObjectPool_GameLogMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectPool_GameLogMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectPool_GameLogMessage, name)
    __repr__ = _swig_repr
    def __init__(self, maxNumberOfObjects = 0): 
        this = _Myoushu.new_ObjectPool_GameLogMessage(maxNumberOfObjects)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ObjectPool_GameLogMessage
    __del__ = lambda self : None;
    def add(self, *args): return _Myoushu.ObjectPool_GameLogMessage_add(self, *args)
    def get(self, autoCreate = False): return _Myoushu.ObjectPool_GameLogMessage_get(self, autoCreate)
ObjectPool_GameLogMessage_swigregister = _Myoushu.ObjectPool_GameLogMessage_swigregister
ObjectPool_GameLogMessage_swigregister(ObjectPool_GameLogMessage)

class ObjectPool_ReplayMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectPool_ReplayMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectPool_ReplayMessage, name)
    __repr__ = _swig_repr
    def __init__(self, maxNumberOfObjects = 0): 
        this = _Myoushu.new_ObjectPool_ReplayMessage(maxNumberOfObjects)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ObjectPool_ReplayMessage
    __del__ = lambda self : None;
    def add(self, *args): return _Myoushu.ObjectPool_ReplayMessage_add(self, *args)
    def get(self, autoCreate = False): return _Myoushu.ObjectPool_ReplayMessage_get(self, autoCreate)
ObjectPool_ReplayMessage_swigregister = _Myoushu.ObjectPool_ReplayMessage_swigregister
ObjectPool_ReplayMessage_swigregister(ObjectPool_ReplayMessage)

class ObjectPool_VideoTaskMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectPool_VideoTaskMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectPool_VideoTaskMessage, name)
    __repr__ = _swig_repr
    def __init__(self, maxNumberOfObjects = 0): 
        this = _Myoushu.new_ObjectPool_VideoTaskMessage(maxNumberOfObjects)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ObjectPool_VideoTaskMessage
    __del__ = lambda self : None;
    def add(self, *args): return _Myoushu.ObjectPool_VideoTaskMessage_add(self, *args)
    def get(self, autoCreate = False): return _Myoushu.ObjectPool_VideoTaskMessage_get(self, autoCreate)
ObjectPool_VideoTaskMessage_swigregister = _Myoushu.ObjectPool_VideoTaskMessage_swigregister
ObjectPool_VideoTaskMessage_swigregister(ObjectPool_VideoTaskMessage)

class Singleton_ObjectPool_AnimationTaskMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_ObjectPool_AnimationTaskMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_ObjectPool_AnimationTaskMessage, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_ObjectPool_AnimationTaskMessage()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_ObjectPool_AnimationTaskMessage
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_ObjectPool_AnimationTaskMessage_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_ObjectPool_AnimationTaskMessage_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_ObjectPool_AnimationTaskMessage_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_ObjectPool_AnimationTaskMessage_getSingletonPtr)
Singleton_ObjectPool_AnimationTaskMessage_swigregister = _Myoushu.Singleton_ObjectPool_AnimationTaskMessage_swigregister
Singleton_ObjectPool_AnimationTaskMessage_swigregister(Singleton_ObjectPool_AnimationTaskMessage)

def Singleton_ObjectPool_AnimationTaskMessage_getSingleton():
  return _Myoushu.Singleton_ObjectPool_AnimationTaskMessage_getSingleton()
Singleton_ObjectPool_AnimationTaskMessage_getSingleton = _Myoushu.Singleton_ObjectPool_AnimationTaskMessage_getSingleton

def Singleton_ObjectPool_AnimationTaskMessage_getSingletonPtr():
  return _Myoushu.Singleton_ObjectPool_AnimationTaskMessage_getSingletonPtr()
Singleton_ObjectPool_AnimationTaskMessage_getSingletonPtr = _Myoushu.Singleton_ObjectPool_AnimationTaskMessage_getSingletonPtr

class Singleton_ObjectPool_KernelMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_ObjectPool_KernelMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_ObjectPool_KernelMessage, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_ObjectPool_KernelMessage()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_ObjectPool_KernelMessage
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_ObjectPool_KernelMessage_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_ObjectPool_KernelMessage_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_ObjectPool_KernelMessage_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_ObjectPool_KernelMessage_getSingletonPtr)
Singleton_ObjectPool_KernelMessage_swigregister = _Myoushu.Singleton_ObjectPool_KernelMessage_swigregister
Singleton_ObjectPool_KernelMessage_swigregister(Singleton_ObjectPool_KernelMessage)

def Singleton_ObjectPool_KernelMessage_getSingleton():
  return _Myoushu.Singleton_ObjectPool_KernelMessage_getSingleton()
Singleton_ObjectPool_KernelMessage_getSingleton = _Myoushu.Singleton_ObjectPool_KernelMessage_getSingleton

def Singleton_ObjectPool_KernelMessage_getSingletonPtr():
  return _Myoushu.Singleton_ObjectPool_KernelMessage_getSingletonPtr()
Singleton_ObjectPool_KernelMessage_getSingletonPtr = _Myoushu.Singleton_ObjectPool_KernelMessage_getSingletonPtr

class Singleton_ObjectPool_GUIMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_ObjectPool_GUIMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_ObjectPool_GUIMessage, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_ObjectPool_GUIMessage()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_ObjectPool_GUIMessage
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_ObjectPool_GUIMessage_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_ObjectPool_GUIMessage_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_ObjectPool_GUIMessage_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_ObjectPool_GUIMessage_getSingletonPtr)
Singleton_ObjectPool_GUIMessage_swigregister = _Myoushu.Singleton_ObjectPool_GUIMessage_swigregister
Singleton_ObjectPool_GUIMessage_swigregister(Singleton_ObjectPool_GUIMessage)

def Singleton_ObjectPool_GUIMessage_getSingleton():
  return _Myoushu.Singleton_ObjectPool_GUIMessage_getSingleton()
Singleton_ObjectPool_GUIMessage_getSingleton = _Myoushu.Singleton_ObjectPool_GUIMessage_getSingleton

def Singleton_ObjectPool_GUIMessage_getSingletonPtr():
  return _Myoushu.Singleton_ObjectPool_GUIMessage_getSingletonPtr()
Singleton_ObjectPool_GUIMessage_getSingletonPtr = _Myoushu.Singleton_ObjectPool_GUIMessage_getSingletonPtr

class Singleton_ObjectPool_ControllerTaskMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_ObjectPool_ControllerTaskMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_ObjectPool_ControllerTaskMessage, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_ObjectPool_ControllerTaskMessage()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_ObjectPool_ControllerTaskMessage
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_ObjectPool_ControllerTaskMessage_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_ObjectPool_ControllerTaskMessage_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_ObjectPool_ControllerTaskMessage_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_ObjectPool_ControllerTaskMessage_getSingletonPtr)
Singleton_ObjectPool_ControllerTaskMessage_swigregister = _Myoushu.Singleton_ObjectPool_ControllerTaskMessage_swigregister
Singleton_ObjectPool_ControllerTaskMessage_swigregister(Singleton_ObjectPool_ControllerTaskMessage)

def Singleton_ObjectPool_ControllerTaskMessage_getSingleton():
  return _Myoushu.Singleton_ObjectPool_ControllerTaskMessage_getSingleton()
Singleton_ObjectPool_ControllerTaskMessage_getSingleton = _Myoushu.Singleton_ObjectPool_ControllerTaskMessage_getSingleton

def Singleton_ObjectPool_ControllerTaskMessage_getSingletonPtr():
  return _Myoushu.Singleton_ObjectPool_ControllerTaskMessage_getSingletonPtr()
Singleton_ObjectPool_ControllerTaskMessage_getSingletonPtr = _Myoushu.Singleton_ObjectPool_ControllerTaskMessage_getSingletonPtr

class Singleton_ObjectPool_InputDeviceMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_ObjectPool_InputDeviceMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_ObjectPool_InputDeviceMessage, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_ObjectPool_InputDeviceMessage()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_ObjectPool_InputDeviceMessage
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_ObjectPool_InputDeviceMessage_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_ObjectPool_InputDeviceMessage_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_ObjectPool_InputDeviceMessage_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_ObjectPool_InputDeviceMessage_getSingletonPtr)
Singleton_ObjectPool_InputDeviceMessage_swigregister = _Myoushu.Singleton_ObjectPool_InputDeviceMessage_swigregister
Singleton_ObjectPool_InputDeviceMessage_swigregister(Singleton_ObjectPool_InputDeviceMessage)

def Singleton_ObjectPool_InputDeviceMessage_getSingleton():
  return _Myoushu.Singleton_ObjectPool_InputDeviceMessage_getSingleton()
Singleton_ObjectPool_InputDeviceMessage_getSingleton = _Myoushu.Singleton_ObjectPool_InputDeviceMessage_getSingleton

def Singleton_ObjectPool_InputDeviceMessage_getSingletonPtr():
  return _Myoushu.Singleton_ObjectPool_InputDeviceMessage_getSingletonPtr()
Singleton_ObjectPool_InputDeviceMessage_getSingletonPtr = _Myoushu.Singleton_ObjectPool_InputDeviceMessage_getSingletonPtr

class Singleton_ObjectPool_InputMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_ObjectPool_InputMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_ObjectPool_InputMessage, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_ObjectPool_InputMessage()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_ObjectPool_InputMessage
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_ObjectPool_InputMessage_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_ObjectPool_InputMessage_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_ObjectPool_InputMessage_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_ObjectPool_InputMessage_getSingletonPtr)
Singleton_ObjectPool_InputMessage_swigregister = _Myoushu.Singleton_ObjectPool_InputMessage_swigregister
Singleton_ObjectPool_InputMessage_swigregister(Singleton_ObjectPool_InputMessage)

def Singleton_ObjectPool_InputMessage_getSingleton():
  return _Myoushu.Singleton_ObjectPool_InputMessage_getSingleton()
Singleton_ObjectPool_InputMessage_getSingleton = _Myoushu.Singleton_ObjectPool_InputMessage_getSingleton

def Singleton_ObjectPool_InputMessage_getSingletonPtr():
  return _Myoushu.Singleton_ObjectPool_InputMessage_getSingletonPtr()
Singleton_ObjectPool_InputMessage_getSingletonPtr = _Myoushu.Singleton_ObjectPool_InputMessage_getSingletonPtr

class Singleton_ObjectPool_ScriptMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_ObjectPool_ScriptMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_ObjectPool_ScriptMessage, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_ObjectPool_ScriptMessage()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_ObjectPool_ScriptMessage
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_ObjectPool_ScriptMessage_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_ObjectPool_ScriptMessage_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_ObjectPool_ScriptMessage_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_ObjectPool_ScriptMessage_getSingletonPtr)
Singleton_ObjectPool_ScriptMessage_swigregister = _Myoushu.Singleton_ObjectPool_ScriptMessage_swigregister
Singleton_ObjectPool_ScriptMessage_swigregister(Singleton_ObjectPool_ScriptMessage)

def Singleton_ObjectPool_ScriptMessage_getSingleton():
  return _Myoushu.Singleton_ObjectPool_ScriptMessage_getSingleton()
Singleton_ObjectPool_ScriptMessage_getSingleton = _Myoushu.Singleton_ObjectPool_ScriptMessage_getSingleton

def Singleton_ObjectPool_ScriptMessage_getSingletonPtr():
  return _Myoushu.Singleton_ObjectPool_ScriptMessage_getSingletonPtr()
Singleton_ObjectPool_ScriptMessage_getSingletonPtr = _Myoushu.Singleton_ObjectPool_ScriptMessage_getSingletonPtr

class Singleton_ObjectPool_NetworkMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_ObjectPool_NetworkMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_ObjectPool_NetworkMessage, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_ObjectPool_NetworkMessage()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_ObjectPool_NetworkMessage
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_ObjectPool_NetworkMessage_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_ObjectPool_NetworkMessage_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_ObjectPool_NetworkMessage_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_ObjectPool_NetworkMessage_getSingletonPtr)
Singleton_ObjectPool_NetworkMessage_swigregister = _Myoushu.Singleton_ObjectPool_NetworkMessage_swigregister
Singleton_ObjectPool_NetworkMessage_swigregister(Singleton_ObjectPool_NetworkMessage)

def Singleton_ObjectPool_NetworkMessage_getSingleton():
  return _Myoushu.Singleton_ObjectPool_NetworkMessage_getSingleton()
Singleton_ObjectPool_NetworkMessage_getSingleton = _Myoushu.Singleton_ObjectPool_NetworkMessage_getSingleton

def Singleton_ObjectPool_NetworkMessage_getSingletonPtr():
  return _Myoushu.Singleton_ObjectPool_NetworkMessage_getSingletonPtr()
Singleton_ObjectPool_NetworkMessage_getSingletonPtr = _Myoushu.Singleton_ObjectPool_NetworkMessage_getSingletonPtr

class Singleton_ObjectPool_TimerTaskMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_ObjectPool_TimerTaskMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_ObjectPool_TimerTaskMessage, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_ObjectPool_TimerTaskMessage()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_ObjectPool_TimerTaskMessage
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_ObjectPool_TimerTaskMessage_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_ObjectPool_TimerTaskMessage_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_ObjectPool_TimerTaskMessage_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_ObjectPool_TimerTaskMessage_getSingletonPtr)
Singleton_ObjectPool_TimerTaskMessage_swigregister = _Myoushu.Singleton_ObjectPool_TimerTaskMessage_swigregister
Singleton_ObjectPool_TimerTaskMessage_swigregister(Singleton_ObjectPool_TimerTaskMessage)

def Singleton_ObjectPool_TimerTaskMessage_getSingleton():
  return _Myoushu.Singleton_ObjectPool_TimerTaskMessage_getSingleton()
Singleton_ObjectPool_TimerTaskMessage_getSingleton = _Myoushu.Singleton_ObjectPool_TimerTaskMessage_getSingleton

def Singleton_ObjectPool_TimerTaskMessage_getSingletonPtr():
  return _Myoushu.Singleton_ObjectPool_TimerTaskMessage_getSingletonPtr()
Singleton_ObjectPool_TimerTaskMessage_getSingletonPtr = _Myoushu.Singleton_ObjectPool_TimerTaskMessage_getSingletonPtr

class Singleton_ObjectPool_GameLogMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_ObjectPool_GameLogMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_ObjectPool_GameLogMessage, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_ObjectPool_GameLogMessage()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_ObjectPool_GameLogMessage
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_ObjectPool_GameLogMessage_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_ObjectPool_GameLogMessage_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_ObjectPool_GameLogMessage_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_ObjectPool_GameLogMessage_getSingletonPtr)
Singleton_ObjectPool_GameLogMessage_swigregister = _Myoushu.Singleton_ObjectPool_GameLogMessage_swigregister
Singleton_ObjectPool_GameLogMessage_swigregister(Singleton_ObjectPool_GameLogMessage)

def Singleton_ObjectPool_GameLogMessage_getSingleton():
  return _Myoushu.Singleton_ObjectPool_GameLogMessage_getSingleton()
Singleton_ObjectPool_GameLogMessage_getSingleton = _Myoushu.Singleton_ObjectPool_GameLogMessage_getSingleton

def Singleton_ObjectPool_GameLogMessage_getSingletonPtr():
  return _Myoushu.Singleton_ObjectPool_GameLogMessage_getSingletonPtr()
Singleton_ObjectPool_GameLogMessage_getSingletonPtr = _Myoushu.Singleton_ObjectPool_GameLogMessage_getSingletonPtr

class Singleton_ObjectPool_ReplayMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_ObjectPool_ReplayMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_ObjectPool_ReplayMessage, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_ObjectPool_ReplayMessage()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_ObjectPool_ReplayMessage
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_ObjectPool_ReplayMessage_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_ObjectPool_ReplayMessage_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_ObjectPool_ReplayMessage_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_ObjectPool_ReplayMessage_getSingletonPtr)
Singleton_ObjectPool_ReplayMessage_swigregister = _Myoushu.Singleton_ObjectPool_ReplayMessage_swigregister
Singleton_ObjectPool_ReplayMessage_swigregister(Singleton_ObjectPool_ReplayMessage)

def Singleton_ObjectPool_ReplayMessage_getSingleton():
  return _Myoushu.Singleton_ObjectPool_ReplayMessage_getSingleton()
Singleton_ObjectPool_ReplayMessage_getSingleton = _Myoushu.Singleton_ObjectPool_ReplayMessage_getSingleton

def Singleton_ObjectPool_ReplayMessage_getSingletonPtr():
  return _Myoushu.Singleton_ObjectPool_ReplayMessage_getSingletonPtr()
Singleton_ObjectPool_ReplayMessage_getSingletonPtr = _Myoushu.Singleton_ObjectPool_ReplayMessage_getSingletonPtr

class Singleton_ObjectPool_VideoTaskMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton_ObjectPool_VideoTaskMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton_ObjectPool_VideoTaskMessage, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Singleton_ObjectPool_VideoTaskMessage()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Singleton_ObjectPool_VideoTaskMessage
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.Singleton_ObjectPool_VideoTaskMessage_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.Singleton_ObjectPool_VideoTaskMessage_getSingleton)
    __swig_getmethods__["getSingletonPtr"] = lambda x: _Myoushu.Singleton_ObjectPool_VideoTaskMessage_getSingletonPtr
    if _newclass:getSingletonPtr = staticmethod(_Myoushu.Singleton_ObjectPool_VideoTaskMessage_getSingletonPtr)
Singleton_ObjectPool_VideoTaskMessage_swigregister = _Myoushu.Singleton_ObjectPool_VideoTaskMessage_swigregister
Singleton_ObjectPool_VideoTaskMessage_swigregister(Singleton_ObjectPool_VideoTaskMessage)

def Singleton_ObjectPool_VideoTaskMessage_getSingleton():
  return _Myoushu.Singleton_ObjectPool_VideoTaskMessage_getSingleton()
Singleton_ObjectPool_VideoTaskMessage_getSingleton = _Myoushu.Singleton_ObjectPool_VideoTaskMessage_getSingleton

def Singleton_ObjectPool_VideoTaskMessage_getSingletonPtr():
  return _Myoushu.Singleton_ObjectPool_VideoTaskMessage_getSingletonPtr()
Singleton_ObjectPool_VideoTaskMessage_getSingletonPtr = _Myoushu.Singleton_ObjectPool_VideoTaskMessage_getSingletonPtr

class HostRecord(NamedObject_HostRecord,NamedInstance):
    __swig_setmethods__ = {}
    for _s in [NamedObject_HostRecord,NamedInstance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HostRecord, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObject_HostRecord,NamedInstance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HostRecord, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_HostRecord(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_HostRecord
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.HostRecord_getClassName(self)
    def castPtr(self, *args): return _Myoushu.HostRecord_castPtr(self, *args)
    def getHostName(self): return _Myoushu.HostRecord_getHostName(self)
    def getIPAddress(self): return _Myoushu.HostRecord_getIPAddress(self)
    def __eq__(self, *args): return _Myoushu.HostRecord___eq__(self, *args)
HostRecord_swigregister = _Myoushu.HostRecord_swigregister
HostRecord_swigregister(HostRecord)

class Task(NamedObject_Task,NamedInstance,RefCountedObject):
    __swig_setmethods__ = {}
    for _s in [NamedObject_Task,NamedInstance,RefCountedObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Task, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObject_Task,NamedInstance,RefCountedObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Task, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    TS_CREATED = _Myoushu.Task_TS_CREATED
    TS_INITIALIZED = _Myoushu.Task_TS_INITIALIZED
    TS_RUNNING = _Myoushu.Task_TS_RUNNING
    TS_SUSPENDED = _Myoushu.Task_TS_SUSPENDED
    TS_KILLED = _Myoushu.Task_TS_KILLED
    __swig_destroy__ = _Myoushu.delete_Task
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.Task_getClassName(self)
    def castPtr(self, *args): return _Myoushu.Task_castPtr(self, *args)
    def getPriority(self): return _Myoushu.Task_getPriority(self)
    def getExecutionInterval(self): return _Myoushu.Task_getExecutionInterval(self)
    def getIterationLimit(self): return _Myoushu.Task_getIterationLimit(self)
    def getState(self): return _Myoushu.Task_getState(self)
    def getTimeLastExecuted(self): return _Myoushu.Task_getTimeLastExecuted(self)
    def setTimeLastExecuted(self, *args): return _Myoushu.Task_setTimeLastExecuted(self, *args)
    def setState(self, *args): return _Myoushu.Task_setState(self, *args)
    def init(self): return _Myoushu.Task_init(self)
    def suspend(self): return _Myoushu.Task_suspend(self)
    def execute(self, *args): return _Myoushu.Task_execute(self, *args)
    def kill(self): return _Myoushu.Task_kill(self)
Task_swigregister = _Myoushu.Task_swigregister
Task_swigregister(Task)

class LuaParser(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LuaParser, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LuaParser, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_LuaParser()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_LuaParser
    __del__ = lambda self : None;
    def getLuaState(self, *args): return _Myoushu.LuaParser_getLuaState(self, *args)
    def getLuaStateLock(self, write = False): return _Myoushu.LuaParser_getLuaStateLock(self, write)
    def releaseLuaStateLock(self): return _Myoushu.LuaParser_releaseLuaStateLock(self)
    def execute(self, *args): return _Myoushu.LuaParser_execute(self, *args)
LuaParser_swigregister = _Myoushu.LuaParser_swigregister
LuaParser_swigregister(LuaParser)

class Scene(NamedObject_Scene,NamedInstance,RefCountedObject):
    __swig_setmethods__ = {}
    for _s in [NamedObject_Scene,NamedInstance,RefCountedObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scene, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObject_Scene,NamedInstance,RefCountedObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Scene, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_Scene(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Scene
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.Scene_getClassName(self)
    def castPtr(self, *args): return _Myoushu.Scene_castPtr(self, *args)
    def acquireLockOnOgreSceneManager(self, write = False): return _Myoushu.Scene_acquireLockOnOgreSceneManager(self, write)
    def acquireLockOnNxOgreScene(self, write = False): return _Myoushu.Scene_acquireLockOnNxOgreScene(self, write)
    def releaseLockOnOgreSceneManager(self): return _Myoushu.Scene_releaseLockOnOgreSceneManager(self)
    def releaseLockOnNxOgreScene(self): return _Myoushu.Scene_releaseLockOnNxOgreScene(self)
    def getNxOgreScene(self, *args): return _Myoushu.Scene_getNxOgreScene(self, *args)
    def getOgreSceneManager(self, *args): return _Myoushu.Scene_getOgreSceneManager(self, *args)
    def getGameObjectsFromRaycast(self, *args): return _Myoushu.Scene_getGameObjectsFromRaycast(self, *args)
    def getClosestGameObjectFromRaycast(self, *args): return _Myoushu.Scene_getClosestGameObjectFromRaycast(self, *args)
    def __eq__(self, *args): return _Myoushu.Scene___eq__(self, *args)
    def getTypeName(self): return _Myoushu.Scene_getTypeName(self)
    def createCamera(self, *args): return _Myoushu.Scene_createCamera(self, *args)
    def getCamera(self, *args): return _Myoushu.Scene_getCamera(self, *args)
    def hasCamera(self, *args): return _Myoushu.Scene_hasCamera(self, *args)
    def destroyCamera(self, *args): return _Myoushu.Scene_destroyCamera(self, *args)
    def destroyAllCameras(self): return _Myoushu.Scene_destroyAllCameras(self)
    def createLight(self, *args): return _Myoushu.Scene_createLight(self, *args)
    def getLight(self, *args): return _Myoushu.Scene_getLight(self, *args)
    def hasLight(self, *args): return _Myoushu.Scene_hasLight(self, *args)
    def destroyLight(self, *args): return _Myoushu.Scene_destroyLight(self, *args)
    def destroyAllLights(self): return _Myoushu.Scene_destroyAllLights(self)
    def _notifyLightsDirty(self): return _Myoushu.Scene__notifyLightsDirty(self)
    def _getLightsDirtyCounter(self): return _Myoushu.Scene__getLightsDirtyCounter(self)
    def _getLightsAffectingFrustum(self): return _Myoushu.Scene__getLightsAffectingFrustum(self)
    def _populateLightList(self, *args): return _Myoushu.Scene__populateLightList(self, *args)
    def createSceneNode(self, *args): return _Myoushu.Scene_createSceneNode(self, *args)
    def destroySceneNode(self, *args): return _Myoushu.Scene_destroySceneNode(self, *args)
    def getRootSceneNode(self): return _Myoushu.Scene_getRootSceneNode(self)
    def getSceneNode(self, *args): return _Myoushu.Scene_getSceneNode(self, *args)
    def hasSceneNode(self, *args): return _Myoushu.Scene_hasSceneNode(self, *args)
    def createEntity(self, *args): return _Myoushu.Scene_createEntity(self, *args)
    def getEntity(self, *args): return _Myoushu.Scene_getEntity(self, *args)
    def hasEntity(self, *args): return _Myoushu.Scene_hasEntity(self, *args)
    def destroyEntity(self, *args): return _Myoushu.Scene_destroyEntity(self, *args)
    def destroyAllEntities(self): return _Myoushu.Scene_destroyAllEntities(self)
    def createManualObject(self, *args): return _Myoushu.Scene_createManualObject(self, *args)
    def getManualObject(self, *args): return _Myoushu.Scene_getManualObject(self, *args)
    def hasManualObject(self, *args): return _Myoushu.Scene_hasManualObject(self, *args)
    def destroyManualObject(self, *args): return _Myoushu.Scene_destroyManualObject(self, *args)
    def destroyAllManualObjects(self): return _Myoushu.Scene_destroyAllManualObjects(self)
    def createBillboardChain(self, *args): return _Myoushu.Scene_createBillboardChain(self, *args)
    def getBillboardChain(self, *args): return _Myoushu.Scene_getBillboardChain(self, *args)
    def hasBillboardChain(self, *args): return _Myoushu.Scene_hasBillboardChain(self, *args)
    def destroyBillboardChain(self, *args): return _Myoushu.Scene_destroyBillboardChain(self, *args)
    def destroyAllBillboardChains(self): return _Myoushu.Scene_destroyAllBillboardChains(self)
    def createRibbonTrail(self, *args): return _Myoushu.Scene_createRibbonTrail(self, *args)
    def getRibbonTrail(self, *args): return _Myoushu.Scene_getRibbonTrail(self, *args)
    def hasRibbonTrail(self, *args): return _Myoushu.Scene_hasRibbonTrail(self, *args)
    def destroyRibbonTrail(self, *args): return _Myoushu.Scene_destroyRibbonTrail(self, *args)
    def destroyAllRibbonTrails(self): return _Myoushu.Scene_destroyAllRibbonTrails(self)
    def createParticleSystem(self, *args): return _Myoushu.Scene_createParticleSystem(self, *args)
    def getParticleSystem(self, *args): return _Myoushu.Scene_getParticleSystem(self, *args)
    def hasParticleSystem(self, *args): return _Myoushu.Scene_hasParticleSystem(self, *args)
    def destroyParticleSystem(self, *args): return _Myoushu.Scene_destroyParticleSystem(self, *args)
    def destroyAllParticleSystems(self): return _Myoushu.Scene_destroyAllParticleSystems(self)
    def clearScene(self): return _Myoushu.Scene_clearScene(self)
    def setAmbientLight(self, *args): return _Myoushu.Scene_setAmbientLight(self, *args)
    def getAmbientLight(self): return _Myoushu.Scene_getAmbientLight(self)
    def setWorldGeometry(self, *args): return _Myoushu.Scene_setWorldGeometry(self, *args)
    def estimateWorldGeometry(self, *args): return _Myoushu.Scene_estimateWorldGeometry(self, *args)
    def getSuggestedViewpoint(self, random = False): return _Myoushu.Scene_getSuggestedViewpoint(self, random)
    def setOption(self, *args): return _Myoushu.Scene_setOption(self, *args)
    def getOption(self, *args): return _Myoushu.Scene_getOption(self, *args)
    def hasOption(self, *args): return _Myoushu.Scene_hasOption(self, *args)
    def getOptionValues(self, *args): return _Myoushu.Scene_getOptionValues(self, *args)
    def getOptionKeys(self, *args): return _Myoushu.Scene_getOptionKeys(self, *args)
    def _updateSceneGraph(self, *args): return _Myoushu.Scene__updateSceneGraph(self, *args)
    def _findVisibleObjects(self, *args): return _Myoushu.Scene__findVisibleObjects(self, *args)
    def _applySceneAnimations(self): return _Myoushu.Scene__applySceneAnimations(self)
    def _renderVisibleObjects(self): return _Myoushu.Scene__renderVisibleObjects(self)
    def _renderScene(self, *args): return _Myoushu.Scene__renderScene(self, *args)
    def _queueSkiesForRendering(self, *args): return _Myoushu.Scene__queueSkiesForRendering(self, *args)
    def _setDestinationRenderSystem(self, *args): return _Myoushu.Scene__setDestinationRenderSystem(self, *args)
    def setSkyPlane(self, *args): return _Myoushu.Scene_setSkyPlane(self, *args)
    def getSkyPlaneNode(self): return _Myoushu.Scene_getSkyPlaneNode(self)
    def getSkyPlaneGenParameters(self): return _Myoushu.Scene_getSkyPlaneGenParameters(self)
    def setSkyBox(self, *args): return _Myoushu.Scene_setSkyBox(self, *args)
    def isSkyBoxEnabled(self): return _Myoushu.Scene_isSkyBoxEnabled(self)
    def getSkyBoxNode(self): return _Myoushu.Scene_getSkyBoxNode(self)
    def getSkyBoxGenParameters(self): return _Myoushu.Scene_getSkyBoxGenParameters(self)
    def setSkyDome(self, *args): return _Myoushu.Scene_setSkyDome(self, *args)
    def isSkyDomeEnabled(self): return _Myoushu.Scene_isSkyDomeEnabled(self)
    def getSkyDomeNode(self): return _Myoushu.Scene_getSkyDomeNode(self)
    def getSkyDomeGenParameters(self): return _Myoushu.Scene_getSkyDomeGenParameters(self)
    def setFog(self, *args): return _Myoushu.Scene_setFog(self, *args)
    def getFogMode(self): return _Myoushu.Scene_getFogMode(self)
    def getFogColour(self): return _Myoushu.Scene_getFogColour(self)
    def getFogStart(self): return _Myoushu.Scene_getFogStart(self)
    def getFogEnd(self): return _Myoushu.Scene_getFogEnd(self)
    def getFogDensity(self): return _Myoushu.Scene_getFogDensity(self)
    def createBillboardSet(self, *args): return _Myoushu.Scene_createBillboardSet(self, *args)
    def getBillboardSet(self, *args): return _Myoushu.Scene_getBillboardSet(self, *args)
    def hasBillboardSet(self, *args): return _Myoushu.Scene_hasBillboardSet(self, *args)
    def destroyBillboardSet(self, *args): return _Myoushu.Scene_destroyBillboardSet(self, *args)
    def destroyAllBillboardSets(self): return _Myoushu.Scene_destroyAllBillboardSets(self)
    def setDisplaySceneNodes(self, *args): return _Myoushu.Scene_setDisplaySceneNodes(self, *args)
    def getDisplaySceneNodes(self): return _Myoushu.Scene_getDisplaySceneNodes(self)
    def createAnimation(self, *args): return _Myoushu.Scene_createAnimation(self, *args)
    def getAnimation(self, *args): return _Myoushu.Scene_getAnimation(self, *args)
    def hasAnimation(self, *args): return _Myoushu.Scene_hasAnimation(self, *args)
    def destroyAnimation(self, *args): return _Myoushu.Scene_destroyAnimation(self, *args)
    def destroyAllAnimations(self): return _Myoushu.Scene_destroyAllAnimations(self)
    def createAnimationState(self, *args): return _Myoushu.Scene_createAnimationState(self, *args)
    def getAnimationState(self, *args): return _Myoushu.Scene_getAnimationState(self, *args)
    def hasAnimationState(self, *args): return _Myoushu.Scene_hasAnimationState(self, *args)
    def destroyAnimationState(self, *args): return _Myoushu.Scene_destroyAnimationState(self, *args)
    def destroyAllAnimationStates(self): return _Myoushu.Scene_destroyAllAnimationStates(self)
    def manualRender(self, *args): return _Myoushu.Scene_manualRender(self, *args)
    def getRenderQueue(self): return _Myoushu.Scene_getRenderQueue(self)
    def addRenderQueueListener(self, *args): return _Myoushu.Scene_addRenderQueueListener(self, *args)
    def removeRenderQueueListener(self, *args): return _Myoushu.Scene_removeRenderQueueListener(self, *args)
    def addSpecialCaseRenderQueue(self, *args): return _Myoushu.Scene_addSpecialCaseRenderQueue(self, *args)
    def removeSpecialCaseRenderQueue(self, *args): return _Myoushu.Scene_removeSpecialCaseRenderQueue(self, *args)
    def clearSpecialCaseRenderQueues(self): return _Myoushu.Scene_clearSpecialCaseRenderQueues(self)
    def setSpecialCaseRenderQueueMode(self, *args): return _Myoushu.Scene_setSpecialCaseRenderQueueMode(self, *args)
    def getSpecialCaseRenderQueueMode(self): return _Myoushu.Scene_getSpecialCaseRenderQueueMode(self)
    def isRenderQueueToBeProcessed(self, *args): return _Myoushu.Scene_isRenderQueueToBeProcessed(self, *args)
    def setWorldGeometryRenderQueue(self, *args): return _Myoushu.Scene_setWorldGeometryRenderQueue(self, *args)
    def getWorldGeometryRenderQueue(self): return _Myoushu.Scene_getWorldGeometryRenderQueue(self)
    def showBoundingBoxes(self, *args): return _Myoushu.Scene_showBoundingBoxes(self, *args)
    def getShowBoundingBoxes(self): return _Myoushu.Scene_getShowBoundingBoxes(self)
    def _notifyAutotrackingSceneNode(self, *args): return _Myoushu.Scene__notifyAutotrackingSceneNode(self, *args)
    def createAABBQuery(self, *args): return _Myoushu.Scene_createAABBQuery(self, *args)
    def createSphereQuery(self, *args): return _Myoushu.Scene_createSphereQuery(self, *args)
    def createPlaneBoundedVolumeQuery(self, *args): return _Myoushu.Scene_createPlaneBoundedVolumeQuery(self, *args)
    def createRayQuery(self, *args): return _Myoushu.Scene_createRayQuery(self, *args)
    def createIntersectionQuery(self, mask = 0xFFFFFFFF): return _Myoushu.Scene_createIntersectionQuery(self, mask)
    def destroyQuery(self, *args): return _Myoushu.Scene_destroyQuery(self, *args)
    def setShadowTechnique(self, *args): return _Myoushu.Scene_setShadowTechnique(self, *args)
    def getShadowTechnique(self): return _Myoushu.Scene_getShadowTechnique(self)
    def setShowDebugShadows(self, *args): return _Myoushu.Scene_setShowDebugShadows(self, *args)
    def getShowDebugShadows(self): return _Myoushu.Scene_getShowDebugShadows(self)
    def setShadowColour(self, *args): return _Myoushu.Scene_setShadowColour(self, *args)
    def getShadowColour(self): return _Myoushu.Scene_getShadowColour(self)
    def setShadowDirectionalLightExtrusionDistance(self, *args): return _Myoushu.Scene_setShadowDirectionalLightExtrusionDistance(self, *args)
    def getShadowDirectionalLightExtrusionDistance(self): return _Myoushu.Scene_getShadowDirectionalLightExtrusionDistance(self)
    def setShadowFarDistance(self, *args): return _Myoushu.Scene_setShadowFarDistance(self, *args)
    def getShadowFarDistance(self): return _Myoushu.Scene_getShadowFarDistance(self)
    def setShadowIndexBufferSize(self, *args): return _Myoushu.Scene_setShadowIndexBufferSize(self, *args)
    def getShadowIndexBufferSize(self): return _Myoushu.Scene_getShadowIndexBufferSize(self)
    def setShadowTextureSize(self, *args): return _Myoushu.Scene_setShadowTextureSize(self, *args)
    def setShadowTextureConfig(self, *args): return _Myoushu.Scene_setShadowTextureConfig(self, *args)
    def setShadowTexturePixelFormat(self, *args): return _Myoushu.Scene_setShadowTexturePixelFormat(self, *args)
    def setShadowTextureCount(self, *args): return _Myoushu.Scene_setShadowTextureCount(self, *args)
    def getShadowTextureCount(self): return _Myoushu.Scene_getShadowTextureCount(self)
    def setShadowTextureSettings(self, *args): return _Myoushu.Scene_setShadowTextureSettings(self, *args)
    def getShadowTexture(self, *args): return _Myoushu.Scene_getShadowTexture(self, *args)
    def setShadowDirLightTextureOffset(self, *args): return _Myoushu.Scene_setShadowDirLightTextureOffset(self, *args)
    def getShadowDirLightTextureOffset(self): return _Myoushu.Scene_getShadowDirLightTextureOffset(self)
    def setShadowTextureFadeStart(self, *args): return _Myoushu.Scene_setShadowTextureFadeStart(self, *args)
    def setShadowTextureFadeEnd(self, *args): return _Myoushu.Scene_setShadowTextureFadeEnd(self, *args)
    def setShadowTextureSelfShadow(self, *args): return _Myoushu.Scene_setShadowTextureSelfShadow(self, *args)
    def getShadowTextureSelfShadow(self): return _Myoushu.Scene_getShadowTextureSelfShadow(self)
    def setShadowTextureCasterMaterial(self, *args): return _Myoushu.Scene_setShadowTextureCasterMaterial(self, *args)
    def setShadowTextureReceiverMaterial(self, *args): return _Myoushu.Scene_setShadowTextureReceiverMaterial(self, *args)
    def setShadowCasterRenderBackFaces(self, *args): return _Myoushu.Scene_setShadowCasterRenderBackFaces(self, *args)
    def getShadowCasterRenderBackFaces(self): return _Myoushu.Scene_getShadowCasterRenderBackFaces(self)
    def setShadowCameraSetup(self, *args): return _Myoushu.Scene_setShadowCameraSetup(self, *args)
    def getShadowCameraSetup(self): return _Myoushu.Scene_getShadowCameraSetup(self)
    def setShadowUseInfiniteFarPlane(self, *args): return _Myoushu.Scene_setShadowUseInfiniteFarPlane(self, *args)
    def isShadowTechniqueStencilBased(self): return _Myoushu.Scene_isShadowTechniqueStencilBased(self)
    def isShadowTechniqueTextureBased(self): return _Myoushu.Scene_isShadowTechniqueTextureBased(self)
    def isShadowTechniqueModulative(self): return _Myoushu.Scene_isShadowTechniqueModulative(self)
    def isShadowTechniqueAdditive(self): return _Myoushu.Scene_isShadowTechniqueAdditive(self)
    def isShadowTechniqueIntegrated(self): return _Myoushu.Scene_isShadowTechniqueIntegrated(self)
    def isShadowTechniqueInUse(self): return _Myoushu.Scene_isShadowTechniqueInUse(self)
    def addListener(self, *args): return _Myoushu.Scene_addListener(self, *args)
    def removeListener(self, *args): return _Myoushu.Scene_removeListener(self, *args)
    def createStaticGeometry(self, *args): return _Myoushu.Scene_createStaticGeometry(self, *args)
    def hasStaticGeometry(self, *args): return _Myoushu.Scene_hasStaticGeometry(self, *args)
    def destroyStaticGeometry(self, *args): return _Myoushu.Scene_destroyStaticGeometry(self, *args)
    def destroyAllStaticGeometry(self): return _Myoushu.Scene_destroyAllStaticGeometry(self)
    def createInstancedGeometry(self, *args): return _Myoushu.Scene_createInstancedGeometry(self, *args)
    def getInstancedGeometry(self, *args): return _Myoushu.Scene_getInstancedGeometry(self, *args)
    def destroyInstancedGeometry(self, *args): return _Myoushu.Scene_destroyInstancedGeometry(self, *args)
    def destroyAllInstancedGeometry(self): return _Myoushu.Scene_destroyAllInstancedGeometry(self)
    def createMovableObject(self, *args): return _Myoushu.Scene_createMovableObject(self, *args)
    def destroyMovableObject(self, *args): return _Myoushu.Scene_destroyMovableObject(self, *args)
    def destroyAllMovableObjectsByType(self, *args): return _Myoushu.Scene_destroyAllMovableObjectsByType(self, *args)
    def destroyAllMovableObjects(self): return _Myoushu.Scene_destroyAllMovableObjects(self)
    def getMovableObject(self, *args): return _Myoushu.Scene_getMovableObject(self, *args)
    def hasMovableObject(self, *args): return _Myoushu.Scene_hasMovableObject(self, *args)
    def injectMovableObject(self, *args): return _Myoushu.Scene_injectMovableObject(self, *args)
    def extractMovableObject(self, *args): return _Myoushu.Scene_extractMovableObject(self, *args)
    def extractAllMovableObjectsByType(self, *args): return _Myoushu.Scene_extractAllMovableObjectsByType(self, *args)
    def setVisibilityMask(self, *args): return _Myoushu.Scene_setVisibilityMask(self, *args)
    def getVisibilityMask(self): return _Myoushu.Scene_getVisibilityMask(self)
    def _getCombinedVisibilityMask(self): return _Myoushu.Scene__getCombinedVisibilityMask(self)
    def setFindVisibleObjects(self, *args): return _Myoushu.Scene_setFindVisibleObjects(self, *args)
    def getFindVisibleObjects(self): return _Myoushu.Scene_getFindVisibleObjects(self)
    def _injectRenderWithPass(self, *args): return _Myoushu.Scene__injectRenderWithPass(self, *args)
    def _suppressRenderStateChanges(self, *args): return _Myoushu.Scene__suppressRenderStateChanges(self, *args)
    def _areRenderStateChangesSuppressed(self): return _Myoushu.Scene__areRenderStateChangesSuppressed(self)
    def _setPass(self, *args): return _Myoushu.Scene__setPass(self, *args)
    def _suppressShadows(self, *args): return _Myoushu.Scene__suppressShadows(self, *args)
    def _areShadowsSuppressed(self): return _Myoushu.Scene__areShadowsSuppressed(self)
    def _renderQueueGroupObjects(self, *args): return _Myoushu.Scene__renderQueueGroupObjects(self, *args)
    def getDestinationRenderSystem(self): return _Myoushu.Scene_getDestinationRenderSystem(self)
    def getCurrentViewport(self): return _Myoushu.Scene_getCurrentViewport(self)
    def getVisibleObjectsBoundsInfo(self, *args): return _Myoushu.Scene_getVisibleObjectsBoundsInfo(self, *args)
    def getShadowCasterBoundsInfo(self, *args): return _Myoushu.Scene_getShadowCasterBoundsInfo(self, *args)
    def getNxScene(self): return _Myoushu.Scene_getNxScene(self)
    def getWorld(self): return _Myoushu.Scene_getWorld(self)
    def setSceneController(self, *args): return _Myoushu.Scene_setSceneController(self, *args)
    def simulate(self, *args): return _Myoushu.Scene_simulate(self, *args)
    def render(self, *args): return _Myoushu.Scene_render(self, *args)
    def setGravity(self, *args): return _Myoushu.Scene_setGravity(self, *args)
    def getGravity(self): return _Myoushu.Scene_getGravity(self)
    def createActor(self, *args): return _Myoushu.Scene_createActor(self, *args)
    def batchCreateActors(self, *args): return _Myoushu.Scene_batchCreateActors(self, *args)
    def destroyActor(self, *args): return _Myoushu.Scene_destroyActor(self, *args)
    def batchDestroyActor(self, *args): return _Myoushu.Scene_batchDestroyActor(self, *args)
    def batchDestroyActors(self, *args): return _Myoushu.Scene_batchDestroyActors(self, *args)
    def getActor(self, *args): return _Myoushu.Scene_getActor(self, *args)
    def getActors(self): return _Myoushu.Scene_getActors(self)
    def getActorsFromIdentifier(self, *args): return _Myoushu.Scene_getActorsFromIdentifier(self, *args)
    def getActorsFromFrame(self, *args): return _Myoushu.Scene_getActorsFromFrame(self, *args)
    def getActorsFromRegion(self, *args): return _Myoushu.Scene_getActorsFromRegion(self, *args)
    def getActorsFromLastRegion(self, *args): return _Myoushu.Scene_getActorsFromLastRegion(self, *args)
    def getActorsFromRaycast(self, *args): return _Myoushu.Scene_getActorsFromRaycast(self, *args)
    def getNbActors(self): return _Myoushu.Scene_getNbActors(self)
    def createBody(self, *args): return _Myoushu.Scene_createBody(self, *args)
    def batchCreateBodies(self, *args): return _Myoushu.Scene_batchCreateBodies(self, *args)
    def destroyBody(self, *args): return _Myoushu.Scene_destroyBody(self, *args)
    def createTrigger(self, *args): return _Myoushu.Scene_createTrigger(self, *args)
    def destroyTrigger(self, *args): return _Myoushu.Scene_destroyTrigger(self, *args)
    def getTrigger(self, *args): return _Myoushu.Scene_getTrigger(self, *args)
    def getTriggers(self): return _Myoushu.Scene_getTriggers(self)
    def getNbTriggers(self): return _Myoushu.Scene_getNbTriggers(self)
    def createSphericalJoint(self, *args): return _Myoushu.Scene_createSphericalJoint(self, *args)
    def createRevoluteJoint(self, *args): return _Myoushu.Scene_createRevoluteJoint(self, *args)
    def createPrismaticJoint(self, *args): return _Myoushu.Scene_createPrismaticJoint(self, *args)
    def createCylindricalJoint(self, *args): return _Myoushu.Scene_createCylindricalJoint(self, *args)
    def createFixedJoint(self, *args): return _Myoushu.Scene_createFixedJoint(self, *args)
    def releaseJoint(self, *args): return _Myoushu.Scene_releaseJoint(self, *args)
    def createCharacter(self, *args): return _Myoushu.Scene_createCharacter(self, *args)
    def destroyCharacter(self, *args): return _Myoushu.Scene_destroyCharacter(self, *args)
    def createMaterial(self, *args): return _Myoushu.Scene_createMaterial(self, *args)
    def destroyMaterial(self, *args): return _Myoushu.Scene_destroyMaterial(self, *args)
    def getMaterial(self, *args): return _Myoushu.Scene_getMaterial(self, *args)
    def getMaterials(self): return _Myoushu.Scene_getMaterials(self)
    def getNbMaterials(self): return _Myoushu.Scene_getNbMaterials(self)
    def getMaterialIndex(self, *args): return _Myoushu.Scene_getMaterialIndex(self, *args)
    def createActorGroup(self, *args): return _Myoushu.Scene_createActorGroup(self, *args)
    def destroyActorGroup(self, *args): return _Myoushu.Scene_destroyActorGroup(self, *args)
    def getNbActorGroups(self): return _Myoushu.Scene_getNbActorGroups(self)
    def getActorGroups(self): return _Myoushu.Scene_getActorGroups(self)
    def getActorGroupsByIndex(self): return _Myoushu.Scene_getActorGroupsByIndex(self)
    def getActorGroup(self, *args): return _Myoushu.Scene_getActorGroup(self, *args)
    def createShapeGroup(self, *args): return _Myoushu.Scene_createShapeGroup(self, *args)
    def destroyShapeGroup(self, *args): return _Myoushu.Scene_destroyShapeGroup(self, *args)
    def getNbShapeGroups(self): return _Myoushu.Scene_getNbShapeGroups(self)
    def getShapeGroups(self): return _Myoushu.Scene_getShapeGroups(self)
    def getShapeGroupsByIndex(self): return _Myoushu.Scene_getShapeGroupsByIndex(self)
    def getShapeGroup(self, *args): return _Myoushu.Scene_getShapeGroup(self, *args)
    def addFloor(self, *args): return _Myoushu.Scene_addFloor(self, *args)
    def setStaticGeometry(self, *args): return _Myoushu.Scene_setStaticGeometry(self, *args)
    def getStaticGeometry(self, *args): return _Myoushu.Scene_getStaticGeometry(self, *args)
    def removeStaticGeometry(self): return _Myoushu.Scene_removeStaticGeometry(self)
    def _registerHelper(self, *args): return _Myoushu.Scene__registerHelper(self, *args)
    def _unregisterHelper(self, *args): return _Myoushu.Scene__unregisterHelper(self, *args)
    def idle(self): return _Myoushu.Scene_idle(self)
Scene_swigregister = _Myoushu.Scene_swigregister
Scene_swigregister(Scene)

class Actor(NxOgre_Actor,Serializable):
    __swig_setmethods__ = {}
    for _s in [NxOgre_Actor,Serializable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Actor, name, value)
    __swig_getmethods__ = {}
    for _s in [NxOgre_Actor,Serializable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Actor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_Actor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Actor
    __del__ = lambda self : None;
    def getGroupName(self): return _Myoushu.Actor_getGroupName(self)
    def serialize(self, *args): return _Myoushu.Actor_serialize(self, *args)
    def populateInstance(self, *args): return _Myoushu.Actor_populateInstance(self, *args)
    def getNxScene(self): return _Myoushu.Actor_getNxScene(self)
    def hasVisualisation(self): return _Myoushu.Actor_hasVisualisation(self)
    def simulate(self, *args): return _Myoushu.Actor_simulate(self, *args)
    def render(self, *args): return _Myoushu.Actor_render(self, *args)
    def shapeSimulate(self, *args): return _Myoushu.Actor_shapeSimulate(self, *args)
    def shapeRender(self, *args): return _Myoushu.Actor_shapeRender(self, *args)
    def isDead(self): return _Myoushu.Actor_isDead(self)
    def duplicate(self, *args): return _Myoushu.Actor_duplicate(self, *args)
    def _createActor(self, *args): return _Myoushu.Actor__createActor(self, *args)
    def _destroyActor(self): return _Myoushu.Actor__destroyActor(self)
    def getNxActor(self): return _Myoushu.Actor_getNxActor(self)
    def setName(self, *args): return _Myoushu.Actor_setName(self, *args)
    def getName(self): return _Myoushu.Actor_getName(self)
    def setGlobalPose(self, *args): return _Myoushu.Actor_setGlobalPose(self, *args)
    def getGlobalPose(self): return _Myoushu.Actor_getGlobalPose(self)
    def getGlobalOrientation(self): return _Myoushu.Actor_getGlobalOrientation(self)
    def setGlobalOrientation(self, *args): return _Myoushu.Actor_setGlobalOrientation(self, *args)
    def getGlobalPosition(self): return _Myoushu.Actor_getGlobalPosition(self)
    def setGlobalPosition(self, *args): return _Myoushu.Actor_setGlobalPosition(self, *args)
    def moveGlobalPose(self, *args): return _Myoushu.Actor_moveGlobalPose(self, *args)
    def moveGlobalPosition(self, *args): return _Myoushu.Actor_moveGlobalPosition(self, *args)
    def moveGlobalOrientation(self, *args): return _Myoushu.Actor_moveGlobalOrientation(self, *args)
    def moveTowards(self, *args): return _Myoushu.Actor_moveTowards(self, *args)
    def addShape(self, *args): return _Myoushu.Actor_addShape(self, *args)
    def removeShape(self, *args): return _Myoushu.Actor_removeShape(self, *args)
    def getNbShapes(self): return _Myoushu.Actor_getNbShapes(self)
    def getCollisionModel(self): return _Myoushu.Actor_getCollisionModel(self)
    def getDynamicCollisionModel(self): return _Myoushu.Actor_getDynamicCollisionModel(self)
    def setGroup(self, *args): return _Myoushu.Actor_setGroup(self, *args)
    def getGroup(self): return _Myoushu.Actor_getGroup(self)
    def raiseActorFlag(self, *args): return _Myoushu.Actor_raiseActorFlag(self, *args)
    def clearActorFlag(self, *args): return _Myoushu.Actor_clearActorFlag(self, *args)
    def hasActorFlag(self, *args): return _Myoushu.Actor_hasActorFlag(self, *args)
    def isDynamic(self): return _Myoushu.Actor_isDynamic(self)
    def setCMassOffsetLocalPose(self, *args): return _Myoushu.Actor_setCMassOffsetLocalPose(self, *args)
    def setCMassOffsetLocalPosition(self, *args): return _Myoushu.Actor_setCMassOffsetLocalPosition(self, *args)
    def setCMassOffsetLocalOrientation(self, *args): return _Myoushu.Actor_setCMassOffsetLocalOrientation(self, *args)
    def setCMassOffsetGlobalPose(self, *args): return _Myoushu.Actor_setCMassOffsetGlobalPose(self, *args)
    def setCMassOffsetGlobalPosition(self, *args): return _Myoushu.Actor_setCMassOffsetGlobalPosition(self, *args)
    def setCMassOffsetGlobalOrientation(self, *args): return _Myoushu.Actor_setCMassOffsetGlobalOrientation(self, *args)
    def setCMassGlobalPose(self, *args): return _Myoushu.Actor_setCMassGlobalPose(self, *args)
    def setCMassGlobalPosition(self, *args): return _Myoushu.Actor_setCMassGlobalPosition(self, *args)
    def setCMassGlobalOrientation(self, *args): return _Myoushu.Actor_setCMassGlobalOrientation(self, *args)
    def getCMassLocalPose(self): return _Myoushu.Actor_getCMassLocalPose(self)
    def getCMassLocalPosition(self): return _Myoushu.Actor_getCMassLocalPosition(self)
    def getCMassLocalOrientation(self): return _Myoushu.Actor_getCMassLocalOrientation(self)
    def getCMassGlobalPose(self): return _Myoushu.Actor_getCMassGlobalPose(self)
    def getCMassGlobalPosition(self): return _Myoushu.Actor_getCMassGlobalPosition(self)
    def getCMassGlobalOrientation(self): return _Myoushu.Actor_getCMassGlobalOrientation(self)
    def setMass(self, *args): return _Myoushu.Actor_setMass(self, *args)
    def getMass(self): return _Myoushu.Actor_getMass(self)
    def setMassSpaceInertiaTensor(self, *args): return _Myoushu.Actor_setMassSpaceInertiaTensor(self, *args)
    def getMassSpaceInertiaTensor(self): return _Myoushu.Actor_getMassSpaceInertiaTensor(self)
    def getGlobalInertiaTensor(self): return _Myoushu.Actor_getGlobalInertiaTensor(self)
    def getGlobalInertiaTensorInverse(self): return _Myoushu.Actor_getGlobalInertiaTensorInverse(self)
    def updateMassFromShapeFromDensity(self, *args): return _Myoushu.Actor_updateMassFromShapeFromDensity(self, *args)
    def updateMassFromShapeAsMass(self, *args): return _Myoushu.Actor_updateMassFromShapeAsMass(self, *args)
    def setLinearDamping(self, *args): return _Myoushu.Actor_setLinearDamping(self, *args)
    def getLinearDamping(self): return _Myoushu.Actor_getLinearDamping(self)
    def setAngularDamping(self, *args): return _Myoushu.Actor_setAngularDamping(self, *args)
    def getAngularDamping(self): return _Myoushu.Actor_getAngularDamping(self)
    def setLinearVelocity(self, *args): return _Myoushu.Actor_setLinearVelocity(self, *args)
    def setAngularVelocity(self, *args): return _Myoushu.Actor_setAngularVelocity(self, *args)
    def getLinearVelocity(self): return _Myoushu.Actor_getLinearVelocity(self)
    def getAngularVelocity(self): return _Myoushu.Actor_getAngularVelocity(self)
    def setMaxAngularVelocity(self, *args): return _Myoushu.Actor_setMaxAngularVelocity(self, *args)
    def getMaxAngularVelocity(self): return _Myoushu.Actor_getMaxAngularVelocity(self)
    def setCCDMotionThreshold(self, *args): return _Myoushu.Actor_setCCDMotionThreshold(self, *args)
    def getCCDMotionThreshold(self): return _Myoushu.Actor_getCCDMotionThreshold(self)
    def setLinearMomentum(self, *args): return _Myoushu.Actor_setLinearMomentum(self, *args)
    def setAngularMomentum(self, *args): return _Myoushu.Actor_setAngularMomentum(self, *args)
    def getLinearMomentum(self): return _Myoushu.Actor_getLinearMomentum(self)
    def getAngularMomentum(self): return _Myoushu.Actor_getAngularMomentum(self)
    def addForceAtPos(self, *args): return _Myoushu.Actor_addForceAtPos(self, *args)
    def addForceAtLocalPos(self, *args): return _Myoushu.Actor_addForceAtLocalPos(self, *args)
    def addLocalForceAtPos(self, *args): return _Myoushu.Actor_addLocalForceAtPos(self, *args)
    def addLocalForceAtLocalPos(self, *args): return _Myoushu.Actor_addLocalForceAtLocalPos(self, *args)
    def addForce(self, *args): return _Myoushu.Actor_addForce(self, *args)
    def addLocalForce(self, *args): return _Myoushu.Actor_addLocalForce(self, *args)
    def addTorque(self, *args): return _Myoushu.Actor_addTorque(self, *args)
    def addLocalTorque(self, *args): return _Myoushu.Actor_addLocalTorque(self, *args)
    def computeKineticEnergy(self): return _Myoushu.Actor_computeKineticEnergy(self)
    def getPointVelocity(self, *args): return _Myoushu.Actor_getPointVelocity(self, *args)
    def getLocalPointVelocity(self, *args): return _Myoushu.Actor_getLocalPointVelocity(self, *args)
    def isGroupSleeping(self): return _Myoushu.Actor_isGroupSleeping(self)
    def isSleeping(self): return _Myoushu.Actor_isSleeping(self)
    def getSleepLinearVelocity(self): return _Myoushu.Actor_getSleepLinearVelocity(self)
    def setSleepLinearVelocity(self, *args): return _Myoushu.Actor_setSleepLinearVelocity(self, *args)
    def getSleepAngularVelocity(self): return _Myoushu.Actor_getSleepAngularVelocity(self)
    def setSleepAngularVelocity(self, *args): return _Myoushu.Actor_setSleepAngularVelocity(self, *args)
    def getSleepEnergyThreshold(self): return _Myoushu.Actor_getSleepEnergyThreshold(self)
    def setSleepEnergyThreshold(self, *args): return _Myoushu.Actor_setSleepEnergyThreshold(self, *args)
    def wakeUp(self, *args): return _Myoushu.Actor_wakeUp(self, *args)
    def putToSleep(self): return _Myoushu.Actor_putToSleep(self)
    def raiseBodyFlag(self, *args): return _Myoushu.Actor_raiseBodyFlag(self, *args)
    def clearBodyFlag(self, *args): return _Myoushu.Actor_clearBodyFlag(self, *args)
    def hasBodyFlag(self, *args): return _Myoushu.Actor_hasBodyFlag(self, *args)
    def setSolverIterationCount(self, *args): return _Myoushu.Actor_setSolverIterationCount(self, *args)
    def getSolverIterationCount(self): return _Myoushu.Actor_getSolverIterationCount(self)
    def getNxActorUserData(self): return _Myoushu.Actor_getNxActorUserData(self)
    def joinWith(self, *args): return _Myoushu.Actor_joinWith(self, *args)
    def disable(self): return _Myoushu.Actor_disable(self)
    def disableVisualisation(self): return _Myoushu.Actor_disableVisualisation(self)
    def getBirthFrame(self): return _Myoushu.Actor_getBirthFrame(self)
    def saveCustom(self): return _Myoushu.Actor_saveCustom(self)
    def restoreCustom(self, *args): return _Myoushu.Actor_restoreCustom(self, *args)
Actor_swigregister = _Myoushu.Actor_swigregister
Actor_swigregister(Actor)

class AnimationTaskMessage(Message,NamedObject_AnimationTaskMessage):
    __swig_setmethods__ = {}
    for _s in [Message,NamedObject_AnimationTaskMessage]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimationTaskMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [Message,NamedObject_AnimationTaskMessage]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimationTaskMessage, name)
    __repr__ = _swig_repr
    AM_ENABLE = _Myoushu.AnimationTaskMessage_AM_ENABLE
    AM_DISABLE = _Myoushu.AnimationTaskMessage_AM_DISABLE
    AM_DISABLE_ALL = _Myoushu.AnimationTaskMessage_AM_DISABLE_ALL
    def __init__(self, *args): 
        this = _Myoushu.new_AnimationTaskMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    def getClassName(self): return _Myoushu.AnimationTaskMessage_getClassName(self)
    def castPtr(self, *args): return _Myoushu.AnimationTaskMessage_castPtr(self, *args)
    def clear(self): return _Myoushu.AnimationTaskMessage_clear(self)
    def setMessageType(self, *args): return _Myoushu.AnimationTaskMessage_setMessageType(self, *args)
    def getMessageType(self): return _Myoushu.AnimationTaskMessage_getMessageType(self)
    def setAnimation(self, *args): return _Myoushu.AnimationTaskMessage_setAnimation(self, *args)
    def getAnimation(self): return _Myoushu.AnimationTaskMessage_getAnimation(self)
    def setLoop(self, *args): return _Myoushu.AnimationTaskMessage_setLoop(self, *args)
    def isLoop(self): return _Myoushu.AnimationTaskMessage_isLoop(self)
    def setRestart(self, *args): return _Myoushu.AnimationTaskMessage_setRestart(self, *args)
    def isRestart(self): return _Myoushu.AnimationTaskMessage_isRestart(self)
    def setPlayCounter(self, *args): return _Myoushu.AnimationTaskMessage_setPlayCounter(self, *args)
    def isPlayCounter(self): return _Myoushu.AnimationTaskMessage_isPlayCounter(self)
    def clone(self): return _Myoushu.AnimationTaskMessage_clone(self)
    def setStartCallback(self, *args): return _Myoushu.AnimationTaskMessage_setStartCallback(self, *args)
    def setStopCallback(self, *args): return _Myoushu.AnimationTaskMessage_setStopCallback(self, *args)
    def getStartCallback(self): return _Myoushu.AnimationTaskMessage_getStartCallback(self)
    def getStopCallback(self): return _Myoushu.AnimationTaskMessage_getStopCallback(self)
    def __eq__(self, *args): return _Myoushu.AnimationTaskMessage___eq__(self, *args)
    __swig_destroy__ = _Myoushu.delete_AnimationTaskMessage
    __del__ = lambda self : None;
AnimationTaskMessage_swigregister = _Myoushu.AnimationTaskMessage_swigregister
AnimationTaskMessage_swigregister(AnimationTaskMessage)

class AnimationManager(Singleton_AnimationManager):
    __swig_setmethods__ = {}
    for _s in [Singleton_AnimationManager]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimationManager, name, value)
    __swig_getmethods__ = {}
    for _s in [Singleton_AnimationManager]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimationManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_AnimationManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_AnimationManager
    __del__ = lambda self : None;
    def playAnimation(self, *args): return _Myoushu.AnimationManager_playAnimation(self, *args)
    def playAnimationLuaCallback(self, *args): return _Myoushu.AnimationManager_playAnimationLuaCallback(self, *args)
    def stopAnimation(self, *args): return _Myoushu.AnimationManager_stopAnimation(self, *args)
    def stopAllAnimations(self): return _Myoushu.AnimationManager_stopAllAnimations(self)
AnimationManager_swigregister = _Myoushu.AnimationManager_swigregister
AnimationManager_swigregister(AnimationManager)

class AnimationTask(NamedObject_AnimationTask,Task):
    __swig_setmethods__ = {}
    for _s in [NamedObject_AnimationTask,Task]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimationTask, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObject_AnimationTask,Task]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimationTask, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_AnimationTask(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_AnimationTask
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.AnimationTask_getClassName(self)
    def castPtr(self, *args): return _Myoushu.AnimationTask_castPtr(self, *args)
    def init(self): return _Myoushu.AnimationTask_init(self)
    def suspend(self): return _Myoushu.AnimationTask_suspend(self)
    def kill(self): return _Myoushu.AnimationTask_kill(self)
    def execute(self, *args): return _Myoushu.AnimationTask_execute(self, *args)
    def receiveAnimationTaskMessage(self, *args): return _Myoushu.AnimationTask_receiveAnimationTaskMessage(self, *args)
AnimationTask_swigregister = _Myoushu.AnimationTask_swigregister
AnimationTask_swigregister(AnimationTask)

class Application(Singleton_Application,NamedObject_Application):
    __swig_setmethods__ = {}
    for _s in [Singleton_Application,NamedObject_Application]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Application, name, value)
    __swig_getmethods__ = {}
    for _s in [Singleton_Application,NamedObject_Application]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Application, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Application()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Application
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.Application_getClassName(self)
    def castPtr(self, *args): return _Myoushu.Application_castPtr(self, *args)
    def main(self, argc = 0, argv = None): return _Myoushu.Application_main(self, argc, argv)
    def setConfigFilePath(self, *args): return _Myoushu.Application_setConfigFilePath(self, *args)
    def getConfigFilePath(self): return _Myoushu.Application_getConfigFilePath(self)
    def init(self): return _Myoushu.Application_init(self)
    def run(self): return _Myoushu.Application_run(self)
    def loadPlugin(self, *args): return _Myoushu.Application_loadPlugin(self, *args)
    def unloadPlugin(self, *args): return _Myoushu.Application_unloadPlugin(self, *args)
    def installPlugin(self, *args): return _Myoushu.Application_installPlugin(self, *args)
    def uninstallPlugin(self, *args): return _Myoushu.Application_uninstallPlugin(self, *args)
    def getInitialised(self): return _Myoushu.Application_getInitialised(self)
Application_swigregister = _Myoushu.Application_swigregister
Application_swigregister(Application)

class NetworkMessage(Message,NamedObject_NetworkMessage):
    __swig_setmethods__ = {}
    for _s in [Message,NamedObject_NetworkMessage]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [Message,NamedObject_NetworkMessage]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkMessage, name)
    __repr__ = _swig_repr
    NM_CONNECT = _Myoushu.NetworkMessage_NM_CONNECT
    NM_DISCONNECT = _Myoushu.NetworkMessage_NM_DISCONNECT
    NM_ACK_CONNECT = _Myoushu.NetworkMessage_NM_ACK_CONNECT
    NM_ACK = _Myoushu.NetworkMessage_NM_ACK
    NM_PING = _Myoushu.NetworkMessage_NM_PING
    NM_PONG = _Myoushu.NetworkMessage_NM_PONG
    NM_ENCAPSULATED_MESSAGE = _Myoushu.NetworkMessage_NM_ENCAPSULATED_MESSAGE
    NM_CREATE_OBJECT = _Myoushu.NetworkMessage_NM_CREATE_OBJECT
    NM_DESTROY_OBJECT = _Myoushu.NetworkMessage_NM_DESTROY_OBJECT
    NM_UPDATE_OBJECT = _Myoushu.NetworkMessage_NM_UPDATE_OBJECT
    NM_UNKNOWN = _Myoushu.NetworkMessage_NM_UNKNOWN
    def __init__(self, *args): 
        this = _Myoushu.new_NetworkMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_NetworkMessage
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.NetworkMessage_getClassName(self)
    def castPtr(self, *args): return _Myoushu.NetworkMessage_castPtr(self, *args)
    def setType(self, *args): return _Myoushu.NetworkMessage_setType(self, *args)
    def getType(self): return _Myoushu.NetworkMessage_getType(self)
    def setDestination(self, *args): return _Myoushu.NetworkMessage_setDestination(self, *args)
    def getDestination(self): return _Myoushu.NetworkMessage_getDestination(self)
    def setSource(self, *args): return _Myoushu.NetworkMessage_setSource(self, *args)
    def getSource(self): return _Myoushu.NetworkMessage_getSource(self)
    def getSourceAsString(self): return _Myoushu.NetworkMessage_getSourceAsString(self)
    def setEncapsulatedMessage(self, *args): return _Myoushu.NetworkMessage_setEncapsulatedMessage(self, *args)
    def getEncapsulatedMessage(self): return _Myoushu.NetworkMessage_getEncapsulatedMessage(self)
    def setObjectName(self, *args): return _Myoushu.NetworkMessage_setObjectName(self, *args)
    def getObjectName(self): return _Myoushu.NetworkMessage_getObjectName(self)
    def setObjectClassName(self, *args): return _Myoushu.NetworkMessage_setObjectClassName(self, *args)
    def getObjectClassName(self): return _Myoushu.NetworkMessage_getObjectClassName(self)
    def setAttachedObject(self, *args): return _Myoushu.NetworkMessage_setAttachedObject(self, *args)
    def clear(self): return _Myoushu.NetworkMessage_clear(self)
    def clone(self, *args): return _Myoushu.NetworkMessage_clone(self, *args)
    def serialize(self, *args): return _Myoushu.NetworkMessage_serialize(self, *args)
    def populateInstance(self, *args): return _Myoushu.NetworkMessage_populateInstance(self, *args)
NetworkMessage_swigregister = _Myoushu.NetworkMessage_swigregister
NetworkMessage_swigregister(NetworkMessage)

class NetworkListenBehaviour(NamedObject_NetworkListenBehaviour,RefCountedObject):
    __swig_setmethods__ = {}
    for _s in [NamedObject_NetworkListenBehaviour,RefCountedObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkListenBehaviour, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObject_NetworkListenBehaviour,RefCountedObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkListenBehaviour, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getClassName(self): return _Myoushu.NetworkListenBehaviour_getClassName(self)
    def castPtr(self, *args): return _Myoushu.NetworkListenBehaviour_castPtr(self, *args)
    def processReceivedMessage(self, *args): return _Myoushu.NetworkListenBehaviour_processReceivedMessage(self, *args)
    def setNetworkMessageCallback(self, *args): return _Myoushu.NetworkListenBehaviour_setNetworkMessageCallback(self, *args)
    __swig_destroy__ = _Myoushu.delete_NetworkListenBehaviour
    __del__ = lambda self : None;
NetworkListenBehaviour_swigregister = _Myoushu.NetworkListenBehaviour_swigregister
NetworkListenBehaviour_swigregister(NetworkListenBehaviour)

class DefaultNetworkListenBehaviour(NetworkListenBehaviour,NamedObject_DefaultNetworkListenBehaviour):
    __swig_setmethods__ = {}
    for _s in [NetworkListenBehaviour,NamedObject_DefaultNetworkListenBehaviour]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultNetworkListenBehaviour, name, value)
    __swig_getmethods__ = {}
    for _s in [NetworkListenBehaviour,NamedObject_DefaultNetworkListenBehaviour]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultNetworkListenBehaviour, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_DefaultNetworkListenBehaviour()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_DefaultNetworkListenBehaviour
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.DefaultNetworkListenBehaviour_getClassName(self)
    def castPtr(self, *args): return _Myoushu.DefaultNetworkListenBehaviour_castPtr(self, *args)
    def processReceivedMessage(self, *args): return _Myoushu.DefaultNetworkListenBehaviour_processReceivedMessage(self, *args)
DefaultNetworkListenBehaviour_swigregister = _Myoushu.DefaultNetworkListenBehaviour_swigregister
DefaultNetworkListenBehaviour_swigregister(DefaultNetworkListenBehaviour)

class ClientNetworkListenBehaviour(DefaultNetworkListenBehaviour,NamedObject_ClientNetworkListenBehaviour):
    __swig_setmethods__ = {}
    for _s in [DefaultNetworkListenBehaviour,NamedObject_ClientNetworkListenBehaviour]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClientNetworkListenBehaviour, name, value)
    __swig_getmethods__ = {}
    for _s in [DefaultNetworkListenBehaviour,NamedObject_ClientNetworkListenBehaviour]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClientNetworkListenBehaviour, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_ClientNetworkListenBehaviour()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ClientNetworkListenBehaviour
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.ClientNetworkListenBehaviour_getClassName(self)
    def castPtr(self, *args): return _Myoushu.ClientNetworkListenBehaviour_castPtr(self, *args)
    def processReceivedMessage(self, *args): return _Myoushu.ClientNetworkListenBehaviour_processReceivedMessage(self, *args)
ClientNetworkListenBehaviour_swigregister = _Myoushu.ClientNetworkListenBehaviour_swigregister
ClientNetworkListenBehaviour_swigregister(ClientNetworkListenBehaviour)

class ServerNetworkListenBehaviour(DefaultNetworkListenBehaviour,NamedObject_ServerNetworkListenBehaviour):
    __swig_setmethods__ = {}
    for _s in [DefaultNetworkListenBehaviour,NamedObject_ServerNetworkListenBehaviour]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ServerNetworkListenBehaviour, name, value)
    __swig_getmethods__ = {}
    for _s in [DefaultNetworkListenBehaviour,NamedObject_ServerNetworkListenBehaviour]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ServerNetworkListenBehaviour, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_ServerNetworkListenBehaviour()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ServerNetworkListenBehaviour
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.ServerNetworkListenBehaviour_getClassName(self)
    def castPtr(self, *args): return _Myoushu.ServerNetworkListenBehaviour_castPtr(self, *args)
    def processReceivedMessage(self, *args): return _Myoushu.ServerNetworkListenBehaviour_processReceivedMessage(self, *args)
ServerNetworkListenBehaviour_swigregister = _Myoushu.ServerNetworkListenBehaviour_swigregister
ServerNetworkListenBehaviour_swigregister(ServerNetworkListenBehaviour)

class NetworkTransmitBehaviour(RefCountedObject):
    __swig_setmethods__ = {}
    for _s in [RefCountedObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkTransmitBehaviour, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountedObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkTransmitBehaviour, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_NetworkTransmitBehaviour
    __del__ = lambda self : None;
    def init(self): return _Myoushu.NetworkTransmitBehaviour_init(self)
    def update(self): return _Myoushu.NetworkTransmitBehaviour_update(self)
    def getMessagesToTransmit(self): return _Myoushu.NetworkTransmitBehaviour_getMessagesToTransmit(self)
    def clearListOfMessagesToTransmit(self): return _Myoushu.NetworkTransmitBehaviour_clearListOfMessagesToTransmit(self)
NetworkTransmitBehaviour_swigregister = _Myoushu.NetworkTransmitBehaviour_swigregister
NetworkTransmitBehaviour_swigregister(NetworkTransmitBehaviour)

class ConcurrentTask(NamedObject_ConcurrentTask,Task):
    __swig_setmethods__ = {}
    for _s in [NamedObject_ConcurrentTask,Task]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConcurrentTask, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObject_ConcurrentTask,Task]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConcurrentTask, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_ConcurrentTask
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.ConcurrentTask_getClassName(self)
    def castPtr(self, *args): return _Myoushu.ConcurrentTask_castPtr(self, *args)
    def getName(self): return _Myoushu.ConcurrentTask_getName(self)
    def run(self): return _Myoushu.ConcurrentTask_run(self)
ConcurrentTask_swigregister = _Myoushu.ConcurrentTask_swigregister
ConcurrentTask_swigregister(ConcurrentTask)

class InputDevice(RefCountedObject):
    __swig_setmethods__ = {}
    for _s in [RefCountedObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputDevice, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountedObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputDevice, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    IDT_KEYBOARD = _Myoushu.InputDevice_IDT_KEYBOARD
    IDT_MOUSE = _Myoushu.InputDevice_IDT_MOUSE
    IDT_GAMEPAD = _Myoushu.InputDevice_IDT_GAMEPAD
    IDT_UNKNOWN = _Myoushu.InputDevice_IDT_UNKNOWN
    __swig_destroy__ = _Myoushu.delete_InputDevice
    __del__ = lambda self : None;
    def capture(self): return _Myoushu.InputDevice_capture(self)
    def getInputEventString(self, *args): return _Myoushu.InputDevice_getInputEventString(self, *args)
    def getInputCodeFromInputIdentifier(self, *args): return _Myoushu.InputDevice_getInputCodeFromInputIdentifier(self, *args)
    def getInputIdentifierFromInputCode(self, *args): return _Myoushu.InputDevice_getInputIdentifierFromInputCode(self, *args)
    def getDeviceType(self): return _Myoushu.InputDevice_getDeviceType(self)
    def getName(self): return _Myoushu.InputDevice_getName(self)
InputDevice_swigregister = _Myoushu.InputDevice_swigregister
InputDevice_swigregister(InputDevice)

DEVICE_STATE_LENGTH = _Myoushu.DEVICE_STATE_LENGTH
MAX_NUMBER_OF_INPUT_IDENTIFIERS = _Myoushu.MAX_NUMBER_OF_INPUT_IDENTIFIERS
class InputDeviceMessage(NamedObject_InputDeviceMessage,Message):
    __swig_setmethods__ = {}
    for _s in [NamedObject_InputDeviceMessage,Message]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputDeviceMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObject_InputDeviceMessage,Message]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputDeviceMessage, name)
    __repr__ = _swig_repr
    DA_PRESS = _Myoushu.InputDeviceMessage_DA_PRESS
    DA_RELEASE = _Myoushu.InputDeviceMessage_DA_RELEASE
    DA_MOVE = _Myoushu.InputDeviceMessage_DA_MOVE
    def __init__(self, *args): 
        this = _Myoushu.new_InputDeviceMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_InputDeviceMessage
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.InputDeviceMessage_getClassName(self)
    def castPtr(self, *args): return _Myoushu.InputDeviceMessage_castPtr(self, *args)
    def getInputDevice(self): return _Myoushu.InputDeviceMessage_getInputDevice(self)
    def setInputDevice(self, *args): return _Myoushu.InputDeviceMessage_setInputDevice(self, *args)
    def getDeviceType(self): return _Myoushu.InputDeviceMessage_getDeviceType(self)
    def getDeviceAction(self): return _Myoushu.InputDeviceMessage_getDeviceAction(self)
    def getActionVector(self, *args): return _Myoushu.InputDeviceMessage_getActionVector(self, *args)
    def getDeviceState(self, *args): return _Myoushu.InputDeviceMessage_getDeviceState(self, *args)
    def setDeviceType(self, *args): return _Myoushu.InputDeviceMessage_setDeviceType(self, *args)
    def setDeviceAction(self, *args): return _Myoushu.InputDeviceMessage_setDeviceAction(self, *args)
    def setDeviceState(self, *args): return _Myoushu.InputDeviceMessage_setDeviceState(self, *args)
    def setActionVector(self, *args): return _Myoushu.InputDeviceMessage_setActionVector(self, *args)
    def getInputIdentifier(self, *args): return _Myoushu.InputDeviceMessage_getInputIdentifier(self, *args)
    def setInputIdentifier(self, *args): return _Myoushu.InputDeviceMessage_setInputIdentifier(self, *args)
    def clear(self): return _Myoushu.InputDeviceMessage_clear(self)
    def clone(self, *args): return _Myoushu.InputDeviceMessage_clone(self, *args)
    def serialize(self, *args): return _Myoushu.InputDeviceMessage_serialize(self, *args)
    def populateInstance(self, *args): return _Myoushu.InputDeviceMessage_populateInstance(self, *args)
InputDeviceMessage_swigregister = _Myoushu.InputDeviceMessage_swigregister
InputDeviceMessage_swigregister(InputDeviceMessage)
InputDeviceMessage.DS_BUTTON_INDEX = _Myoushu.cvar.InputDeviceMessage_DS_BUTTON_INDEX
InputDeviceMessage.DS_BUTTONS_STATE_INDEX = _Myoushu.cvar.InputDeviceMessage_DS_BUTTONS_STATE_INDEX
InputDeviceMessage.DS_X_INDEX = _Myoushu.cvar.InputDeviceMessage_DS_X_INDEX
InputDeviceMessage.DS_Y_INDEX = _Myoushu.cvar.InputDeviceMessage_DS_Y_INDEX
InputDeviceMessage.DS_Z_INDEX = _Myoushu.cvar.InputDeviceMessage_DS_Z_INDEX
InputDeviceMessage.DS_X_REL_INDEX = _Myoushu.cvar.InputDeviceMessage_DS_X_REL_INDEX
InputDeviceMessage.DS_Y_REL_INDEX = _Myoushu.cvar.InputDeviceMessage_DS_Y_REL_INDEX
InputDeviceMessage.DS_Z_REL_INDEX = _Myoushu.cvar.InputDeviceMessage_DS_Z_REL_INDEX

class InputMessage(InputDeviceMessage,NamedObject_InputMessage):
    __swig_setmethods__ = {}
    for _s in [InputDeviceMessage,NamedObject_InputMessage]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [InputDeviceMessage,NamedObject_InputMessage]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputMessage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_InputMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_InputMessage
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.InputMessage_getClassName(self)
    def castPtr(self, *args): return _Myoushu.InputMessage_castPtr(self, *args)
    def getInputAction(self): return _Myoushu.InputMessage_getInputAction(self)
    def setInputAction(self, *args): return _Myoushu.InputMessage_setInputAction(self, *args)
    def clear(self): return _Myoushu.InputMessage_clear(self)
    def clone(self, *args): return _Myoushu.InputMessage_clone(self, *args)
    def serialize(self, *args): return _Myoushu.InputMessage_serialize(self, *args)
    def populateInstance(self, *args): return _Myoushu.InputMessage_populateInstance(self, *args)
InputMessage_swigregister = _Myoushu.InputMessage_swigregister
InputMessage_swigregister(InputMessage)
InputMessage.NO_ACTION = _Myoushu.cvar.InputMessage_NO_ACTION

class DefaultNetworkTransmitBehaviour(NetworkTransmitBehaviour):
    __swig_setmethods__ = {}
    for _s in [NetworkTransmitBehaviour]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultNetworkTransmitBehaviour, name, value)
    __swig_getmethods__ = {}
    for _s in [NetworkTransmitBehaviour]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultNetworkTransmitBehaviour, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_DefaultNetworkTransmitBehaviour()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_DefaultNetworkTransmitBehaviour
    __del__ = lambda self : None;
    def init(self): return _Myoushu.DefaultNetworkTransmitBehaviour_init(self)
    def update(self): return _Myoushu.DefaultNetworkTransmitBehaviour_update(self)
    def receiveNetworkMessage(self, *args): return _Myoushu.DefaultNetworkTransmitBehaviour_receiveNetworkMessage(self, *args)
DefaultNetworkTransmitBehaviour_swigregister = _Myoushu.DefaultNetworkTransmitBehaviour_swigregister
DefaultNetworkTransmitBehaviour_swigregister(DefaultNetworkTransmitBehaviour)

class P2PNetworkTransmitBehaviour(NetworkTransmitBehaviour):
    __swig_setmethods__ = {}
    for _s in [NetworkTransmitBehaviour]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, P2PNetworkTransmitBehaviour, name, value)
    __swig_getmethods__ = {}
    for _s in [NetworkTransmitBehaviour]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, P2PNetworkTransmitBehaviour, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_P2PNetworkTransmitBehaviour()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_P2PNetworkTransmitBehaviour
    __del__ = lambda self : None;
    def init(self): return _Myoushu.P2PNetworkTransmitBehaviour_init(self)
    def update(self): return _Myoushu.P2PNetworkTransmitBehaviour_update(self)
    def receiveNetworkMessage(self, *args): return _Myoushu.P2PNetworkTransmitBehaviour_receiveNetworkMessage(self, *args)
    def receiveInputMessage(self, *args): return _Myoushu.P2PNetworkTransmitBehaviour_receiveInputMessage(self, *args)
    def addDisallowedInputAction(self, *args): return _Myoushu.P2PNetworkTransmitBehaviour_addDisallowedInputAction(self, *args)
    def removeDisallowedInputAction(self, *args): return _Myoushu.P2PNetworkTransmitBehaviour_removeDisallowedInputAction(self, *args)
    def isDisallowedInputAction(self, *args): return _Myoushu.P2PNetworkTransmitBehaviour_isDisallowedInputAction(self, *args)
P2PNetworkTransmitBehaviour_swigregister = _Myoushu.P2PNetworkTransmitBehaviour_swigregister
P2PNetworkTransmitBehaviour_swigregister(P2PNetworkTransmitBehaviour)

class Config(MapConfiguration,Singleton_Config):
    __swig_setmethods__ = {}
    for _s in [MapConfiguration,Singleton_Config]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config, name, value)
    __swig_getmethods__ = {}
    for _s in [MapConfiguration,Singleton_Config]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Config, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Config()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Config
    __del__ = lambda self : None;
    def loadConfig(self, *args): return _Myoushu.Config_loadConfig(self, *args)
    def bindInputAction(self, *args): return _Myoushu.Config_bindInputAction(self, *args)
    def unbindInputAction(self, *args): return _Myoushu.Config_unbindInputAction(self, *args)
Config_swigregister = _Myoushu.Config_swigregister
Config_swigregister(Config)
Config.VID_WIDTH = _Myoushu.cvar.Config_VID_WIDTH
Config.VID_HEIGHT = _Myoushu.cvar.Config_VID_HEIGHT
Config.VID_BITS = _Myoushu.cvar.Config_VID_BITS
Config.VID_FULLSCREEN = _Myoushu.cvar.Config_VID_FULLSCREEN
Config.VID_VSYNC = _Myoushu.cvar.Config_VID_VSYNC
Config.VID_ANTIALIASING = _Myoushu.cvar.Config_VID_ANTIALIASING
Config.VID_ANISOTROPIC_FILTERING = _Myoushu.cvar.Config_VID_ANISOTROPIC_FILTERING
Config.INPUT_PREFIX = _Myoushu.cvar.Config_INPUT_PREFIX
Config.INPUT_MOUSE_SENSITIVITY = _Myoushu.cvar.Config_INPUT_MOUSE_SENSITIVITY


def luaPrint(*args):
  return _Myoushu.luaPrint(*args)
luaPrint = _Myoushu.luaPrint
class Console(OutputStream,Singleton_Console):
    __swig_setmethods__ = {}
    for _s in [OutputStream,Singleton_Console]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Console, name, value)
    __swig_getmethods__ = {}
    for _s in [OutputStream,Singleton_Console]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Console, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_Console
    __del__ = lambda self : None;
    def getMessageStreamString(self): return _Myoushu.Console_getMessageStreamString(self)
    def clearMessageStream(self): return _Myoushu.Console_clearMessageStream(self)
    def redirectLuaOutputToConsole(self, *args): return _Myoushu.Console_redirectLuaOutputToConsole(self, *args)
    def setVisible(self, *args): return _Myoushu.Console_setVisible(self, *args)
    def toggleVisible(self): return _Myoushu.Console_toggleVisible(self)
    def update(self): return _Myoushu.Console_update(self)
Console_swigregister = _Myoushu.Console_swigregister
Console_swigregister(Console)

class ContentImporter(NamedInstance,NamedObject_ContentImporter,RefCountedObject):
    __swig_setmethods__ = {}
    for _s in [NamedInstance,NamedObject_ContentImporter,RefCountedObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContentImporter, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedInstance,NamedObject_ContentImporter,RefCountedObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContentImporter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_ContentImporter
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.ContentImporter_getClassName(self)
    def castPtr(self, *args): return _Myoushu.ContentImporter_castPtr(self, *args)
    def initialize(self): return _Myoushu.ContentImporter_initialize(self)
    def shutdown(self): return _Myoushu.ContentImporter_shutdown(self)
    def importContent(self, *args): return _Myoushu.ContentImporter_importContent(self, *args)
ContentImporter_swigregister = _Myoushu.ContentImporter_swigregister
ContentImporter_swigregister(ContentImporter)

class Controller(NamedObject_Controller,NamedInstance,RefCountedObject):
    __swig_setmethods__ = {}
    for _s in [NamedObject_Controller,NamedInstance,RefCountedObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Controller, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObject_Controller,NamedInstance,RefCountedObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Controller, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_Controller
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.Controller_getClassName(self)
    def castPtr(self, *args): return _Myoushu.Controller_castPtr(self, *args)
    def setEnabled(self, *args): return _Myoushu.Controller_setEnabled(self, *args)
    def isEnabled(self): return _Myoushu.Controller_isEnabled(self)
    def update(self, *args): return _Myoushu.Controller_update(self, *args)
    def serialize(self, *args): return _Myoushu.Controller_serialize(self, *args)
    def populateInstance(self, *args): return _Myoushu.Controller_populateInstance(self, *args)
Controller_swigregister = _Myoushu.Controller_swigregister
Controller_swigregister(Controller)

class EngineLog(OutputStream,Singleton_EngineLog):
    __swig_setmethods__ = {}
    for _s in [OutputStream,Singleton_EngineLog]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EngineLog, name, value)
    __swig_getmethods__ = {}
    for _s in [OutputStream,Singleton_EngineLog]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EngineLog, name)
    __repr__ = _swig_repr
    LM_INFO_ENGINE = _Myoushu.EngineLog_LM_INFO_ENGINE
    LM_INFO_APPLICATION = _Myoushu.EngineLog_LM_INFO_APPLICATION
    LM_WARNING = _Myoushu.EngineLog_LM_WARNING
    LM_ERROR = _Myoushu.EngineLog_LM_ERROR
    def __init__(self, secondaryStream = None): 
        this = _Myoushu.new_EngineLog(secondaryStream)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_EngineLog
    __del__ = lambda self : None;
    def setSecondaryStream(self, *args): return _Myoushu.EngineLog_setSecondaryStream(self, *args)
    def getMessageType(self): return _Myoushu.EngineLog_getMessageType(self)
    def setMessageType(self, *args): return _Myoushu.EngineLog_setMessageType(self, *args)
    def getPublicLock(self): return _Myoushu.EngineLog_getPublicLock(self)
    def messageStart(self, *args): return _Myoushu.EngineLog_messageStart(self, *args)
    def messageEnd(self): return _Myoushu.EngineLog_messageEnd(self)
EngineLog_swigregister = _Myoushu.EngineLog_swigregister
EngineLog_swigregister(EngineLog)

class GameObjectAction(NamedInstance,RefCountedObject):
    __swig_setmethods__ = {}
    for _s in [NamedInstance,RefCountedObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameObjectAction, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedInstance,RefCountedObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GameObjectAction, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_GameObjectAction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_GameObjectAction
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.GameObjectAction_getClassName(self)
    def castPtr(self, *args): return _Myoushu.GameObjectAction_castPtr(self, *args)
    def setStartCallback(self, *args): return _Myoushu.GameObjectAction_setStartCallback(self, *args)
    def setStopCallback(self, *args): return _Myoushu.GameObjectAction_setStopCallback(self, *args)
    def startAction(self): return _Myoushu.GameObjectAction_startAction(self)
    def stopAction(self): return _Myoushu.GameObjectAction_stopAction(self)
    def serialize(self, *args): return _Myoushu.GameObjectAction_serialize(self, *args)
    def populateInstance(self, *args): return _Myoushu.GameObjectAction_populateInstance(self, *args)
GameObjectAction_swigregister = _Myoushu.GameObjectAction_swigregister
GameObjectAction_swigregister(GameObjectAction)

class GameObject(NamedObject_GameObject,NamedInstance,RefCountedObject):
    __swig_setmethods__ = {}
    for _s in [NamedObject_GameObject,NamedInstance,RefCountedObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameObject, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObject_GameObject,NamedInstance,RefCountedObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GameObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_GameObject(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_GameObject
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.GameObject_getClassName(self)
    def castPtr(self, *args): return _Myoushu.GameObject_castPtr(self, *args)
    def addAction(self, *args): return _Myoushu.GameObject_addAction(self, *args)
    def getAction(self, *args): return _Myoushu.GameObject_getAction(self, *args)
    def startAction(self, *args): return _Myoushu.GameObject_startAction(self, *args)
    def stopAction(self, *args): return _Myoushu.GameObject_stopAction(self, *args)
    def getProperties(self, *args): return _Myoushu.GameObject_getProperties(self, *args)
    def getPropertiesPtr(self, *args): return _Myoushu.GameObject_getPropertiesPtr(self, *args)
    def getScene(self): return _Myoushu.GameObject_getScene(self)
    def getGlobalUpVector(self): return _Myoushu.GameObject_getGlobalUpVector(self)
    def getLocalUpVector(self): return _Myoushu.GameObject_getLocalUpVector(self)
    def setLocalUpVector(self, *args): return _Myoushu.GameObject_setLocalUpVector(self, *args)
    def getGlobalForwardVector(self): return _Myoushu.GameObject_getGlobalForwardVector(self)
    def getLocalForwardVector(self): return _Myoushu.GameObject_getLocalForwardVector(self)
    def setLocalForwardVector(self, *args): return _Myoushu.GameObject_setLocalForwardVector(self, *args)
    def __eq__(self, *args): return _Myoushu.GameObject___eq__(self, *args)
    def serialize(self, *args): return _Myoushu.GameObject_serialize(self, *args)
    def populateInstance(self, *args): return _Myoushu.GameObject_populateInstance(self, *args)
GameObject_swigregister = _Myoushu.GameObject_swigregister
GameObject_swigregister(GameObject)

class GameActorObject(GameObject,Actor,NamedObject_GameActorObject):
    __swig_setmethods__ = {}
    for _s in [GameObject,Actor,NamedObject_GameActorObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameActorObject, name, value)
    __swig_getmethods__ = {}
    for _s in [GameObject,Actor,NamedObject_GameActorObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GameActorObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_GameActorObject(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_GameActorObject
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.GameActorObject_getClassName(self)
    def castPtr(self, *args): return _Myoushu.GameActorObject_castPtr(self, *args)
    def getName(self): return _Myoushu.GameActorObject_getName(self)
    def getGlobalUpVector(self): return _Myoushu.GameActorObject_getGlobalUpVector(self)
    def disableCollisionDetection(self): return _Myoushu.GameActorObject_disableCollisionDetection(self)
    def enableCollisionDetection(self): return _Myoushu.GameActorObject_enableCollisionDetection(self)
    def disableCollisionResponse(self): return _Myoushu.GameActorObject_disableCollisionResponse(self)
    def enableCollisionResponse(self): return _Myoushu.GameActorObject_enableCollisionResponse(self)
    def serialize(self, *args): return _Myoushu.GameActorObject_serialize(self, *args)
    def populateInstance(self, *args): return _Myoushu.GameActorObject_populateInstance(self, *args)
GameActorObject_swigregister = _Myoushu.GameActorObject_swigregister
GameActorObject_swigregister(GameActorObject)

class GameBodyObject(GameActorObject,NamedObject_GameBodyObject):
    __swig_setmethods__ = {}
    for _s in [GameActorObject,NamedObject_GameBodyObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameBodyObject, name, value)
    __swig_getmethods__ = {}
    for _s in [GameActorObject,NamedObject_GameBodyObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GameBodyObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_GameBodyObject(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_GameBodyObject
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.GameBodyObject_getClassName(self)
    def castPtr(self, *args): return _Myoushu.GameBodyObject_castPtr(self, *args)
    def createBody(self, *args): return _Myoushu.GameBodyObject_createBody(self, *args)
    def hasVisualisation(self): return _Myoushu.GameBodyObject_hasVisualisation(self)
    def getNode(self): return _Myoushu.GameBodyObject_getNode(self)
    def getEntity(self): return _Myoushu.GameBodyObject_getEntity(self)
    def setNode(self, *args): return _Myoushu.GameBodyObject_setNode(self, *args)
    def setEntity(self, *args): return _Myoushu.GameBodyObject_setEntity(self, *args)
    def simulate(self, *args): return _Myoushu.GameBodyObject_simulate(self, *args)
    def render(self, *args): return _Myoushu.GameBodyObject_render(self, *args)
    def saveCustom(self): return _Myoushu.GameBodyObject_saveCustom(self)
    def restoreCustom(self, *args): return _Myoushu.GameBodyObject_restoreCustom(self, *args)
    def disableVisualisation(self): return _Myoushu.GameBodyObject_disableVisualisation(self)
    def serialize(self, *args): return _Myoushu.GameBodyObject_serialize(self, *args)
    def populateInstance(self, *args): return _Myoushu.GameBodyObject_populateInstance(self, *args)
GameBodyObject_swigregister = _Myoushu.GameBodyObject_swigregister
GameBodyObject_swigregister(GameBodyObject)

class GameCharacterObjectAction(GameObjectAction):
    __swig_setmethods__ = {}
    for _s in [GameObjectAction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameCharacterObjectAction, name, value)
    __swig_getmethods__ = {}
    for _s in [GameObjectAction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GameCharacterObjectAction, name)
    __repr__ = _swig_repr
    AM_LOOP = _Myoushu.GameCharacterObjectAction_AM_LOOP
    AM_ONCE = _Myoushu.GameCharacterObjectAction_AM_ONCE
    AM_ONE_FRAME = _Myoushu.GameCharacterObjectAction_AM_ONE_FRAME
    AM_NO_ANIMATION = _Myoushu.GameCharacterObjectAction_AM_NO_ANIMATION
    def __init__(self, *args): 
        this = _Myoushu.new_GameCharacterObjectAction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_GameCharacterObjectAction
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.GameCharacterObjectAction_getClassName(self)
    def castPtr(self, *args): return _Myoushu.GameCharacterObjectAction_castPtr(self, *args)
    def getGameCharacterObject(self): return _Myoushu.GameCharacterObjectAction_getGameCharacterObject(self)
    def startAction(self): return _Myoushu.GameCharacterObjectAction_startAction(self)
    def stopAction(self): return _Myoushu.GameCharacterObjectAction_stopAction(self)
    def serialize(self, *args): return _Myoushu.GameCharacterObjectAction_serialize(self, *args)
    def populateInstance(self, *args): return _Myoushu.GameCharacterObjectAction_populateInstance(self, *args)
GameCharacterObjectAction_swigregister = _Myoushu.GameCharacterObjectAction_swigregister
GameCharacterObjectAction_swigregister(GameCharacterObjectAction)

class GameCharacterObject(GameObject,NamedObject_GameCharacterObject):
    __swig_setmethods__ = {}
    for _s in [GameObject,NamedObject_GameCharacterObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameCharacterObject, name, value)
    __swig_getmethods__ = {}
    for _s in [GameObject,NamedObject_GameCharacterObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GameCharacterObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_GameCharacterObject(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_GameCharacterObject
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.GameCharacterObject_getClassName(self)
    def castPtr(self, *args): return _Myoushu.GameCharacterObject_castPtr(self, *args)
    def serialize(self, *args): return _Myoushu.GameCharacterObject_serialize(self, *args)
    def populateInstance(self, *args): return _Myoushu.GameCharacterObject_populateInstance(self, *args)
    def addAction(self, *args): return _Myoushu.GameCharacterObject_addAction(self, *args)
    def createNode(self): return _Myoushu.GameCharacterObject_createNode(self)
    def attachMesh(self, *args): return _Myoushu.GameCharacterObject_attachMesh(self, *args)
    def attachSkeletonMesh(self, *args): return _Myoushu.GameCharacterObject_attachSkeletonMesh(self, *args)
    def bindFeet(self, *args): return _Myoushu.GameCharacterObject_bindFeet(self, *args)
    def unBindFeet(self): return _Myoushu.GameCharacterObject_unBindFeet(self)
    def getGlobalUpVector(self): return _Myoushu.GameCharacterObject_getGlobalUpVector(self)
    def getGlobalForwardVector(self): return _Myoushu.GameCharacterObject_getGlobalForwardVector(self)
    def getGlobalPosition(self): return _Myoushu.GameCharacterObject_getGlobalPosition(self)
    def getGlobalOrientation(self): return _Myoushu.GameCharacterObject_getGlobalOrientation(self)
    def simulate(self, *args): return _Myoushu.GameCharacterObject_simulate(self, *args)
    def render(self, *args): return _Myoushu.GameCharacterObject_render(self, *args)
    def playAnimation(self, *args): return _Myoushu.GameCharacterObject_playAnimation(self, *args)
    def stopAnimation(self, *args): return _Myoushu.GameCharacterObject_stopAnimation(self, *args)
    def setDirection(self, *args): return _Myoushu.GameCharacterObject_setDirection(self, *args)
    def setMovementDirection(self, *args): return _Myoushu.GameCharacterObject_setMovementDirection(self, *args)
    def setMovementVectorController(self, *args): return _Myoushu.GameCharacterObject_setMovementVectorController(self, *args)
    def setPosition(self, *args): return _Myoushu.GameCharacterObject_setPosition(self, *args)
    def getName(self): return _Myoushu.GameCharacterObject_getName(self)
    def getNode(self, *args): return _Myoushu.GameCharacterObject_getNode(self, *args)
    def getEntity(self): return _Myoushu.GameCharacterObject_getEntity(self)
    def getScene(self): return _Myoushu.GameCharacterObject_getScene(self)
    def getNxController(self): return _Myoushu.GameCharacterObject_getNxController(self)
    def getMass(self): return _Myoushu.GameCharacterObject_getMass(self)
GameCharacterObject_swigregister = _Myoushu.GameCharacterObject_swigregister
GameCharacterObject_swigregister(GameCharacterObject)

class MoveableObjectController(Controller):
    __swig_setmethods__ = {}
    for _s in [Controller]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MoveableObjectController, name, value)
    __swig_getmethods__ = {}
    for _s in [Controller]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MoveableObjectController, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_MoveableObjectController(*args)
        try: self.this.append(this)
        except: self.this = this
    def getMovementSpeed(self): return _Myoushu.MoveableObjectController_getMovementSpeed(self)
    def setMaxMovementSpeed(self, *args): return _Myoushu.MoveableObjectController_setMaxMovementSpeed(self, *args)
    def getMaxMovementSpeed(self): return _Myoushu.MoveableObjectController_getMaxMovementSpeed(self)
    def getMovementAcceleration(self): return _Myoushu.MoveableObjectController_getMovementAcceleration(self)
    def setMovementAcceleration(self, *args): return _Myoushu.MoveableObjectController_setMovementAcceleration(self, *args)
    def getRotationSpeed(self): return _Myoushu.MoveableObjectController_getRotationSpeed(self)
    def setMaxRotationSpeed(self, *args): return _Myoushu.MoveableObjectController_setMaxRotationSpeed(self, *args)
    def getMaxRotationSpeed(self): return _Myoushu.MoveableObjectController_getMaxRotationSpeed(self)
    def setRotationAcceleration(self, *args): return _Myoushu.MoveableObjectController_setRotationAcceleration(self, *args)
    def getRotationAcceleration(self): return _Myoushu.MoveableObjectController_getRotationAcceleration(self)
    def linkSpeedsWith(self, *args): return _Myoushu.MoveableObjectController_linkSpeedsWith(self, *args)
    def stop(self): return _Myoushu.MoveableObjectController_stop(self)
    def update(self, *args): return _Myoushu.MoveableObjectController_update(self, *args)
    def serialize(self, *args): return _Myoushu.MoveableObjectController_serialize(self, *args)
    def populateInstance(self, *args): return _Myoushu.MoveableObjectController_populateInstance(self, *args)
    __swig_destroy__ = _Myoushu.delete_MoveableObjectController
    __del__ = lambda self : None;
MoveableObjectController_swigregister = _Myoushu.MoveableObjectController_swigregister
MoveableObjectController_swigregister(MoveableObjectController)

class CameraWithGameObjectController(MoveableObjectController):
    __swig_setmethods__ = {}
    for _s in [MoveableObjectController]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CameraWithGameObjectController, name, value)
    __swig_getmethods__ = {}
    for _s in [MoveableObjectController]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CameraWithGameObjectController, name)
    __repr__ = _swig_repr
    CA_UNKNOWN = _Myoushu.CameraWithGameObjectController_CA_UNKNOWN
    CA_PITCH = _Myoushu.CameraWithGameObjectController_CA_PITCH
    CA_YAW = _Myoushu.CameraWithGameObjectController_CA_YAW
    CA_ROLL = _Myoushu.CameraWithGameObjectController_CA_ROLL
    def __init__(self, *args): 
        this = _Myoushu.new_CameraWithGameObjectController(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_CameraWithGameObjectController
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.CameraWithGameObjectController_getClassName(self)
    def castPtr(self, *args): return _Myoushu.CameraWithGameObjectController_castPtr(self, *args)
    def getCamera(self, *args): return _Myoushu.CameraWithGameObjectController_getCamera(self, *args)
    def setCamera(self, *args): return _Myoushu.CameraWithGameObjectController_setCamera(self, *args)
    def getGameObject(self, *args): return _Myoushu.CameraWithGameObjectController_getGameObject(self, *args)
    def setGameObject(self, *args): return _Myoushu.CameraWithGameObjectController_setGameObject(self, *args)
    def getOffsetFromGameObjectCenter(self): return _Myoushu.CameraWithGameObjectController_getOffsetFromGameObjectCenter(self)
    def setOffsetFromGameObjectCenter(self, *args): return _Myoushu.CameraWithGameObjectController_setOffsetFromGameObjectCenter(self, *args)
    def getDistanceFromObject(self): return _Myoushu.CameraWithGameObjectController_getDistanceFromObject(self)
    def setDistanceFromObject(self, *args): return _Myoushu.CameraWithGameObjectController_setDistanceFromObject(self, *args)
    def getMinAngleBetweenCamDirectionGameObjectUp(self): return _Myoushu.CameraWithGameObjectController_getMinAngleBetweenCamDirectionGameObjectUp(self)
    def setMinAngleBetweenCamDirectionGameObjectUp(self, *args): return _Myoushu.CameraWithGameObjectController_setMinAngleBetweenCamDirectionGameObjectUp(self, *args)
    def getMaxAngleBetweenCamDirectionGameObjectUp(self): return _Myoushu.CameraWithGameObjectController_getMaxAngleBetweenCamDirectionGameObjectUp(self)
    def setMaxAngleBetweenCamDirectionGameObjectUp(self, *args): return _Myoushu.CameraWithGameObjectController_setMaxAngleBetweenCamDirectionGameObjectUp(self, *args)
    def update(self, *args): return _Myoushu.CameraWithGameObjectController_update(self, *args)
    def bind(self, *args): return _Myoushu.CameraWithGameObjectController_bind(self, *args)
    def unBind(self, *args): return _Myoushu.CameraWithGameObjectController_unBind(self, *args)
    def processInputAction(self, *args): return _Myoushu.CameraWithGameObjectController_processInputAction(self, *args)
CameraWithGameObjectController_swigregister = _Myoushu.CameraWithGameObjectController_swigregister
CameraWithGameObjectController_swigregister(CameraWithGameObjectController)

class GameCharacterObjectController(MoveableObjectController,CharacterMovementVectorController):
    __swig_setmethods__ = {}
    for _s in [MoveableObjectController,CharacterMovementVectorController]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameCharacterObjectController, name, value)
    __swig_getmethods__ = {}
    for _s in [MoveableObjectController,CharacterMovementVectorController]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GameCharacterObjectController, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_GameCharacterObjectController(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_GameCharacterObjectController
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.GameCharacterObjectController_getClassName(self)
    def castPtr(self, *args): return _Myoushu.GameCharacterObjectController_castPtr(self, *args)
    def stop(self): return _Myoushu.GameCharacterObjectController_stop(self)
    def bind(self, *args): return _Myoushu.GameCharacterObjectController_bind(self, *args)
    def processInputAction(self, *args): return _Myoushu.GameCharacterObjectController_processInputAction(self, *args)
    def move(self, *args): return _Myoushu.GameCharacterObjectController_move(self, *args)
    def update(self, *args): return _Myoushu.GameCharacterObjectController_update(self, *args)
    def serialize(self, *args): return _Myoushu.GameCharacterObjectController_serialize(self, *args)
    def populateInstance(self, *args): return _Myoushu.GameCharacterObjectController_populateInstance(self, *args)
GameCharacterObjectController_swigregister = _Myoushu.GameCharacterObjectController_swigregister
GameCharacterObjectController_swigregister(GameCharacterObjectController)

class GameCharacterObjectControllerBinding(RefCountedObject,Serializable):
    __swig_setmethods__ = {}
    for _s in [RefCountedObject,Serializable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameCharacterObjectControllerBinding, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountedObject,Serializable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GameCharacterObjectControllerBinding, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_GameCharacterObjectControllerBinding(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_GameCharacterObjectControllerBinding
    __del__ = lambda self : None;
    def setInputAction(self, *args): return _Myoushu.GameCharacterObjectControllerBinding_setInputAction(self, *args)
    def getInputAction(self): return _Myoushu.GameCharacterObjectControllerBinding_getInputAction(self)
    def setDirection(self, *args): return _Myoushu.GameCharacterObjectControllerBinding_setDirection(self, *args)
    def getDirection(self): return _Myoushu.GameCharacterObjectControllerBinding_getDirection(self)
    def setCharacterAction(self, *args): return _Myoushu.GameCharacterObjectControllerBinding_setCharacterAction(self, *args)
    def getCharacterAction(self): return _Myoushu.GameCharacterObjectControllerBinding_getCharacterAction(self)
    def setRotationAxis(self, *args): return _Myoushu.GameCharacterObjectControllerBinding_setRotationAxis(self, *args)
    def getRotationAxis(self): return _Myoushu.GameCharacterObjectControllerBinding_getRotationAxis(self)
    def setDeviceAxis(self, *args): return _Myoushu.GameCharacterObjectControllerBinding_setDeviceAxis(self, *args)
    def getDeviceAxis(self): return _Myoushu.GameCharacterObjectControllerBinding_getDeviceAxis(self)
    def setOnce(self, *args): return _Myoushu.GameCharacterObjectControllerBinding_setOnce(self, *args)
    def isOnce(self): return _Myoushu.GameCharacterObjectControllerBinding_isOnce(self)
    def __eq__(self, *args): return _Myoushu.GameCharacterObjectControllerBinding___eq__(self, *args)
    def serialize(self, *args): return _Myoushu.GameCharacterObjectControllerBinding_serialize(self, *args)
    def populateInstance(self, *args): return _Myoushu.GameCharacterObjectControllerBinding_populateInstance(self, *args)
GameCharacterObjectControllerBinding_swigregister = _Myoushu.GameCharacterObjectControllerBinding_swigregister
GameCharacterObjectControllerBinding_swigregister(GameCharacterObjectControllerBinding)

class GameObjectFactory(NamedObjectFactory_GameObject,Singleton_GameObjectFactory):
    __swig_setmethods__ = {}
    for _s in [NamedObjectFactory_GameObject,Singleton_GameObjectFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameObjectFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectFactory_GameObject,Singleton_GameObjectFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GameObjectFactory, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_GameObjectFactory()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_GameObjectFactory
    __del__ = lambda self : None;
    def make(self, *args): return _Myoushu.GameObjectFactory_make(self, *args)
    def makeActor(self, *args): return _Myoushu.GameObjectFactory_makeActor(self, *args)
    def makeBody(self, *args): return _Myoushu.GameObjectFactory_makeBody(self, *args)
    def makeCharacter(self, *args): return _Myoushu.GameObjectFactory_makeCharacter(self, *args)
    def destroy(self, *args): return _Myoushu.GameObjectFactory_destroy(self, *args)
    def destroyAllFromScene(self, *args): return _Myoushu.GameObjectFactory_destroyAllFromScene(self, *args)
GameObjectFactory_swigregister = _Myoushu.GameObjectFactory_swigregister
GameObjectFactory_swigregister(GameObjectFactory)

class ControllerFactory(NamedObjectFactory_Controller,Singleton_ControllerFactory):
    __swig_setmethods__ = {}
    for _s in [NamedObjectFactory_Controller,Singleton_ControllerFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ControllerFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectFactory_Controller,Singleton_ControllerFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ControllerFactory, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_ControllerFactory()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ControllerFactory
    __del__ = lambda self : None;
    def make(self, *args): return _Myoushu.ControllerFactory_make(self, *args)
    def makeGameCharacterObjectCameraControllerPair(self, *args): return _Myoushu.ControllerFactory_makeGameCharacterObjectCameraControllerPair(self, *args)
    def destroy(self, *args): return _Myoushu.ControllerFactory_destroy(self, *args)
ControllerFactory_swigregister = _Myoushu.ControllerFactory_swigregister
ControllerFactory_swigregister(ControllerFactory)

class ControllerTaskMessage(Message,NamedObject_ControllerTaskMessage):
    __swig_setmethods__ = {}
    for _s in [Message,NamedObject_ControllerTaskMessage]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ControllerTaskMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [Message,NamedObject_ControllerTaskMessage]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ControllerTaskMessage, name)
    __repr__ = _swig_repr
    CTM_ADD = _Myoushu.ControllerTaskMessage_CTM_ADD
    CTM_REMOVE = _Myoushu.ControllerTaskMessage_CTM_REMOVE
    CTM_UNKNOWN = _Myoushu.ControllerTaskMessage_CTM_UNKNOWN
    def __init__(self, *args): 
        this = _Myoushu.new_ControllerTaskMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ControllerTaskMessage
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.ControllerTaskMessage_getClassName(self)
    def castPtr(self, *args): return _Myoushu.ControllerTaskMessage_castPtr(self, *args)
    def setMessageType(self, *args): return _Myoushu.ControllerTaskMessage_setMessageType(self, *args)
    def getMessageType(self): return _Myoushu.ControllerTaskMessage_getMessageType(self)
    def setController(self, *args): return _Myoushu.ControllerTaskMessage_setController(self, *args)
    def getController(self, *args): return _Myoushu.ControllerTaskMessage_getController(self, *args)
    def clear(self): return _Myoushu.ControllerTaskMessage_clear(self)
    def clone(self): return _Myoushu.ControllerTaskMessage_clone(self)
ControllerTaskMessage_swigregister = _Myoushu.ControllerTaskMessage_swigregister
ControllerTaskMessage_swigregister(ControllerTaskMessage)

class ControllerTask(NamedObject_ControllerTask,Task):
    __swig_setmethods__ = {}
    for _s in [NamedObject_ControllerTask,Task]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ControllerTask, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObject_ControllerTask,Task]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ControllerTask, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_ControllerTask(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ControllerTask
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.ControllerTask_getClassName(self)
    def castPtr(self, *args): return _Myoushu.ControllerTask_castPtr(self, *args)
    def init(self): return _Myoushu.ControllerTask_init(self)
    def suspend(self): return _Myoushu.ControllerTask_suspend(self)
    def execute(self, *args): return _Myoushu.ControllerTask_execute(self, *args)
    def kill(self): return _Myoushu.ControllerTask_kill(self)
    def receiveControllerTaskMessage(self, *args): return _Myoushu.ControllerTask_receiveControllerTaskMessage(self, *args)
ControllerTask_swigregister = _Myoushu.ControllerTask_swigregister
ControllerTask_swigregister(ControllerTask)

class ControllerTaskManager(Singleton_ControllerTaskManager):
    __swig_setmethods__ = {}
    for _s in [Singleton_ControllerTaskManager]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ControllerTaskManager, name, value)
    __swig_getmethods__ = {}
    for _s in [Singleton_ControllerTaskManager]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ControllerTaskManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_ControllerTaskManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ControllerTaskManager
    __del__ = lambda self : None;
    def addController(self, *args): return _Myoushu.ControllerTaskManager_addController(self, *args)
    def removeController(self, *args): return _Myoushu.ControllerTaskManager_removeController(self, *args)
ControllerTaskManager_swigregister = _Myoushu.ControllerTaskManager_swigregister
ControllerTaskManager_swigregister(ControllerTaskManager)

class GameTask(Task,NamedObject_GameTask):
    __swig_setmethods__ = {}
    for _s in [Task,NamedObject_GameTask]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameTask, name, value)
    __swig_getmethods__ = {}
    for _s in [Task,NamedObject_GameTask]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GameTask, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_GameTask(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_GameTask
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.GameTask_getClassName(self)
    def castPtr(self, *args): return _Myoushu.GameTask_castPtr(self, *args)
    def init(self): return _Myoushu.GameTask_init(self)
    def suspend(self): return _Myoushu.GameTask_suspend(self)
    def execute(self, *args): return _Myoushu.GameTask_execute(self, *args)
    def kill(self): return _Myoushu.GameTask_kill(self)
GameTask_swigregister = _Myoushu.GameTask_swigregister
GameTask_swigregister(GameTask)

class GUIManager(Singleton_GUIManager):
    __swig_setmethods__ = {}
    for _s in [Singleton_GUIManager]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GUIManager, name, value)
    __swig_getmethods__ = {}
    for _s in [Singleton_GUIManager]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GUIManager, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_GUIManager(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_GUIManager
    __del__ = lambda self : None;
    def loadSkin(self, *args): return _Myoushu.GUIManager_loadSkin(self, *args)
    def loadLayout(self, *args): return _Myoushu.GUIManager_loadLayout(self, *args)
    def hideWidget(self, *args): return _Myoushu.GUIManager_hideWidget(self, *args)
    def showWidget(self, *args): return _Myoushu.GUIManager_showWidget(self, *args)
    def destroyWidgetDelayed(self, *args): return _Myoushu.GUIManager_destroyWidgetDelayed(self, *args)
    def destroyWidget(self, *args): return _Myoushu.GUIManager_destroyWidget(self, *args)
    def getWidget(self, *args): return _Myoushu.GUIManager_getWidget(self, *args)
    def showCursor(self): return _Myoushu.GUIManager_showCursor(self)
    def hideCursor(self): return _Myoushu.GUIManager_hideCursor(self)
    def createWidgetDelayed(self, *args): return _Myoushu.GUIManager_createWidgetDelayed(self, *args)
    def createWidget(self, *args): return _Myoushu.GUIManager_createWidget(self, *args)
    def setMouseFocus(self, *args): return _Myoushu.GUIManager_setMouseFocus(self, *args)
    def setKeyFocus(self, *args): return _Myoushu.GUIManager_setKeyFocus(self, *args)
    def clearMouseFocus(self): return _Myoushu.GUIManager_clearMouseFocus(self)
    def clearKeyFocus(self): return _Myoushu.GUIManager_clearKeyFocus(self)
    def translateCaptions(self): return _Myoushu.GUIManager_translateCaptions(self)
    def translateCaption(self, *args): return _Myoushu.GUIManager_translateCaption(self, *args)
    def registerCallbacks(self, *args): return _Myoushu.GUIManager_registerCallbacks(self, *args)
    def myguiEventMouseButtonClick(self, *args): return _Myoushu.GUIManager_myguiEventMouseButtonClick(self, *args)
    def myguiEventMouseButtonDoubleClick(self, *args): return _Myoushu.GUIManager_myguiEventMouseButtonDoubleClick(self, *args)
    def myguiEventMouseButtonPressed(self, *args): return _Myoushu.GUIManager_myguiEventMouseButtonPressed(self, *args)
    def myguiEventMouseButtonReleased(self, *args): return _Myoushu.GUIManager_myguiEventMouseButtonReleased(self, *args)
    def myguiEventMouseSetFocus(self, *args): return _Myoushu.GUIManager_myguiEventMouseSetFocus(self, *args)
    def myguiEventRootMouseChangeFocus(self, *args): return _Myoushu.GUIManager_myguiEventRootMouseChangeFocus(self, *args)
    def myguiEventMouseLostFocus(self, *args): return _Myoushu.GUIManager_myguiEventMouseLostFocus(self, *args)
    def myguiEventKeyButtonReleased(self, *args): return _Myoushu.GUIManager_myguiEventKeyButtonReleased(self, *args)
    def myguiEventRootKeyChangeFocus(self, *args): return _Myoushu.GUIManager_myguiEventRootKeyChangeFocus(self, *args)
    def myguiEventEditSelectAccept(self, *args): return _Myoushu.GUIManager_myguiEventEditSelectAccept(self, *args)
    def myguiEventEditTextChange(self, *args): return _Myoushu.GUIManager_myguiEventEditTextChange(self, *args)
    def myguiEventListSelectAccept(self, *args): return _Myoushu.GUIManager_myguiEventListSelectAccept(self, *args)
    def myguiEventListChangePosition(self, *args): return _Myoushu.GUIManager_myguiEventListChangePosition(self, *args)
    def myguiEventMultiListSelectAccept(self, *args): return _Myoushu.GUIManager_myguiEventMultiListSelectAccept(self, *args)
    def myguiEventMultiListChangePosition(self, *args): return _Myoushu.GUIManager_myguiEventMultiListChangePosition(self, *args)
    def myguiEventComboAccept(self, *args): return _Myoushu.GUIManager_myguiEventComboAccept(self, *args)
    def myguiEventComboChangePosition(self, *args): return _Myoushu.GUIManager_myguiEventComboChangePosition(self, *args)
GUIManager_swigregister = _Myoushu.GUIManager_swigregister
GUIManager_swigregister(GUIManager)

class GUIMessage(Message,NamedObject_GUIMessage):
    __swig_setmethods__ = {}
    for _s in [Message,NamedObject_GUIMessage]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GUIMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [Message,NamedObject_GUIMessage]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GUIMessage, name)
    __repr__ = _swig_repr
    GM_UNKNOWN = _Myoushu.GUIMessage_GM_UNKNOWN
    GM_TOGGLE_GUI_VISIBLE = _Myoushu.GUIMessage_GM_TOGGLE_GUI_VISIBLE
    GM_TOGGLE_CURSOR = _Myoushu.GUIMessage_GM_TOGGLE_CURSOR
    GM_LOAD_LAYOUT = _Myoushu.GUIMessage_GM_LOAD_LAYOUT
    GM_CHANGE_SKIN = _Myoushu.GUIMessage_GM_CHANGE_SKIN
    GM_TOGGLE_WIDGET_VISIBLE = _Myoushu.GUIMessage_GM_TOGGLE_WIDGET_VISIBLE
    GM_DESTROY = _Myoushu.GUIMessage_GM_DESTROY
    GM_CREATE = _Myoushu.GUIMessage_GM_CREATE
    GM_SET_MOUSE_FOCUS = _Myoushu.GUIMessage_GM_SET_MOUSE_FOCUS
    GM_SET_KEY_FOCUS = _Myoushu.GUIMessage_GM_SET_KEY_FOCUS
    GM_TRANSLATE_WIDGETS = _Myoushu.GUIMessage_GM_TRANSLATE_WIDGETS
    GM_TRANSLATE_WIDGET = _Myoushu.GUIMessage_GM_TRANSLATE_WIDGET
    def __init__(self): 
        this = _Myoushu.new_GUIMessage()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_GUIMessage
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.GUIMessage_getClassName(self)
    def castPtr(self, *args): return _Myoushu.GUIMessage_castPtr(self, *args)
    def getMessageType(self): return _Myoushu.GUIMessage_getMessageType(self)
    def setMessageType(self, *args): return _Myoushu.GUIMessage_setMessageType(self, *args)
    def isVisible(self): return _Myoushu.GUIMessage_isVisible(self)
    def setVisible(self, *args): return _Myoushu.GUIMessage_setVisible(self, *args)
    def getPosition(self): return _Myoushu.GUIMessage_getPosition(self)
    def setPosition(self, *args): return _Myoushu.GUIMessage_setPosition(self, *args)
    def getSize(self): return _Myoushu.GUIMessage_getSize(self)
    def setSize(self, *args): return _Myoushu.GUIMessage_setSize(self, *args)
    def getRelative(self): return _Myoushu.GUIMessage_getRelative(self)
    def setRelative(self, *args): return _Myoushu.GUIMessage_setRelative(self, *args)
    def getWidgetType(self): return _Myoushu.GUIMessage_getWidgetType(self)
    def setWidgetType(self, *args): return _Myoushu.GUIMessage_setWidgetType(self, *args)
    def getWidgetName(self): return _Myoushu.GUIMessage_getWidgetName(self)
    def setWidgetName(self, *args): return _Myoushu.GUIMessage_setWidgetName(self, *args)
    def getMessage(self): return _Myoushu.GUIMessage_getMessage(self)
    def setMessage(self, *args): return _Myoushu.GUIMessage_setMessage(self, *args)
    def getResourceGroup(self): return _Myoushu.GUIMessage_getResourceGroup(self)
    def setResourceGroup(self, *args): return _Myoushu.GUIMessage_setResourceGroup(self, *args)
    def clear(self): return _Myoushu.GUIMessage_clear(self)
    def clone(self): return _Myoushu.GUIMessage_clone(self)
GUIMessage_swigregister = _Myoushu.GUIMessage_swigregister
GUIMessage_swigregister(GUIMessage)

class GUITask(NamedObject_GUITask,Task):
    __swig_setmethods__ = {}
    for _s in [NamedObject_GUITask,Task]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GUITask, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObject_GUITask,Task]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GUITask, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_GUITask(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_GUITask
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.GUITask_getClassName(self)
    def castPtr(self, *args): return _Myoushu.GUITask_castPtr(self, *args)
    def init(self): return _Myoushu.GUITask_init(self)
    def suspend(self): return _Myoushu.GUITask_suspend(self)
    def execute(self, *args): return _Myoushu.GUITask_execute(self, *args)
    def kill(self): return _Myoushu.GUITask_kill(self)
    def receiveTimerTaskMessage(self, *args): return _Myoushu.GUITask_receiveTimerTaskMessage(self, *args)
    def receiveInputMessage(self, *args): return _Myoushu.GUITask_receiveInputMessage(self, *args)
    def receiveGUIMessage(self, *args): return _Myoushu.GUITask_receiveGUIMessage(self, *args)
GUITask_swigregister = _Myoushu.GUITask_swigregister
GUITask_swigregister(GUITask)

class HumanInputDevice(InputDevice):
    __swig_setmethods__ = {}
    for _s in [InputDevice]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HumanInputDevice, name, value)
    __swig_getmethods__ = {}
    for _s in [InputDevice]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HumanInputDevice, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_HumanInputDevice
    __del__ = lambda self : None;
HumanInputDevice_swigregister = _Myoushu.HumanInputDevice_swigregister
HumanInputDevice_swigregister(HumanInputDevice)

class InputActionManager(Singleton_InputActionManager):
    __swig_setmethods__ = {}
    for _s in [Singleton_InputActionManager]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputActionManager, name, value)
    __swig_getmethods__ = {}
    for _s in [Singleton_InputActionManager]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputActionManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_InputActionManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_InputActionManager
    __del__ = lambda self : None;
    def disableCallbacks(self, *args): return _Myoushu.InputActionManager_disableCallbacks(self, *args)
    def enableCallbacks(self): return _Myoushu.InputActionManager_enableCallbacks(self)
    def isCallbacksDisabled(self): return _Myoushu.InputActionManager_isCallbacksDisabled(self)
    def isCallbacksForActionEnabled(self, *args): return _Myoushu.InputActionManager_isCallbacksForActionEnabled(self, *args)
    def actionExists(self, *args): return _Myoushu.InputActionManager_actionExists(self, *args)
    def getInputActionCallbacks(self, *args): return _Myoushu.InputActionManager_getInputActionCallbacks(self, *args)
    def addInputActionCallback(self, *args): return _Myoushu.InputActionManager_addInputActionCallback(self, *args)
    def removeInputAction(self, *args): return _Myoushu.InputActionManager_removeInputAction(self, *args)
InputActionManager_swigregister = _Myoushu.InputActionManager_swigregister
InputActionManager_swigregister(InputActionManager)

class OISInputDevice_OIS_Mouse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OISInputDevice_OIS_Mouse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OISInputDevice_OIS_Mouse, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_OISInputDevice_OIS_Mouse(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_OISInputDevice_OIS_Mouse
    __del__ = lambda self : None;
    def capture(self): return _Myoushu.OISInputDevice_OIS_Mouse_capture(self)
    def getOISDevice(self): return _Myoushu.OISInputDevice_OIS_Mouse_getOISDevice(self)
OISInputDevice_OIS_Mouse_swigregister = _Myoushu.OISInputDevice_OIS_Mouse_swigregister
OISInputDevice_OIS_Mouse_swigregister(OISInputDevice_OIS_Mouse)

class OISInputDevice_OIS_Keyboard(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OISInputDevice_OIS_Keyboard, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OISInputDevice_OIS_Keyboard, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_OISInputDevice_OIS_Keyboard(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_OISInputDevice_OIS_Keyboard
    __del__ = lambda self : None;
    def capture(self): return _Myoushu.OISInputDevice_OIS_Keyboard_capture(self)
    def getOISDevice(self): return _Myoushu.OISInputDevice_OIS_Keyboard_getOISDevice(self)
OISInputDevice_OIS_Keyboard_swigregister = _Myoushu.OISInputDevice_OIS_Keyboard_swigregister
OISInputDevice_OIS_Keyboard_swigregister(OISInputDevice_OIS_Keyboard)

class MouseInputDevice(HumanInputDevice):
    __swig_setmethods__ = {}
    for _s in [HumanInputDevice]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MouseInputDevice, name, value)
    __swig_getmethods__ = {}
    for _s in [HumanInputDevice]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MouseInputDevice, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_MouseInputDevice
    __del__ = lambda self : None;
MouseInputDevice_swigregister = _Myoushu.MouseInputDevice_swigregister
MouseInputDevice_swigregister(MouseInputDevice)
MouseInputDevice.MI_X_AXIS = _Myoushu.cvar.MouseInputDevice_MI_X_AXIS
MouseInputDevice.MI_Y_AXIS = _Myoushu.cvar.MouseInputDevice_MI_Y_AXIS
MouseInputDevice.MI_WHEEL = _Myoushu.cvar.MouseInputDevice_MI_WHEEL
MouseInputDevice.MI_BUTTON = _Myoushu.cvar.MouseInputDevice_MI_BUTTON
MouseInputDevice.MI_BUTTON_0 = _Myoushu.cvar.MouseInputDevice_MI_BUTTON_0
MouseInputDevice.MI_BUTTON_1 = _Myoushu.cvar.MouseInputDevice_MI_BUTTON_1
MouseInputDevice.MI_BUTTON_2 = _Myoushu.cvar.MouseInputDevice_MI_BUTTON_2
MouseInputDevice.MI_BUTTON_3 = _Myoushu.cvar.MouseInputDevice_MI_BUTTON_3
MouseInputDevice.MI_BUTTON_4 = _Myoushu.cvar.MouseInputDevice_MI_BUTTON_4
MouseInputDevice.MI_BUTTON_5 = _Myoushu.cvar.MouseInputDevice_MI_BUTTON_5
MouseInputDevice.MI_BUTTON_6 = _Myoushu.cvar.MouseInputDevice_MI_BUTTON_6
MouseInputDevice.MI_BUTTON_7 = _Myoushu.cvar.MouseInputDevice_MI_BUTTON_7
MouseInputDevice.MI_BUTTON_8 = _Myoushu.cvar.MouseInputDevice_MI_BUTTON_8
MouseInputDevice.MI_BUTTON_9 = _Myoushu.cvar.MouseInputDevice_MI_BUTTON_9

NUMBER_OF_MOUSE_INPUT_IDENTIFIERS = _Myoushu.NUMBER_OF_MOUSE_INPUT_IDENTIFIERS
class MouseOISInputDevice(OISInputDevice_OIS_Mouse,MouseInputDevice):
    __swig_setmethods__ = {}
    for _s in [OISInputDevice_OIS_Mouse,MouseInputDevice]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MouseOISInputDevice, name, value)
    __swig_getmethods__ = {}
    for _s in [OISInputDevice_OIS_Mouse,MouseInputDevice]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MouseOISInputDevice, name)
    __repr__ = _swig_repr
    MC_AXIS_X = _Myoushu.MouseOISInputDevice_MC_AXIS_X
    MC_AXIS_Y = _Myoushu.MouseOISInputDevice_MC_AXIS_Y
    MC_WHEEL = _Myoushu.MouseOISInputDevice_MC_WHEEL
    MC_BUTTON0 = _Myoushu.MouseOISInputDevice_MC_BUTTON0
    MC_BUTTON1 = _Myoushu.MouseOISInputDevice_MC_BUTTON1
    MC_BUTTON2 = _Myoushu.MouseOISInputDevice_MC_BUTTON2
    MC_BUTTON3 = _Myoushu.MouseOISInputDevice_MC_BUTTON3
    MC_BUTTON4 = _Myoushu.MouseOISInputDevice_MC_BUTTON4
    MC_BUTTON5 = _Myoushu.MouseOISInputDevice_MC_BUTTON5
    MC_BUTTON6 = _Myoushu.MouseOISInputDevice_MC_BUTTON6
    MC_BUTTON7 = _Myoushu.MouseOISInputDevice_MC_BUTTON7
    MC_BUTTON8 = _Myoushu.MouseOISInputDevice_MC_BUTTON8
    MC_BUTTON9 = _Myoushu.MouseOISInputDevice_MC_BUTTON9
    def __init__(self, *args): 
        this = _Myoushu.new_MouseOISInputDevice(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_MouseOISInputDevice
    __del__ = lambda self : None;
    def getInputEventString(self, *args): return _Myoushu.MouseOISInputDevice_getInputEventString(self, *args)
    def getInputCodeFromInputIdentifier(self, *args): return _Myoushu.MouseOISInputDevice_getInputCodeFromInputIdentifier(self, *args)
    def getInputIdentifierFromInputCode(self, *args): return _Myoushu.MouseOISInputDevice_getInputIdentifierFromInputCode(self, *args)
    def capture(self): return _Myoushu.MouseOISInputDevice_capture(self)
    def mousePressed(self, *args): return _Myoushu.MouseOISInputDevice_mousePressed(self, *args)
    def mouseReleased(self, *args): return _Myoushu.MouseOISInputDevice_mouseReleased(self, *args)
    def mouseMoved(self, *args): return _Myoushu.MouseOISInputDevice_mouseMoved(self, *args)
MouseOISInputDevice_swigregister = _Myoushu.MouseOISInputDevice_swigregister
MouseOISInputDevice_swigregister(MouseOISInputDevice)
MouseOISInputDevice.INPUT_DEVICE_NAME = _Myoushu.cvar.MouseOISInputDevice_INPUT_DEVICE_NAME

class KeyboardInputDevice(HumanInputDevice):
    __swig_setmethods__ = {}
    for _s in [HumanInputDevice]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyboardInputDevice, name, value)
    __swig_getmethods__ = {}
    for _s in [HumanInputDevice]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KeyboardInputDevice, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_KeyboardInputDevice
    __del__ = lambda self : None;
KeyboardInputDevice_swigregister = _Myoushu.KeyboardInputDevice_swigregister
KeyboardInputDevice_swigregister(KeyboardInputDevice)
KeyboardInputDevice.KI_UNASSIGNED = _Myoushu.cvar.KeyboardInputDevice_KI_UNASSIGNED
KeyboardInputDevice.KI_ESCAPE = _Myoushu.cvar.KeyboardInputDevice_KI_ESCAPE
KeyboardInputDevice.KI_1 = _Myoushu.cvar.KeyboardInputDevice_KI_1
KeyboardInputDevice.KI_2 = _Myoushu.cvar.KeyboardInputDevice_KI_2
KeyboardInputDevice.KI_3 = _Myoushu.cvar.KeyboardInputDevice_KI_3
KeyboardInputDevice.KI_4 = _Myoushu.cvar.KeyboardInputDevice_KI_4
KeyboardInputDevice.KI_5 = _Myoushu.cvar.KeyboardInputDevice_KI_5
KeyboardInputDevice.KI_6 = _Myoushu.cvar.KeyboardInputDevice_KI_6
KeyboardInputDevice.KI_7 = _Myoushu.cvar.KeyboardInputDevice_KI_7
KeyboardInputDevice.KI_8 = _Myoushu.cvar.KeyboardInputDevice_KI_8
KeyboardInputDevice.KI_9 = _Myoushu.cvar.KeyboardInputDevice_KI_9
KeyboardInputDevice.KI_0 = _Myoushu.cvar.KeyboardInputDevice_KI_0
KeyboardInputDevice.KI_MINUS = _Myoushu.cvar.KeyboardInputDevice_KI_MINUS
KeyboardInputDevice.KI_EQUALS = _Myoushu.cvar.KeyboardInputDevice_KI_EQUALS
KeyboardInputDevice.KI_BACK = _Myoushu.cvar.KeyboardInputDevice_KI_BACK
KeyboardInputDevice.KI_TAB = _Myoushu.cvar.KeyboardInputDevice_KI_TAB
KeyboardInputDevice.KI_Q = _Myoushu.cvar.KeyboardInputDevice_KI_Q
KeyboardInputDevice.KI_W = _Myoushu.cvar.KeyboardInputDevice_KI_W
KeyboardInputDevice.KI_E = _Myoushu.cvar.KeyboardInputDevice_KI_E
KeyboardInputDevice.KI_R = _Myoushu.cvar.KeyboardInputDevice_KI_R
KeyboardInputDevice.KI_T = _Myoushu.cvar.KeyboardInputDevice_KI_T
KeyboardInputDevice.KI_Y = _Myoushu.cvar.KeyboardInputDevice_KI_Y
KeyboardInputDevice.KI_U = _Myoushu.cvar.KeyboardInputDevice_KI_U
KeyboardInputDevice.KI_I = _Myoushu.cvar.KeyboardInputDevice_KI_I
KeyboardInputDevice.KI_O = _Myoushu.cvar.KeyboardInputDevice_KI_O
KeyboardInputDevice.KI_P = _Myoushu.cvar.KeyboardInputDevice_KI_P
KeyboardInputDevice.KI_LBRACKET = _Myoushu.cvar.KeyboardInputDevice_KI_LBRACKET
KeyboardInputDevice.KI_RBRACKET = _Myoushu.cvar.KeyboardInputDevice_KI_RBRACKET
KeyboardInputDevice.KI_RETURN = _Myoushu.cvar.KeyboardInputDevice_KI_RETURN
KeyboardInputDevice.KI_LCONTROL = _Myoushu.cvar.KeyboardInputDevice_KI_LCONTROL
KeyboardInputDevice.KI_A = _Myoushu.cvar.KeyboardInputDevice_KI_A
KeyboardInputDevice.KI_S = _Myoushu.cvar.KeyboardInputDevice_KI_S
KeyboardInputDevice.KI_D = _Myoushu.cvar.KeyboardInputDevice_KI_D
KeyboardInputDevice.KI_F = _Myoushu.cvar.KeyboardInputDevice_KI_F
KeyboardInputDevice.KI_G = _Myoushu.cvar.KeyboardInputDevice_KI_G
KeyboardInputDevice.KI_H = _Myoushu.cvar.KeyboardInputDevice_KI_H
KeyboardInputDevice.KI_J = _Myoushu.cvar.KeyboardInputDevice_KI_J
KeyboardInputDevice.KI_K = _Myoushu.cvar.KeyboardInputDevice_KI_K
KeyboardInputDevice.KI_L = _Myoushu.cvar.KeyboardInputDevice_KI_L
KeyboardInputDevice.KI_SEMICOLON = _Myoushu.cvar.KeyboardInputDevice_KI_SEMICOLON
KeyboardInputDevice.KI_APOSTROPHE = _Myoushu.cvar.KeyboardInputDevice_KI_APOSTROPHE
KeyboardInputDevice.KI_GRAVE = _Myoushu.cvar.KeyboardInputDevice_KI_GRAVE
KeyboardInputDevice.KI_LSHIFT = _Myoushu.cvar.KeyboardInputDevice_KI_LSHIFT
KeyboardInputDevice.KI_BACKSLASH = _Myoushu.cvar.KeyboardInputDevice_KI_BACKSLASH
KeyboardInputDevice.KI_Z = _Myoushu.cvar.KeyboardInputDevice_KI_Z
KeyboardInputDevice.KI_X = _Myoushu.cvar.KeyboardInputDevice_KI_X
KeyboardInputDevice.KI_C = _Myoushu.cvar.KeyboardInputDevice_KI_C
KeyboardInputDevice.KI_V = _Myoushu.cvar.KeyboardInputDevice_KI_V
KeyboardInputDevice.KI_B = _Myoushu.cvar.KeyboardInputDevice_KI_B
KeyboardInputDevice.KI_N = _Myoushu.cvar.KeyboardInputDevice_KI_N
KeyboardInputDevice.KI_M = _Myoushu.cvar.KeyboardInputDevice_KI_M
KeyboardInputDevice.KI_COMMA = _Myoushu.cvar.KeyboardInputDevice_KI_COMMA
KeyboardInputDevice.KI_PERIOD = _Myoushu.cvar.KeyboardInputDevice_KI_PERIOD
KeyboardInputDevice.KI_SLASH = _Myoushu.cvar.KeyboardInputDevice_KI_SLASH
KeyboardInputDevice.KI_RSHIFT = _Myoushu.cvar.KeyboardInputDevice_KI_RSHIFT
KeyboardInputDevice.KI_MULTIPLY = _Myoushu.cvar.KeyboardInputDevice_KI_MULTIPLY
KeyboardInputDevice.KI_LMENU = _Myoushu.cvar.KeyboardInputDevice_KI_LMENU
KeyboardInputDevice.KI_SPACE = _Myoushu.cvar.KeyboardInputDevice_KI_SPACE
KeyboardInputDevice.KI_CAPITAL = _Myoushu.cvar.KeyboardInputDevice_KI_CAPITAL
KeyboardInputDevice.KI_F1 = _Myoushu.cvar.KeyboardInputDevice_KI_F1
KeyboardInputDevice.KI_F2 = _Myoushu.cvar.KeyboardInputDevice_KI_F2
KeyboardInputDevice.KI_F3 = _Myoushu.cvar.KeyboardInputDevice_KI_F3
KeyboardInputDevice.KI_F4 = _Myoushu.cvar.KeyboardInputDevice_KI_F4
KeyboardInputDevice.KI_F5 = _Myoushu.cvar.KeyboardInputDevice_KI_F5
KeyboardInputDevice.KI_F6 = _Myoushu.cvar.KeyboardInputDevice_KI_F6
KeyboardInputDevice.KI_F7 = _Myoushu.cvar.KeyboardInputDevice_KI_F7
KeyboardInputDevice.KI_F8 = _Myoushu.cvar.KeyboardInputDevice_KI_F8
KeyboardInputDevice.KI_F9 = _Myoushu.cvar.KeyboardInputDevice_KI_F9
KeyboardInputDevice.KI_F10 = _Myoushu.cvar.KeyboardInputDevice_KI_F10
KeyboardInputDevice.KI_NUMLOCK = _Myoushu.cvar.KeyboardInputDevice_KI_NUMLOCK
KeyboardInputDevice.KI_SCROLL = _Myoushu.cvar.KeyboardInputDevice_KI_SCROLL
KeyboardInputDevice.KI_NUMPAD7 = _Myoushu.cvar.KeyboardInputDevice_KI_NUMPAD7
KeyboardInputDevice.KI_NUMPAD8 = _Myoushu.cvar.KeyboardInputDevice_KI_NUMPAD8
KeyboardInputDevice.KI_NUMPAD9 = _Myoushu.cvar.KeyboardInputDevice_KI_NUMPAD9
KeyboardInputDevice.KI_SUBTRACT = _Myoushu.cvar.KeyboardInputDevice_KI_SUBTRACT
KeyboardInputDevice.KI_NUMPAD4 = _Myoushu.cvar.KeyboardInputDevice_KI_NUMPAD4
KeyboardInputDevice.KI_NUMPAD5 = _Myoushu.cvar.KeyboardInputDevice_KI_NUMPAD5
KeyboardInputDevice.KI_NUMPAD6 = _Myoushu.cvar.KeyboardInputDevice_KI_NUMPAD6
KeyboardInputDevice.KI_ADD = _Myoushu.cvar.KeyboardInputDevice_KI_ADD
KeyboardInputDevice.KI_NUMPAD1 = _Myoushu.cvar.KeyboardInputDevice_KI_NUMPAD1
KeyboardInputDevice.KI_NUMPAD2 = _Myoushu.cvar.KeyboardInputDevice_KI_NUMPAD2
KeyboardInputDevice.KI_NUMPAD3 = _Myoushu.cvar.KeyboardInputDevice_KI_NUMPAD3
KeyboardInputDevice.KI_NUMPAD0 = _Myoushu.cvar.KeyboardInputDevice_KI_NUMPAD0
KeyboardInputDevice.KI_DECIMAL = _Myoushu.cvar.KeyboardInputDevice_KI_DECIMAL
KeyboardInputDevice.KI_OEM_102 = _Myoushu.cvar.KeyboardInputDevice_KI_OEM_102
KeyboardInputDevice.KI_F11 = _Myoushu.cvar.KeyboardInputDevice_KI_F11
KeyboardInputDevice.KI_F12 = _Myoushu.cvar.KeyboardInputDevice_KI_F12
KeyboardInputDevice.KI_F13 = _Myoushu.cvar.KeyboardInputDevice_KI_F13
KeyboardInputDevice.KI_F14 = _Myoushu.cvar.KeyboardInputDevice_KI_F14
KeyboardInputDevice.KI_F15 = _Myoushu.cvar.KeyboardInputDevice_KI_F15
KeyboardInputDevice.KI_KANA = _Myoushu.cvar.KeyboardInputDevice_KI_KANA
KeyboardInputDevice.KI_ABNT_C1 = _Myoushu.cvar.KeyboardInputDevice_KI_ABNT_C1
KeyboardInputDevice.KI_CONVERT = _Myoushu.cvar.KeyboardInputDevice_KI_CONVERT
KeyboardInputDevice.KI_NOCONVERT = _Myoushu.cvar.KeyboardInputDevice_KI_NOCONVERT
KeyboardInputDevice.KI_YEN = _Myoushu.cvar.KeyboardInputDevice_KI_YEN
KeyboardInputDevice.KI_ABNT_C2 = _Myoushu.cvar.KeyboardInputDevice_KI_ABNT_C2
KeyboardInputDevice.KI_NUMPADEQUALS = _Myoushu.cvar.KeyboardInputDevice_KI_NUMPADEQUALS
KeyboardInputDevice.KI_PREVTRACK = _Myoushu.cvar.KeyboardInputDevice_KI_PREVTRACK
KeyboardInputDevice.KI_AT = _Myoushu.cvar.KeyboardInputDevice_KI_AT
KeyboardInputDevice.KI_COLON = _Myoushu.cvar.KeyboardInputDevice_KI_COLON
KeyboardInputDevice.KI_UNDERLINE = _Myoushu.cvar.KeyboardInputDevice_KI_UNDERLINE
KeyboardInputDevice.KI_KANJI = _Myoushu.cvar.KeyboardInputDevice_KI_KANJI
KeyboardInputDevice.KI_STOP = _Myoushu.cvar.KeyboardInputDevice_KI_STOP
KeyboardInputDevice.KI_AX = _Myoushu.cvar.KeyboardInputDevice_KI_AX
KeyboardInputDevice.KI_UNLABELED = _Myoushu.cvar.KeyboardInputDevice_KI_UNLABELED
KeyboardInputDevice.KI_NEXTTRACK = _Myoushu.cvar.KeyboardInputDevice_KI_NEXTTRACK
KeyboardInputDevice.KI_NUMPADENTER = _Myoushu.cvar.KeyboardInputDevice_KI_NUMPADENTER
KeyboardInputDevice.KI_RCONTROL = _Myoushu.cvar.KeyboardInputDevice_KI_RCONTROL
KeyboardInputDevice.KI_MUTE = _Myoushu.cvar.KeyboardInputDevice_KI_MUTE
KeyboardInputDevice.KI_CALCULATOR = _Myoushu.cvar.KeyboardInputDevice_KI_CALCULATOR
KeyboardInputDevice.KI_PLAYPAUSE = _Myoushu.cvar.KeyboardInputDevice_KI_PLAYPAUSE
KeyboardInputDevice.KI_MEDIASTOP = _Myoushu.cvar.KeyboardInputDevice_KI_MEDIASTOP
KeyboardInputDevice.KI_VOLUMEDOWN = _Myoushu.cvar.KeyboardInputDevice_KI_VOLUMEDOWN
KeyboardInputDevice.KI_VOLUMEUP = _Myoushu.cvar.KeyboardInputDevice_KI_VOLUMEUP
KeyboardInputDevice.KI_WEBHOME = _Myoushu.cvar.KeyboardInputDevice_KI_WEBHOME
KeyboardInputDevice.KI_NUMPADCOMMA = _Myoushu.cvar.KeyboardInputDevice_KI_NUMPADCOMMA
KeyboardInputDevice.KI_DIVIDE = _Myoushu.cvar.KeyboardInputDevice_KI_DIVIDE
KeyboardInputDevice.KI_SYSRQ = _Myoushu.cvar.KeyboardInputDevice_KI_SYSRQ
KeyboardInputDevice.KI_RMENU = _Myoushu.cvar.KeyboardInputDevice_KI_RMENU
KeyboardInputDevice.KI_PAUSE = _Myoushu.cvar.KeyboardInputDevice_KI_PAUSE
KeyboardInputDevice.KI_HOME = _Myoushu.cvar.KeyboardInputDevice_KI_HOME
KeyboardInputDevice.KI_UP = _Myoushu.cvar.KeyboardInputDevice_KI_UP
KeyboardInputDevice.KI_PGUP = _Myoushu.cvar.KeyboardInputDevice_KI_PGUP
KeyboardInputDevice.KI_LEFT = _Myoushu.cvar.KeyboardInputDevice_KI_LEFT
KeyboardInputDevice.KI_RIGHT = _Myoushu.cvar.KeyboardInputDevice_KI_RIGHT
KeyboardInputDevice.KI_END = _Myoushu.cvar.KeyboardInputDevice_KI_END
KeyboardInputDevice.KI_DOWN = _Myoushu.cvar.KeyboardInputDevice_KI_DOWN
KeyboardInputDevice.KI_PGDOWN = _Myoushu.cvar.KeyboardInputDevice_KI_PGDOWN
KeyboardInputDevice.KI_INSERT = _Myoushu.cvar.KeyboardInputDevice_KI_INSERT
KeyboardInputDevice.KI_DELETE = _Myoushu.cvar.KeyboardInputDevice_KI_DELETE
KeyboardInputDevice.KI_LWIN = _Myoushu.cvar.KeyboardInputDevice_KI_LWIN
KeyboardInputDevice.KI_RWIN = _Myoushu.cvar.KeyboardInputDevice_KI_RWIN
KeyboardInputDevice.KI_APPS = _Myoushu.cvar.KeyboardInputDevice_KI_APPS
KeyboardInputDevice.KI_POWER = _Myoushu.cvar.KeyboardInputDevice_KI_POWER
KeyboardInputDevice.KI_SLEEP = _Myoushu.cvar.KeyboardInputDevice_KI_SLEEP
KeyboardInputDevice.KI_WAKE = _Myoushu.cvar.KeyboardInputDevice_KI_WAKE
KeyboardInputDevice.KI_WEBSEARCH = _Myoushu.cvar.KeyboardInputDevice_KI_WEBSEARCH
KeyboardInputDevice.KI_WEBFAVORITES = _Myoushu.cvar.KeyboardInputDevice_KI_WEBFAVORITES
KeyboardInputDevice.KI_WEBREFRESH = _Myoushu.cvar.KeyboardInputDevice_KI_WEBREFRESH
KeyboardInputDevice.KI_WEBSTOP = _Myoushu.cvar.KeyboardInputDevice_KI_WEBSTOP
KeyboardInputDevice.KI_WEBFORWARD = _Myoushu.cvar.KeyboardInputDevice_KI_WEBFORWARD
KeyboardInputDevice.KI_WEBBACK = _Myoushu.cvar.KeyboardInputDevice_KI_WEBBACK
KeyboardInputDevice.KI_MYCOMPUTER = _Myoushu.cvar.KeyboardInputDevice_KI_MYCOMPUTER
KeyboardInputDevice.KI_MAIL = _Myoushu.cvar.KeyboardInputDevice_KI_MAIL
KeyboardInputDevice.KI_MEDIASELECT = _Myoushu.cvar.KeyboardInputDevice_KI_MEDIASELECT

NUMBER_OF_KEY_INPUT_IDENTIFIERS = _Myoushu.NUMBER_OF_KEY_INPUT_IDENTIFIERS
class KeyboardOISInputDevice(OISInputDevice_OIS_Keyboard,KeyboardInputDevice):
    __swig_setmethods__ = {}
    for _s in [OISInputDevice_OIS_Keyboard,KeyboardInputDevice]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyboardOISInputDevice, name, value)
    __swig_getmethods__ = {}
    for _s in [OISInputDevice_OIS_Keyboard,KeyboardInputDevice]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KeyboardOISInputDevice, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_KeyboardOISInputDevice(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_KeyboardOISInputDevice
    __del__ = lambda self : None;
    def getInputEventString(self, *args): return _Myoushu.KeyboardOISInputDevice_getInputEventString(self, *args)
    def getInputCodeFromInputIdentifier(self, *args): return _Myoushu.KeyboardOISInputDevice_getInputCodeFromInputIdentifier(self, *args)
    def getInputIdentifierFromInputCode(self, *args): return _Myoushu.KeyboardOISInputDevice_getInputIdentifierFromInputCode(self, *args)
    def capture(self): return _Myoushu.KeyboardOISInputDevice_capture(self)
    def keyPressed(self, *args): return _Myoushu.KeyboardOISInputDevice_keyPressed(self, *args)
    def keyReleased(self, *args): return _Myoushu.KeyboardOISInputDevice_keyReleased(self, *args)
KeyboardOISInputDevice_swigregister = _Myoushu.KeyboardOISInputDevice_swigregister
KeyboardOISInputDevice_swigregister(KeyboardOISInputDevice)
KeyboardOISInputDevice.INPUT_DEVICE_NAME = _Myoushu.cvar.KeyboardOISInputDevice_INPUT_DEVICE_NAME

class InputDeviceFactory(Singleton_InputDeviceFactory):
    __swig_setmethods__ = {}
    for _s in [Singleton_InputDeviceFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputDeviceFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Singleton_InputDeviceFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputDeviceFactory, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_InputDeviceFactory()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_InputDeviceFactory
    __del__ = lambda self : None;
    def make(self, *args): return _Myoushu.InputDeviceFactory_make(self, *args)
    def getInputDevice(self, *args): return _Myoushu.InputDeviceFactory_getInputDevice(self, *args)
    def getDevicesIteratorBegin(self): return _Myoushu.InputDeviceFactory_getDevicesIteratorBegin(self)
    def getDevicesIteratorEnd(self): return _Myoushu.InputDeviceFactory_getDevicesIteratorEnd(self)
    def getDevicesConstIteratorBegin(self): return _Myoushu.InputDeviceFactory_getDevicesConstIteratorBegin(self)
    def getDevicesConstIteratorEnd(self): return _Myoushu.InputDeviceFactory_getDevicesConstIteratorEnd(self)
InputDeviceFactory_swigregister = _Myoushu.InputDeviceFactory_swigregister
InputDeviceFactory_swigregister(InputDeviceFactory)

class InputTask(NamedObject_InputTask,Task):
    __swig_setmethods__ = {}
    for _s in [NamedObject_InputTask,Task]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputTask, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObject_InputTask,Task]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputTask, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_InputTask(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_InputTask
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.InputTask_getClassName(self)
    def castPtr(self, *args): return _Myoushu.InputTask_castPtr(self, *args)
    def init(self): return _Myoushu.InputTask_init(self)
    def suspend(self): return _Myoushu.InputTask_suspend(self)
    def execute(self, *args): return _Myoushu.InputTask_execute(self, *args)
    def kill(self): return _Myoushu.InputTask_kill(self)
    def receiveInputDeviceMessage(self, *args): return _Myoushu.InputTask_receiveInputDeviceMessage(self, *args)
InputTask_swigregister = _Myoushu.InputTask_swigregister
InputTask_swigregister(InputTask)
InputTask.DEFAULT_MOUSE_SENSITIVITY = _Myoushu.cvar.InputTask_DEFAULT_MOUSE_SENSITIVITY

class KernelMessage(NamedObject_KernelMessage,Message):
    __swig_setmethods__ = {}
    for _s in [NamedObject_KernelMessage,Message]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KernelMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObject_KernelMessage,Message]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KernelMessage, name)
    __repr__ = _swig_repr
    KM_SHUTDOWN = _Myoushu.KernelMessage_KM_SHUTDOWN
    KM_ADD_TASK = _Myoushu.KernelMessage_KM_ADD_TASK
    KM_REMOVE_TASK = _Myoushu.KernelMessage_KM_REMOVE_TASK
    KM_SUSPEND_TASK = _Myoushu.KernelMessage_KM_SUSPEND_TASK
    KM_INIT_ALL_TASKS = _Myoushu.KernelMessage_KM_INIT_ALL_TASKS
    KM_UNKNOWN = _Myoushu.KernelMessage_KM_UNKNOWN
    def __init__(self, *args): 
        this = _Myoushu.new_KernelMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_KernelMessage
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.KernelMessage_getClassName(self)
    def castPtr(self, *args): return _Myoushu.KernelMessage_castPtr(self, *args)
    def getMessageType(self): return _Myoushu.KernelMessage_getMessageType(self)
    def setMessageType(self, *args): return _Myoushu.KernelMessage_setMessageType(self, *args)
    def getTask(self): return _Myoushu.KernelMessage_getTask(self)
    def setTask(self, *args): return _Myoushu.KernelMessage_setTask(self, *args)
    def getTaskName(self): return _Myoushu.KernelMessage_getTaskName(self)
    def setTaskName(self, *args): return _Myoushu.KernelMessage_setTaskName(self, *args)
    def clear(self): return _Myoushu.KernelMessage_clear(self)
    def clone(self, *args): return _Myoushu.KernelMessage_clone(self, *args)
KernelMessage_swigregister = _Myoushu.KernelMessage_swigregister
KernelMessage_swigregister(KernelMessage)

class Kernel(Singleton_Kernel):
    __swig_setmethods__ = {}
    for _s in [Singleton_Kernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Kernel, name, value)
    __swig_getmethods__ = {}
    for _s in [Singleton_Kernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Kernel, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Kernel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Kernel
    __del__ = lambda self : None;
    def addTask(self, *args): return _Myoushu.Kernel_addTask(self, *args)
    def suspendTask(self, *args): return _Myoushu.Kernel_suspendTask(self, *args)
    def removeTask(self, *args): return _Myoushu.Kernel_removeTask(self, *args)
    def execute(self): return _Myoushu.Kernel_execute(self)
    def initAllTasks(self): return _Myoushu.Kernel_initAllTasks(self)
    def startConcurrentTasks(self): return _Myoushu.Kernel_startConcurrentTasks(self)
    def receiveMessage(self, *args): return _Myoushu.Kernel_receiveMessage(self, *args)
    def isExecuting(self): return _Myoushu.Kernel_isExecuting(self)
    def setExecuting(self, *args): return _Myoushu.Kernel_setExecuting(self, *args)
    def isTaskPoolChanged(self): return _Myoushu.Kernel_isTaskPoolChanged(self)
    def setTaskPoolChanged(self, *args): return _Myoushu.Kernel_setTaskPoolChanged(self, *args)
Kernel_swigregister = _Myoushu.Kernel_swigregister
Kernel_swigregister(Kernel)

class LuaFunctorBase(FunctorBase):
    __swig_setmethods__ = {}
    for _s in [FunctorBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LuaFunctorBase, name, value)
    __swig_getmethods__ = {}
    for _s in [FunctorBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LuaFunctorBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_LuaFunctorBase
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.LuaFunctorBase_getClassName(self)
    def castPtr(self, *args): return _Myoushu.LuaFunctorBase_castPtr(self, *args)
    def getFunctionName(self): return _Myoushu.LuaFunctorBase_getFunctionName(self)
    def setQueue(self, *args): return _Myoushu.LuaFunctorBase_setQueue(self, *args)
    def getQueue(self): return _Myoushu.LuaFunctorBase_getQueue(self)
    def __call__(self, *args): return _Myoushu.LuaFunctorBase___call__(self, *args)
LuaFunctorBase_swigregister = _Myoushu.LuaFunctorBase_swigregister
LuaFunctorBase_swigregister(LuaFunctorBase)

class MyGUIConsole(Console):
    __swig_setmethods__ = {}
    for _s in [Console]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MyGUIConsole, name, value)
    __swig_getmethods__ = {}
    for _s in [Console]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MyGUIConsole, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_MyGUIConsole(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_MyGUIConsole
    __del__ = lambda self : None;
    def setVisible(self, *args): return _Myoushu.MyGUIConsole_setVisible(self, *args)
    def toggleVisible(self): return _Myoushu.MyGUIConsole_toggleVisible(self)
    def update(self): return _Myoushu.MyGUIConsole_update(self)
    def InputCallbackKeyPressed(self, *args): return _Myoushu.MyGUIConsole_InputCallbackKeyPressed(self, *args)
MyGUIConsole_swigregister = _Myoushu.MyGUIConsole_swigregister
MyGUIConsole_swigregister(MyGUIConsole)
MyGUIConsole.CONSOLE_LAYOUT_FILE = _Myoushu.cvar.MyGUIConsole_CONSOLE_LAYOUT_FILE
MyGUIConsole.CONSOLE_WINDOW = _Myoushu.cvar.MyGUIConsole_CONSOLE_WINDOW
MyGUIConsole.CONSOLE_WINDOW_LIST = _Myoushu.cvar.MyGUIConsole_CONSOLE_WINDOW_LIST
MyGUIConsole.CONSOLE_WINDOW_EDIT = _Myoushu.cvar.MyGUIConsole_CONSOLE_WINDOW_EDIT

class NamedObjectInstanceCreatorManager(Singleton_NamedObjectInstanceCreatorManager):
    __swig_setmethods__ = {}
    for _s in [Singleton_NamedObjectInstanceCreatorManager]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObjectInstanceCreatorManager, name, value)
    __swig_getmethods__ = {}
    for _s in [Singleton_NamedObjectInstanceCreatorManager]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObjectInstanceCreatorManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_NamedObjectInstanceCreatorManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_NamedObjectInstanceCreatorManager
    __del__ = lambda self : None;
    __swig_getmethods__["getSingleton"] = lambda x: _Myoushu.NamedObjectInstanceCreatorManager_getSingleton
    if _newclass:getSingleton = staticmethod(_Myoushu.NamedObjectInstanceCreatorManager_getSingleton)
    def createInstance(self, *args): return _Myoushu.NamedObjectInstanceCreatorManager_createInstance(self, *args)
    def registerClassCreatorFunction(self, *args): return _Myoushu.NamedObjectInstanceCreatorManager_registerClassCreatorFunction(self, *args)
    def unregisterClassCreatorFunction(self, *args): return _Myoushu.NamedObjectInstanceCreatorManager_unregisterClassCreatorFunction(self, *args)
NamedObjectInstanceCreatorManager_swigregister = _Myoushu.NamedObjectInstanceCreatorManager_swigregister
NamedObjectInstanceCreatorManager_swigregister(NamedObjectInstanceCreatorManager)

def NamedObjectInstanceCreatorManager_getSingleton():
  return _Myoushu.NamedObjectInstanceCreatorManager_getSingleton()
NamedObjectInstanceCreatorManager_getSingleton = _Myoushu.NamedObjectInstanceCreatorManager_getSingleton

class NetworkListenTask(ConcurrentTask,Singleton_NetworkListenTask,NamedObject_NetworkListenTask):
    __swig_setmethods__ = {}
    for _s in [ConcurrentTask,Singleton_NetworkListenTask,NamedObject_NetworkListenTask]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkListenTask, name, value)
    __swig_getmethods__ = {}
    for _s in [ConcurrentTask,Singleton_NetworkListenTask,NamedObject_NetworkListenTask]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkListenTask, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_NetworkListenTask(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_NetworkListenTask
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.NetworkListenTask_getClassName(self)
    def castPtr(self, *args): return _Myoushu.NetworkListenTask_castPtr(self, *args)
    def setNetworkListenBehaviour(self, *args): return _Myoushu.NetworkListenTask_setNetworkListenBehaviour(self, *args)
    def getNetworkListenBehaviour(self, *args): return _Myoushu.NetworkListenTask_getNetworkListenBehaviour(self, *args)
    def init(self): return _Myoushu.NetworkListenTask_init(self)
    def suspend(self): return _Myoushu.NetworkListenTask_suspend(self)
    def execute(self, *args): return _Myoushu.NetworkListenTask_execute(self, *args)
    def kill(self): return _Myoushu.NetworkListenTask_kill(self)
    def run(self): return _Myoushu.NetworkListenTask_run(self)
NetworkListenTask_swigregister = _Myoushu.NetworkListenTask_swigregister
NetworkListenTask_swigregister(NetworkListenTask)

class NetworkManager(Singleton_NetworkManager):
    __swig_setmethods__ = {}
    for _s in [Singleton_NetworkManager]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkManager, name, value)
    __swig_getmethods__ = {}
    for _s in [Singleton_NetworkManager]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_NetworkManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_NetworkManager
    __del__ = lambda self : None;
    def sendNetworkMessage(self, *args): return _Myoushu.NetworkManager_sendNetworkMessage(self, *args)
    def sendPing(self, *args): return _Myoushu.NetworkManager_sendPing(self, *args)
    def sendPong(self, *args): return _Myoushu.NetworkManager_sendPong(self, *args)
    def sendCreateObjectMessage(self, *args): return _Myoushu.NetworkManager_sendCreateObjectMessage(self, *args)
    def sendUpdateObjectMessage(self, *args): return _Myoushu.NetworkManager_sendUpdateObjectMessage(self, *args)
    def sendDestroyObjectMessage(self, *args): return _Myoushu.NetworkManager_sendDestroyObjectMessage(self, *args)
    def setNetworkListenBehaviour(self, *args): return _Myoushu.NetworkManager_setNetworkListenBehaviour(self, *args)
    def setNetworkTransmitBehaviour(self, *args): return _Myoushu.NetworkManager_setNetworkTransmitBehaviour(self, *args)
    def setClientNetworkListenBehaviour(self): return _Myoushu.NetworkManager_setClientNetworkListenBehaviour(self)
    def setServerNetworkListenBehaviour(self): return _Myoushu.NetworkManager_setServerNetworkListenBehaviour(self)
    def setP2PNetworkListenBehaviour(self): return _Myoushu.NetworkManager_setP2PNetworkListenBehaviour(self)
    def setP2PNetworkTransmitBehaviour(self): return _Myoushu.NetworkManager_setP2PNetworkTransmitBehaviour(self)
    def getNetworkListenBehaviour(self, *args): return _Myoushu.NetworkManager_getNetworkListenBehaviour(self, *args)
    def getNetworkTransmitBehaviour(self, *args): return _Myoushu.NetworkManager_getNetworkTransmitBehaviour(self, *args)
    def getLocalIP(self): return _Myoushu.NetworkManager_getLocalIP(self)
    def getHostIP(self, *args): return _Myoushu.NetworkManager_getHostIP(self, *args)
    def createHostRecord(self, *args): return _Myoushu.NetworkManager_createHostRecord(self, *args)
    def addConnectedHost(self, *args): return _Myoushu.NetworkManager_addConnectedHost(self, *args)
    def removeConnectedHost(self, *args): return _Myoushu.NetworkManager_removeConnectedHost(self, *args)
    def getConnectedHost(self, *args): return _Myoushu.NetworkManager_getConnectedHost(self, *args)
    def isConnectedHost(self, *args): return _Myoushu.NetworkManager_isConnectedHost(self, *args)
    def getNumberOfConnectedHosts(self): return _Myoushu.NetworkManager_getNumberOfConnectedHosts(self)
    def getConncetedHostsIteratorAndLock(self): return _Myoushu.NetworkManager_getConncetedHostsIteratorAndLock(self)
    def getConncetedHostsEndIterator(self): return _Myoushu.NetworkManager_getConncetedHostsEndIterator(self)
    def releaseConnectedHostsIteratorAndLock(self, *args): return _Myoushu.NetworkManager_releaseConnectedHostsIteratorAndLock(self, *args)
NetworkManager_swigregister = _Myoushu.NetworkManager_swigregister
NetworkManager_swigregister(NetworkManager)

class NetworkTransmitTask(Task,NamedObject_NetworkTransmitTask):
    __swig_setmethods__ = {}
    for _s in [Task,NamedObject_NetworkTransmitTask]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkTransmitTask, name, value)
    __swig_getmethods__ = {}
    for _s in [Task,NamedObject_NetworkTransmitTask]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkTransmitTask, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_NetworkTransmitTask(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_NetworkTransmitTask
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.NetworkTransmitTask_getClassName(self)
    def castPtr(self, *args): return _Myoushu.NetworkTransmitTask_castPtr(self, *args)
    def init(self): return _Myoushu.NetworkTransmitTask_init(self)
    def suspend(self): return _Myoushu.NetworkTransmitTask_suspend(self)
    def execute(self, *args): return _Myoushu.NetworkTransmitTask_execute(self, *args)
    def kill(self): return _Myoushu.NetworkTransmitTask_kill(self)
    def getNetworkTransmitBehaviour(self, *args): return _Myoushu.NetworkTransmitTask_getNetworkTransmitBehaviour(self, *args)
    def setNetworkTransmitBehaviour(self, *args): return _Myoushu.NetworkTransmitTask_setNetworkTransmitBehaviour(self, *args)
NetworkTransmitTask_swigregister = _Myoushu.NetworkTransmitTask_swigregister
NetworkTransmitTask_swigregister(NetworkTransmitTask)

class NotificationManager(Singleton_NotificationManager):
    __swig_setmethods__ = {}
    for _s in [Singleton_NotificationManager]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotificationManager, name, value)
    __swig_getmethods__ = {}
    for _s in [Singleton_NotificationManager]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotificationManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_NotificationManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_NotificationManager
    __del__ = lambda self : None;
    def sendNotification(self, *args): return _Myoushu.NotificationManager_sendNotification(self, *args)
    def queueNotification(self, *args): return _Myoushu.NotificationManager_queueNotification(self, *args)
    def queueUrgentNotification(self, *args): return _Myoushu.NotificationManager_queueUrgentNotification(self, *args)
    def dispatchQueuedNotifications(self, *args): return _Myoushu.NotificationManager_dispatchQueuedNotifications(self, *args)
    def removeObserverObject(self, *args): return _Myoushu.NotificationManager_removeObserverObject(self, *args)
    def removeQueue(self, *args): return _Myoushu.NotificationManager_removeQueue(self, *args)
    def isObjectQueueMapChanged(self): return _Myoushu.NotificationManager_isObjectQueueMapChanged(self)
    def setObjectQueueMapChanged(self, *args): return _Myoushu.NotificationManager_setObjectQueueMapChanged(self, *args)
    def addObserverFunctorAnimationTaskMessage(self, *args): return _Myoushu.NotificationManager_addObserverFunctorAnimationTaskMessage(self, *args)
    def addObserverFunctorControllerTaskMessage(self, *args): return _Myoushu.NotificationManager_addObserverFunctorControllerTaskMessage(self, *args)
    def addObserverFunctorGameLogMessage(self, *args): return _Myoushu.NotificationManager_addObserverFunctorGameLogMessage(self, *args)
    def addObserverFunctorGUIMessage(self, *args): return _Myoushu.NotificationManager_addObserverFunctorGUIMessage(self, *args)
    def addObserverFunctorInputDeviceMessage(self, *args): return _Myoushu.NotificationManager_addObserverFunctorInputDeviceMessage(self, *args)
    def addObserverFunctorInputMessage(self, *args): return _Myoushu.NotificationManager_addObserverFunctorInputMessage(self, *args)
    def addObserverFunctorKernelMessage(self, *args): return _Myoushu.NotificationManager_addObserverFunctorKernelMessage(self, *args)
    def addObserverFunctorNetworkMessage(self, *args): return _Myoushu.NotificationManager_addObserverFunctorNetworkMessage(self, *args)
    def addObserverFunctorReplayMessage(self, *args): return _Myoushu.NotificationManager_addObserverFunctorReplayMessage(self, *args)
    def addObserverFunctorScriptMessage(self, *args): return _Myoushu.NotificationManager_addObserverFunctorScriptMessage(self, *args)
    def addObserverFunctorTimerTaskMessage(self, *args): return _Myoushu.NotificationManager_addObserverFunctorTimerTaskMessage(self, *args)
    def addObserverFunctorVideoTaskMessage(self, *args): return _Myoushu.NotificationManager_addObserverFunctorVideoTaskMessage(self, *args)
    def removeObserverFunctorAnimationTaskMessage(self, *args): return _Myoushu.NotificationManager_removeObserverFunctorAnimationTaskMessage(self, *args)
    def removeObserverFunctorControllerTaskMessage(self, *args): return _Myoushu.NotificationManager_removeObserverFunctorControllerTaskMessage(self, *args)
    def removeObserverFunctorGameLogMessage(self, *args): return _Myoushu.NotificationManager_removeObserverFunctorGameLogMessage(self, *args)
    def removeObserverFunctorGUIMessage(self, *args): return _Myoushu.NotificationManager_removeObserverFunctorGUIMessage(self, *args)
    def removeObserverFunctorInputDeviceMessage(self, *args): return _Myoushu.NotificationManager_removeObserverFunctorInputDeviceMessage(self, *args)
    def removeObserverFunctorInputMessage(self, *args): return _Myoushu.NotificationManager_removeObserverFunctorInputMessage(self, *args)
    def removeObserverFunctorKernelMessage(self, *args): return _Myoushu.NotificationManager_removeObserverFunctorKernelMessage(self, *args)
    def removeObserverFunctorNetworkMessage(self, *args): return _Myoushu.NotificationManager_removeObserverFunctorNetworkMessage(self, *args)
    def removeObserverFunctorReplayMessage(self, *args): return _Myoushu.NotificationManager_removeObserverFunctorReplayMessage(self, *args)
    def removeObserverFunctorScriptMessage(self, *args): return _Myoushu.NotificationManager_removeObserverFunctorScriptMessage(self, *args)
    def removeObserverFunctorTimerTaskMessage(self, *args): return _Myoushu.NotificationManager_removeObserverFunctorTimerTaskMessage(self, *args)
    def removeObserverFunctorVideoTaskMessage(self, *args): return _Myoushu.NotificationManager_removeObserverFunctorVideoTaskMessage(self, *args)
NotificationManager_swigregister = _Myoushu.NotificationManager_swigregister
NotificationManager_swigregister(NotificationManager)

class P2PNetworkListenBehaviour(NetworkListenBehaviour,NamedObject_P2PNetworkListenBehaviour):
    __swig_setmethods__ = {}
    for _s in [NetworkListenBehaviour,NamedObject_P2PNetworkListenBehaviour]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, P2PNetworkListenBehaviour, name, value)
    __swig_getmethods__ = {}
    for _s in [NetworkListenBehaviour,NamedObject_P2PNetworkListenBehaviour]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, P2PNetworkListenBehaviour, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_P2PNetworkListenBehaviour()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_P2PNetworkListenBehaviour
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.P2PNetworkListenBehaviour_getClassName(self)
    def castPtr(self, *args): return _Myoushu.P2PNetworkListenBehaviour_castPtr(self, *args)
    def processReceivedMessage(self, *args): return _Myoushu.P2PNetworkListenBehaviour_processReceivedMessage(self, *args)
P2PNetworkListenBehaviour_swigregister = _Myoushu.P2PNetworkListenBehaviour_swigregister
P2PNetworkListenBehaviour_swigregister(P2PNetworkListenBehaviour)

class PhysicsTask(Task,NamedObject_PhysicsTask):
    __swig_setmethods__ = {}
    for _s in [Task,NamedObject_PhysicsTask]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PhysicsTask, name, value)
    __swig_getmethods__ = {}
    for _s in [Task,NamedObject_PhysicsTask]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PhysicsTask, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_PhysicsTask(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_PhysicsTask
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.PhysicsTask_getClassName(self)
    def castPtr(self, *args): return _Myoushu.PhysicsTask_castPtr(self, *args)
    def init(self): return _Myoushu.PhysicsTask_init(self)
    def suspend(self): return _Myoushu.PhysicsTask_suspend(self)
    def execute(self, *args): return _Myoushu.PhysicsTask_execute(self, *args)
    def kill(self): return _Myoushu.PhysicsTask_kill(self)
    def getWorld(self): return _Myoushu.PhysicsTask_getWorld(self)
    def receiveTimerTaskMessage(self, *args): return _Myoushu.PhysicsTask_receiveTimerTaskMessage(self, *args)
PhysicsTask_swigregister = _Myoushu.PhysicsTask_swigregister
PhysicsTask_swigregister(PhysicsTask)

class SceneFactory(NamedObjectFactory_Scene,Singleton_SceneFactory):
    __swig_setmethods__ = {}
    for _s in [NamedObjectFactory_Scene,Singleton_SceneFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SceneFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectFactory_Scene,Singleton_SceneFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SceneFactory, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_SceneFactory(*args)
        try: self.this.append(this)
        except: self.this = this
    def setWorld(self, *args): return _Myoushu.SceneFactory_setWorld(self, *args)
    def getWorld(self): return _Myoushu.SceneFactory_getWorld(self)
    def make(self, *args): return _Myoushu.SceneFactory_make(self, *args)
    def destroy(self, *args): return _Myoushu.SceneFactory_destroy(self, *args)
    __swig_destroy__ = _Myoushu.delete_SceneFactory
    __del__ = lambda self : None;
SceneFactory_swigregister = _Myoushu.SceneFactory_swigregister
SceneFactory_swigregister(SceneFactory)

class ScriptManager(Singleton_ScriptManager):
    __swig_setmethods__ = {}
    for _s in [Singleton_ScriptManager]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScriptManager, name, value)
    __swig_getmethods__ = {}
    for _s in [Singleton_ScriptManager]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScriptManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_ScriptManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ScriptManager
    __del__ = lambda self : None;
    def getDefaultLuaParser(self): return _Myoushu.ScriptManager_getDefaultLuaParser(self)
    def executeScriptFile(self, *args): return _Myoushu.ScriptManager_executeScriptFile(self, *args)
    def executeScript(self, *args): return _Myoushu.ScriptManager_executeScript(self, *args)
    def executeFunction(self, *args): return _Myoushu.ScriptManager_executeFunction(self, *args)
ScriptManager_swigregister = _Myoushu.ScriptManager_swigregister
ScriptManager_swigregister(ScriptManager)

class ScriptMessage(NamedObject_ScriptMessage,Message):
    __swig_setmethods__ = {}
    for _s in [NamedObject_ScriptMessage,Message]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScriptMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObject_ScriptMessage,Message]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScriptMessage, name)
    __repr__ = _swig_repr
    SM_EXECUTE = _Myoushu.ScriptMessage_SM_EXECUTE
    SM_EXECUTE_LUA_FUNCTOR = _Myoushu.ScriptMessage_SM_EXECUTE_LUA_FUNCTOR
    SM_SLEEP = _Myoushu.ScriptMessage_SM_SLEEP
    SM_UNKNOWN = _Myoushu.ScriptMessage_SM_UNKNOWN
    def __init__(self, *args): 
        this = _Myoushu.new_ScriptMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ScriptMessage
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.ScriptMessage_getClassName(self)
    def castPtr(self, *args): return _Myoushu.ScriptMessage_castPtr(self, *args)
    def getMessageType(self): return _Myoushu.ScriptMessage_getMessageType(self)
    def setMessageType(self, *args): return _Myoushu.ScriptMessage_setMessageType(self, *args)
    def getScript(self): return _Myoushu.ScriptMessage_getScript(self)
    def setScript(self, *args): return _Myoushu.ScriptMessage_setScript(self, *args)
    def getLuaFunctor(self, *args): return _Myoushu.ScriptMessage_getLuaFunctor(self, *args)
    def setLuaFunctor(self, *args): return _Myoushu.ScriptMessage_setLuaFunctor(self, *args)
    def clear(self): return _Myoushu.ScriptMessage_clear(self)
    def clone(self, *args): return _Myoushu.ScriptMessage_clone(self, *args)
ScriptMessage_swigregister = _Myoushu.ScriptMessage_swigregister
ScriptMessage_swigregister(ScriptMessage)

class ScriptTask(Task,NamedObject_ScriptTask):
    __swig_setmethods__ = {}
    for _s in [Task,NamedObject_ScriptTask]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScriptTask, name, value)
    __swig_getmethods__ = {}
    for _s in [Task,NamedObject_ScriptTask]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScriptTask, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_ScriptTask(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ScriptTask
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.ScriptTask_getClassName(self)
    def castPtr(self, *args): return _Myoushu.ScriptTask_castPtr(self, *args)
    def init(self): return _Myoushu.ScriptTask_init(self)
    def suspend(self): return _Myoushu.ScriptTask_suspend(self)
    def execute(self, *args): return _Myoushu.ScriptTask_execute(self, *args)
    def kill(self): return _Myoushu.ScriptTask_kill(self)
    def receiveScriptMessage(self, *args): return _Myoushu.ScriptTask_receiveScriptMessage(self, *args)
ScriptTask_swigregister = _Myoushu.ScriptTask_swigregister
ScriptTask_swigregister(ScriptTask)

class ServerRecord(HostRecord,NamedObject_ServerRecord):
    __swig_setmethods__ = {}
    for _s in [HostRecord,NamedObject_ServerRecord]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ServerRecord, name, value)
    __swig_getmethods__ = {}
    for _s in [HostRecord,NamedObject_ServerRecord]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ServerRecord, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_ServerRecord(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ServerRecord
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.ServerRecord_getClassName(self)
    def castPtr(self, *args): return _Myoushu.ServerRecord_castPtr(self, *args)
ServerRecord_swigregister = _Myoushu.ServerRecord_swigregister
ServerRecord_swigregister(ServerRecord)

class TimerTask(NamedObject_TimerTask,Task,Singleton_TimerTask):
    __swig_setmethods__ = {}
    for _s in [NamedObject_TimerTask,Task,Singleton_TimerTask]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimerTask, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObject_TimerTask,Task,Singleton_TimerTask]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimerTask, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_TimerTask(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_TimerTask
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.TimerTask_getClassName(self)
    def castPtr(self, *args): return _Myoushu.TimerTask_castPtr(self, *args)
    def setState(self, *args): return _Myoushu.TimerTask_setState(self, *args)
    def init(self): return _Myoushu.TimerTask_init(self)
    def suspend(self): return _Myoushu.TimerTask_suspend(self)
    def kill(self): return _Myoushu.TimerTask_kill(self)
    def resetStats(self): return _Myoushu.TimerTask_resetStats(self)
    def execute(self, *args): return _Myoushu.TimerTask_execute(self, *args)
    def getDelta(self): return _Myoushu.TimerTask_getDelta(self)
    def getAbsTime(self): return _Myoushu.TimerTask_getAbsTime(self)
    def getIterationCnt(self): return _Myoushu.TimerTask_getIterationCnt(self)
    def getSmallestTimeDelta(self): return _Myoushu.TimerTask_getSmallestTimeDelta(self)
    def getLargestTimeDelta(self): return _Myoushu.TimerTask_getLargestTimeDelta(self)
    def getAbsTimeMillis(self): return _Myoushu.TimerTask_getAbsTimeMillis(self)
TimerTask_swigregister = _Myoushu.TimerTask_swigregister
TimerTask_swigregister(TimerTask)

class VideoTaskMessage(Message):
    __swig_setmethods__ = {}
    for _s in [Message]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VideoTaskMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [Message]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VideoTaskMessage, name)
    __repr__ = _swig_repr
    VM_UNKNOWN = _Myoushu.VideoTaskMessage_VM_UNKNOWN
    VM_SHOW_FPS = _Myoushu.VideoTaskMessage_VM_SHOW_FPS
    VM_HIDE_FPS = _Myoushu.VideoTaskMessage_VM_HIDE_FPS
    def __init__(self, *args): 
        this = _Myoushu.new_VideoTaskMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_VideoTaskMessage
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.VideoTaskMessage_getClassName(self)
    def castPtr(self, *args): return _Myoushu.VideoTaskMessage_castPtr(self, *args)
    def getMessageType(self): return _Myoushu.VideoTaskMessage_getMessageType(self)
    def setMessageType(self, *args): return _Myoushu.VideoTaskMessage_setMessageType(self, *args)
    def clear(self): return _Myoushu.VideoTaskMessage_clear(self)
    def clone(self): return _Myoushu.VideoTaskMessage_clone(self)
    def __eq__(self, *args): return _Myoushu.VideoTaskMessage___eq__(self, *args)
VideoTaskMessage_swigregister = _Myoushu.VideoTaskMessage_swigregister
VideoTaskMessage_swigregister(VideoTaskMessage)

class VideoTask(NamedObject_VideoTask,Task):
    __swig_setmethods__ = {}
    for _s in [NamedObject_VideoTask,Task]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VideoTask, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObject_VideoTask,Task]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VideoTask, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_VideoTask(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_VideoTask
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.VideoTask_getClassName(self)
    def castPtr(self, *args): return _Myoushu.VideoTask_castPtr(self, *args)
    def init(self): return _Myoushu.VideoTask_init(self)
    def suspend(self): return _Myoushu.VideoTask_suspend(self)
    def execute(self, *args): return _Myoushu.VideoTask_execute(self, *args)
    def kill(self): return _Myoushu.VideoTask_kill(self)
    def getFPSStatsString(self, *args): return _Myoushu.VideoTask_getFPSStatsString(self, *args)
    def receiveVideoTaskMessage(self, *args): return _Myoushu.VideoTask_receiveVideoTaskMessage(self, *args)
VideoTask_swigregister = _Myoushu.VideoTask_swigregister
VideoTask_swigregister(VideoTask)

class CallbackTask(Task,NamedObject_CallbackTask):
    __swig_setmethods__ = {}
    for _s in [Task,NamedObject_CallbackTask]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CallbackTask, name, value)
    __swig_getmethods__ = {}
    for _s in [Task,NamedObject_CallbackTask]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CallbackTask, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_CallbackTask(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_CallbackTask
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.CallbackTask_getClassName(self)
    def castPtr(self, *args): return _Myoushu.CallbackTask_castPtr(self, *args)
    def init(self): return _Myoushu.CallbackTask_init(self)
    def suspend(self): return _Myoushu.CallbackTask_suspend(self)
    def execute(self, *args): return _Myoushu.CallbackTask_execute(self, *args)
    def kill(self): return _Myoushu.CallbackTask_kill(self)
    def setInitCallback(self, *args): return _Myoushu.CallbackTask_setInitCallback(self, *args)
    def setSuspendCallback(self, *args): return _Myoushu.CallbackTask_setSuspendCallback(self, *args)
    def setExecuteCallback(self, *args): return _Myoushu.CallbackTask_setExecuteCallback(self, *args)
    def setKillCallback(self, *args): return _Myoushu.CallbackTask_setKillCallback(self, *args)
    def getInitCallback(self): return _Myoushu.CallbackTask_getInitCallback(self)
    def getSuspendCallback(self): return _Myoushu.CallbackTask_getSuspendCallback(self)
    def getExecuteCallback(self): return _Myoushu.CallbackTask_getExecuteCallback(self)
    def getKillCallback(self): return _Myoushu.CallbackTask_getKillCallback(self)
CallbackTask_swigregister = _Myoushu.CallbackTask_swigregister
CallbackTask_swigregister(CallbackTask)

class KernelManager(Singleton_KernelManager):
    __swig_setmethods__ = {}
    for _s in [Singleton_KernelManager]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KernelManager, name, value)
    __swig_getmethods__ = {}
    for _s in [Singleton_KernelManager]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KernelManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_KernelManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_KernelManager
    __del__ = lambda self : None;
    def stopKernel(self): return _Myoushu.KernelManager_stopKernel(self)
    def addTask(self, *args): return _Myoushu.KernelManager_addTask(self, *args)
    def suspendTask(self, *args): return _Myoushu.KernelManager_suspendTask(self, *args)
    def removeTask(self, *args): return _Myoushu.KernelManager_removeTask(self, *args)
    def initAllTasks(self): return _Myoushu.KernelManager_initAllTasks(self)
    def createCallbackTask(self, *args): return _Myoushu.KernelManager_createCallbackTask(self, *args)
KernelManager_swigregister = _Myoushu.KernelManager_swigregister
KernelManager_swigregister(KernelManager)

class VideoTaskManager(Singleton_VideoTaskManager):
    __swig_setmethods__ = {}
    for _s in [Singleton_VideoTaskManager]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VideoTaskManager, name, value)
    __swig_getmethods__ = {}
    for _s in [Singleton_VideoTaskManager]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VideoTaskManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_VideoTaskManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_VideoTaskManager
    __del__ = lambda self : None;
    def getRenderWindow(self, *args): return _Myoushu.VideoTaskManager_getRenderWindow(self, *args)
    def showFPS(self, *args): return _Myoushu.VideoTaskManager_showFPS(self, *args)
VideoTaskManager_swigregister = _Myoushu.VideoTaskManager_swigregister
VideoTaskManager_swigregister(VideoTaskManager)

class CollisionManager(Singleton_CollisionManager):
    __swig_setmethods__ = {}
    for _s in [Singleton_CollisionManager]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollisionManager, name, value)
    __swig_getmethods__ = {}
    for _s in [Singleton_CollisionManager]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CollisionManager, name)
    __repr__ = _swig_repr
    CP_IGNORE_PAIR = _Myoushu.CollisionManager_CP_IGNORE_PAIR
    CP_NOTIFY_ON_START_TOUCH = _Myoushu.CollisionManager_CP_NOTIFY_ON_START_TOUCH
    CP_NOTIFY_ON_END_TOUCH = _Myoushu.CollisionManager_CP_NOTIFY_ON_END_TOUCH
    CP_NOTIFY_ON_TOUCH = _Myoushu.CollisionManager_CP_NOTIFY_ON_TOUCH
    CP_NOTIFY_ALL = _Myoushu.CollisionManager_CP_NOTIFY_ALL
    def __init__(self): 
        this = _Myoushu.new_CollisionManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_CollisionManager
    __del__ = lambda self : None;
    def setActorGroupsCollidable(self, *args): return _Myoushu.CollisionManager_setActorGroupsCollidable(self, *args)
    def getActorGroupsCollidable(self, *args): return _Myoushu.CollisionManager_getActorGroupsCollidable(self, *args)
    def onStartTouch(self, *args): return _Myoushu.CollisionManager_onStartTouch(self, *args)
    def onEndTouch(self, *args): return _Myoushu.CollisionManager_onEndTouch(self, *args)
    def onTouch(self, *args): return _Myoushu.CollisionManager_onTouch(self, *args)
    def onActor(self, *args): return _Myoushu.CollisionManager_onActor(self, *args)
    def onCharacterHit(self, *args): return _Myoushu.CollisionManager_onCharacterHit(self, *args)
    def setGlobalStartTouchCallback(self, *args): return _Myoushu.CollisionManager_setGlobalStartTouchCallback(self, *args)
    def setGlobalEndTouchCallback(self, *args): return _Myoushu.CollisionManager_setGlobalEndTouchCallback(self, *args)
    def setGlobalTouchCallback(self, *args): return _Myoushu.CollisionManager_setGlobalTouchCallback(self, *args)
    def setPerGroupStartTouchCallback(self, *args): return _Myoushu.CollisionManager_setPerGroupStartTouchCallback(self, *args)
    def setPerGroupEndTouchCallback(self, *args): return _Myoushu.CollisionManager_setPerGroupEndTouchCallback(self, *args)
    def setPerGroupTouchCallback(self, *args): return _Myoushu.CollisionManager_setPerGroupTouchCallback(self, *args)
    def setPerActorStartTouchCallback(self, *args): return _Myoushu.CollisionManager_setPerActorStartTouchCallback(self, *args)
    def setPerActorEndTouchCallback(self, *args): return _Myoushu.CollisionManager_setPerActorEndTouchCallback(self, *args)
    def setPerActorTouchCallback(self, *args): return _Myoushu.CollisionManager_setPerActorTouchCallback(self, *args)
    def enableActorCharacterCollisionReporting(self, *args): return _Myoushu.CollisionManager_enableActorCharacterCollisionReporting(self, *args)
    def setGlobalActorCharacterCallback(self, *args): return _Myoushu.CollisionManager_setGlobalActorCharacterCallback(self, *args)
    def setPerGroupCharacterCallback(self, *args): return _Myoushu.CollisionManager_setPerGroupCharacterCallback(self, *args)
    def setPerActorCharacterCallback(self, *args): return _Myoushu.CollisionManager_setPerActorCharacterCallback(self, *args)
    def setPerCharacterActorCallback(self, *args): return _Myoushu.CollisionManager_setPerCharacterActorCallback(self, *args)
CollisionManager_swigregister = _Myoushu.CollisionManager_swigregister
CollisionManager_swigregister(CollisionManager)

class Sound(NamedInstance,RefCountedObject,NamedObject_Sound):
    __swig_setmethods__ = {}
    for _s in [NamedInstance,RefCountedObject,NamedObject_Sound]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sound, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedInstance,RefCountedObject,NamedObject_Sound]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sound, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_Sound
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.Sound_getClassName(self)
    def castPtr(self, *args): return _Myoushu.Sound_castPtr(self, *args)
    def play(self): return _Myoushu.Sound_play(self)
    def pause(self): return _Myoushu.Sound_pause(self)
    def stop(self): return _Myoushu.Sound_stop(self)
    def getMovableObject(self): return _Myoushu.Sound_getMovableObject(self)
    def setLoop(self, *args): return _Myoushu.Sound_setLoop(self, *args)
    def isPlaying(self): return _Myoushu.Sound_isPlaying(self)
    def isPaused(self): return _Myoushu.Sound_isPaused(self)
    def isStopped(self): return _Myoushu.Sound_isStopped(self)
    def setVolume(self, *args): return _Myoushu.Sound_setVolume(self, *args)
    def getVolume(self): return _Myoushu.Sound_getVolume(self)
    def setPitch(self, *args): return _Myoushu.Sound_setPitch(self, *args)
    def getPitch(self): return _Myoushu.Sound_getPitch(self)
    def getAudioLength(self): return _Myoushu.Sound_getAudioLength(self)
    def setFinishedCallback(self, *args): return _Myoushu.Sound_setFinishedCallback(self, *args)
    def setFinishedCallbackEnabled(self, *args): return _Myoushu.Sound_setFinishedCallbackEnabled(self, *args)
    def setLoopCallback(self, *args): return _Myoushu.Sound_setLoopCallback(self, *args)
    def setLoopCallbackEnabled(self, *args): return _Myoushu.Sound_setLoopCallbackEnabled(self, *args)
Sound_swigregister = _Myoushu.Sound_swigregister
Sound_swigregister(Sound)

class StaticSound(Sound,NamedObject_StaticSound):
    __swig_setmethods__ = {}
    for _s in [Sound,NamedObject_StaticSound]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StaticSound, name, value)
    __swig_getmethods__ = {}
    for _s in [Sound,NamedObject_StaticSound]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StaticSound, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_StaticSound
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.StaticSound_getClassName(self)
    def castPtr(self, *args): return _Myoushu.StaticSound_castPtr(self, *args)
    def open(self, *args): return _Myoushu.StaticSound_open(self, *args)
StaticSound_swigregister = _Myoushu.StaticSound_swigregister
StaticSound_swigregister(StaticSound)

class StreamSound(Sound,NamedObject_StreamSound):
    __swig_setmethods__ = {}
    for _s in [Sound,NamedObject_StreamSound]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamSound, name, value)
    __swig_getmethods__ = {}
    for _s in [Sound,NamedObject_StreamSound]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamSound, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_StreamSound
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.StreamSound_getClassName(self)
    def castPtr(self, *args): return _Myoushu.StreamSound_castPtr(self, *args)
    def open(self, *args): return _Myoushu.StreamSound_open(self, *args)
StreamSound_swigregister = _Myoushu.StreamSound_swigregister
StreamSound_swigregister(StreamSound)

class MyoushuOgreOggStaticSound(StaticSound,NamedObject_MyoushuOgreOggStaticSound):
    __swig_setmethods__ = {}
    for _s in [StaticSound,NamedObject_MyoushuOgreOggStaticSound]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MyoushuOgreOggStaticSound, name, value)
    __swig_getmethods__ = {}
    for _s in [StaticSound,NamedObject_MyoushuOgreOggStaticSound]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MyoushuOgreOggStaticSound, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_MyoushuOgreOggStaticSound(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_MyoushuOgreOggStaticSound
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.MyoushuOgreOggStaticSound_getClassName(self)
    def castPtr(self, *args): return _Myoushu.MyoushuOgreOggStaticSound_castPtr(self, *args)
    def open(self, *args): return _Myoushu.MyoushuOgreOggStaticSound_open(self, *args)
    def play(self): return _Myoushu.MyoushuOgreOggStaticSound_play(self)
    def pause(self): return _Myoushu.MyoushuOgreOggStaticSound_pause(self)
    def stop(self): return _Myoushu.MyoushuOgreOggStaticSound_stop(self)
    def getMovableObject(self): return _Myoushu.MyoushuOgreOggStaticSound_getMovableObject(self)
    def setLoop(self, *args): return _Myoushu.MyoushuOgreOggStaticSound_setLoop(self, *args)
    def isPlaying(self): return _Myoushu.MyoushuOgreOggStaticSound_isPlaying(self)
    def isPaused(self): return _Myoushu.MyoushuOgreOggStaticSound_isPaused(self)
    def isStopped(self): return _Myoushu.MyoushuOgreOggStaticSound_isStopped(self)
    def setVolume(self, *args): return _Myoushu.MyoushuOgreOggStaticSound_setVolume(self, *args)
    def getVolume(self): return _Myoushu.MyoushuOgreOggStaticSound_getVolume(self)
    def setPitch(self, *args): return _Myoushu.MyoushuOgreOggStaticSound_setPitch(self, *args)
    def getPitch(self): return _Myoushu.MyoushuOgreOggStaticSound_getPitch(self)
    def getAudioLength(self): return _Myoushu.MyoushuOgreOggStaticSound_getAudioLength(self)
    def setFinishedCallback(self, *args): return _Myoushu.MyoushuOgreOggStaticSound_setFinishedCallback(self, *args)
    def setFinishedCallbackEnabled(self, *args): return _Myoushu.MyoushuOgreOggStaticSound_setFinishedCallbackEnabled(self, *args)
    def setLoopCallback(self, *args): return _Myoushu.MyoushuOgreOggStaticSound_setLoopCallback(self, *args)
    def setLoopCallbackEnabled(self, *args): return _Myoushu.MyoushuOgreOggStaticSound_setLoopCallbackEnabled(self, *args)
MyoushuOgreOggStaticSound_swigregister = _Myoushu.MyoushuOgreOggStaticSound_swigregister
MyoushuOgreOggStaticSound_swigregister(MyoushuOgreOggStaticSound)

class MyoushuOgreOggStreamSound(StreamSound,NamedObject_MyoushuOgreOggStreamSound):
    __swig_setmethods__ = {}
    for _s in [StreamSound,NamedObject_MyoushuOgreOggStreamSound]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MyoushuOgreOggStreamSound, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamSound,NamedObject_MyoushuOgreOggStreamSound]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MyoushuOgreOggStreamSound, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_MyoushuOgreOggStreamSound(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_MyoushuOgreOggStreamSound
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.MyoushuOgreOggStreamSound_getClassName(self)
    def castPtr(self, *args): return _Myoushu.MyoushuOgreOggStreamSound_castPtr(self, *args)
    def open(self, *args): return _Myoushu.MyoushuOgreOggStreamSound_open(self, *args)
    def play(self): return _Myoushu.MyoushuOgreOggStreamSound_play(self)
    def pause(self): return _Myoushu.MyoushuOgreOggStreamSound_pause(self)
    def stop(self): return _Myoushu.MyoushuOgreOggStreamSound_stop(self)
    def getMovableObject(self): return _Myoushu.MyoushuOgreOggStreamSound_getMovableObject(self)
    def setLoop(self, *args): return _Myoushu.MyoushuOgreOggStreamSound_setLoop(self, *args)
    def isPlaying(self): return _Myoushu.MyoushuOgreOggStreamSound_isPlaying(self)
    def isPaused(self): return _Myoushu.MyoushuOgreOggStreamSound_isPaused(self)
    def isStopped(self): return _Myoushu.MyoushuOgreOggStreamSound_isStopped(self)
    def setVolume(self, *args): return _Myoushu.MyoushuOgreOggStreamSound_setVolume(self, *args)
    def getVolume(self): return _Myoushu.MyoushuOgreOggStreamSound_getVolume(self)
    def setPitch(self, *args): return _Myoushu.MyoushuOgreOggStreamSound_setPitch(self, *args)
    def getPitch(self): return _Myoushu.MyoushuOgreOggStreamSound_getPitch(self)
    def getAudioLength(self): return _Myoushu.MyoushuOgreOggStreamSound_getAudioLength(self)
    def setFinishedCallback(self, *args): return _Myoushu.MyoushuOgreOggStreamSound_setFinishedCallback(self, *args)
    def setFinishedCallbackEnabled(self, *args): return _Myoushu.MyoushuOgreOggStreamSound_setFinishedCallbackEnabled(self, *args)
    def setLoopCallback(self, *args): return _Myoushu.MyoushuOgreOggStreamSound_setLoopCallback(self, *args)
    def setLoopCallbackEnabled(self, *args): return _Myoushu.MyoushuOgreOggStreamSound_setLoopCallbackEnabled(self, *args)
MyoushuOgreOggStreamSound_swigregister = _Myoushu.MyoushuOgreOggStreamSound_swigregister
MyoushuOgreOggStreamSound_swigregister(MyoushuOgreOggStreamSound)

class SoundManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoundManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SoundManager, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def setMasterVolume(self, *args): return _Myoushu.SoundManager_setMasterVolume(self, *args)
    def getMasterVolume(self): return _Myoushu.SoundManager_getMasterVolume(self)
    def playSound(self, *args): return _Myoushu.SoundManager_playSound(self, *args)
    def pauseSound(self, *args): return _Myoushu.SoundManager_pauseSound(self, *args)
    def stopSound(self, *args): return _Myoushu.SoundManager_stopSound(self, *args)
    def stopAllSounds(self): return _Myoushu.SoundManager_stopAllSounds(self)
    def pauseAllSounds(self): return _Myoushu.SoundManager_pauseAllSounds(self)
    def resumeAllPausedSounds(self): return _Myoushu.SoundManager_resumeAllPausedSounds(self)
    def getListener(self): return _Myoushu.SoundManager_getListener(self)
    __swig_destroy__ = _Myoushu.delete_SoundManager
    __del__ = lambda self : None;
SoundManager_swigregister = _Myoushu.SoundManager_swigregister
SoundManager_swigregister(SoundManager)

class MyoushuOgreOggSoundManager(SoundManager,Singleton_MyoushuOgreOggSoundManager):
    __swig_setmethods__ = {}
    for _s in [SoundManager,Singleton_MyoushuOgreOggSoundManager]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MyoushuOgreOggSoundManager, name, value)
    __swig_getmethods__ = {}
    for _s in [SoundManager,Singleton_MyoushuOgreOggSoundManager]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MyoushuOgreOggSoundManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_MyoushuOgreOggSoundManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_MyoushuOgreOggSoundManager
    __del__ = lambda self : None;
    def setMasterVolume(self, *args): return _Myoushu.MyoushuOgreOggSoundManager_setMasterVolume(self, *args)
    def getMasterVolume(self): return _Myoushu.MyoushuOgreOggSoundManager_getMasterVolume(self)
    def playSound(self, *args): return _Myoushu.MyoushuOgreOggSoundManager_playSound(self, *args)
    def pauseSound(self, *args): return _Myoushu.MyoushuOgreOggSoundManager_pauseSound(self, *args)
    def stopSound(self, *args): return _Myoushu.MyoushuOgreOggSoundManager_stopSound(self, *args)
    def stopAllSounds(self): return _Myoushu.MyoushuOgreOggSoundManager_stopAllSounds(self)
    def pauseAllSounds(self): return _Myoushu.MyoushuOgreOggSoundManager_pauseAllSounds(self)
    def resumeAllPausedSounds(self): return _Myoushu.MyoushuOgreOggSoundManager_resumeAllPausedSounds(self)
    def getListener(self): return _Myoushu.MyoushuOgreOggSoundManager_getListener(self)
MyoushuOgreOggSoundManager_swigregister = _Myoushu.MyoushuOgreOggSoundManager_swigregister
MyoushuOgreOggSoundManager_swigregister(MyoushuOgreOggSoundManager)

class SoundFactory(NamedObjectFactory_Sound):
    __swig_setmethods__ = {}
    for _s in [NamedObjectFactory_Sound]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoundFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectFactory_Sound]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SoundFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_SoundFactory
    __del__ = lambda self : None;
    def makeStaticSound(self, *args): return _Myoushu.SoundFactory_makeStaticSound(self, *args)
    def makeStreamSound(self, *args): return _Myoushu.SoundFactory_makeStreamSound(self, *args)
    def destroyInstance(self, *args): return _Myoushu.SoundFactory_destroyInstance(self, *args)
    def destroyAll(self): return _Myoushu.SoundFactory_destroyAll(self)
SoundFactory_swigregister = _Myoushu.SoundFactory_swigregister
SoundFactory_swigregister(SoundFactory)

class MyoushuOgreOggSoundFactory(SoundFactory,Singleton_MyoushuOgreOggSoundFactory):
    __swig_setmethods__ = {}
    for _s in [SoundFactory,Singleton_MyoushuOgreOggSoundFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MyoushuOgreOggSoundFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [SoundFactory,Singleton_MyoushuOgreOggSoundFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MyoushuOgreOggSoundFactory, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_MyoushuOgreOggSoundFactory()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_MyoushuOgreOggSoundFactory
    __del__ = lambda self : None;
    def make(self, *args): return _Myoushu.MyoushuOgreOggSoundFactory_make(self, *args)
    def makeStaticSound(self, *args): return _Myoushu.MyoushuOgreOggSoundFactory_makeStaticSound(self, *args)
    def makeStreamSound(self, *args): return _Myoushu.MyoushuOgreOggSoundFactory_makeStreamSound(self, *args)
    def destroyInstance(self, *args): return _Myoushu.MyoushuOgreOggSoundFactory_destroyInstance(self, *args)
    def destroyAll(self): return _Myoushu.MyoushuOgreOggSoundFactory_destroyAll(self)
MyoushuOgreOggSoundFactory_swigregister = _Myoushu.MyoushuOgreOggSoundFactory_swigregister
MyoushuOgreOggSoundFactory_swigregister(MyoushuOgreOggSoundFactory)

class GameLogEntityEntry(RefCountedObject):
    __swig_setmethods__ = {}
    for _s in [RefCountedObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameLogEntityEntry, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountedObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GameLogEntityEntry, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_GameLogEntityEntry(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_GameLogEntityEntry
    __del__ = lambda self : None;
    def getAttributeNames(self): return _Myoushu.GameLogEntityEntry_getAttributeNames(self)
    def getAttributeName(self, *args): return _Myoushu.GameLogEntityEntry_getAttributeName(self, *args)
    def getNumberOfAttributes(self): return _Myoushu.GameLogEntityEntry_getNumberOfAttributes(self)
    def setValue(self, *args): return _Myoushu.GameLogEntityEntry_setValue(self, *args)
    def getValue(self, *args): return _Myoushu.GameLogEntityEntry_getValue(self, *args)
    def getChanged(self): return _Myoushu.GameLogEntityEntry_getChanged(self)
    def setChanged(self, *args): return _Myoushu.GameLogEntityEntry_setChanged(self, *args)
GameLogEntityEntry_swigregister = _Myoushu.GameLogEntityEntry_swigregister
GameLogEntityEntry_swigregister(GameLogEntityEntry)

class GameLogEntity(NamedInstance,NamedObject_GameLogEntity,RefCountedObject):
    __swig_setmethods__ = {}
    for _s in [NamedInstance,NamedObject_GameLogEntity,RefCountedObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameLogEntity, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedInstance,NamedObject_GameLogEntity,RefCountedObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GameLogEntity, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_GameLogEntity
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.GameLogEntity_getClassName(self)
    def castPtr(self, *args): return _Myoushu.GameLogEntity_castPtr(self, *args)
    def addAttributeToPrimaryKey(self, *args): return _Myoushu.GameLogEntity_addAttributeToPrimaryKey(self, *args)
    def addEntry(self, *args): return _Myoushu.GameLogEntity_addEntry(self, *args)
    def getEntry(self, *args): return _Myoushu.GameLogEntity_getEntry(self, *args)
    def getPrimaryKeyFromEntry(self, *args): return _Myoushu.GameLogEntity_getPrimaryKeyFromEntry(self, *args)
    def getAttributeNames(self): return _Myoushu.GameLogEntity_getAttributeNames(self)
    def begin(self, *args): return _Myoushu.GameLogEntity_begin(self, *args)
    def end(self, *args): return _Myoushu.GameLogEntity_end(self, *args)
    def attributeNamesBegin(self): return _Myoushu.GameLogEntity_attributeNamesBegin(self)
    def attributeNamesEnd(self): return _Myoushu.GameLogEntity_attributeNamesEnd(self)
    def keyAttributesBegin(self): return _Myoushu.GameLogEntity_keyAttributesBegin(self)
    def keyAttributesEnd(self): return _Myoushu.GameLogEntity_keyAttributesEnd(self)
    def getPrimaryKeys(self, *args): return _Myoushu.GameLogEntity_getPrimaryKeys(self, *args)
    def readEntry(self, *args): return _Myoushu.GameLogEntity_readEntry(self, *args)
    def checkRead(self, *args): return _Myoushu.GameLogEntity_checkRead(self, *args)
    def commit(self): return _Myoushu.GameLogEntity_commit(self)
    def checkCommit(self): return _Myoushu.GameLogEntity_checkCommit(self)
    def update(self, overwrite = False): return _Myoushu.GameLogEntity_update(self, overwrite)
    def checkUpdate(self): return _Myoushu.GameLogEntity_checkUpdate(self)
GameLogEntity_swigregister = _Myoushu.GameLogEntity_swigregister
GameLogEntity_swigregister(GameLogEntity)

class SQLiteGameLogEntity(GameLogEntity,NamedObject_SQLiteGameLogEntity):
    __swig_setmethods__ = {}
    for _s in [GameLogEntity,NamedObject_SQLiteGameLogEntity]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SQLiteGameLogEntity, name, value)
    __swig_getmethods__ = {}
    for _s in [GameLogEntity,NamedObject_SQLiteGameLogEntity]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SQLiteGameLogEntity, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_SQLiteGameLogEntity(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_SQLiteGameLogEntity
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.SQLiteGameLogEntity_getClassName(self)
    def castPtr(self, *args): return _Myoushu.SQLiteGameLogEntity_castPtr(self, *args)
    def readEntry(self, *args): return _Myoushu.SQLiteGameLogEntity_readEntry(self, *args)
    def checkRead(self, *args): return _Myoushu.SQLiteGameLogEntity_checkRead(self, *args)
    def readCompleted(self, *args): return _Myoushu.SQLiteGameLogEntity_readCompleted(self, *args)
    def commit(self): return _Myoushu.SQLiteGameLogEntity_commit(self)
    def checkCommit(self): return _Myoushu.SQLiteGameLogEntity_checkCommit(self)
    def commitCompleted(self): return _Myoushu.SQLiteGameLogEntity_commitCompleted(self)
    def update(self, overwrite = False): return _Myoushu.SQLiteGameLogEntity_update(self, overwrite)
    def checkUpdate(self): return _Myoushu.SQLiteGameLogEntity_checkUpdate(self)
    def updateCompleted(self): return _Myoushu.SQLiteGameLogEntity_updateCompleted(self)
SQLiteGameLogEntity_swigregister = _Myoushu.SQLiteGameLogEntity_swigregister
SQLiteGameLogEntity_swigregister(SQLiteGameLogEntity)

class GameLogManager(NamedObjectFactory_GameLogEntity):
    __swig_setmethods__ = {}
    for _s in [NamedObjectFactory_GameLogEntity]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameLogManager, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectFactory_GameLogEntity]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GameLogManager, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Myoushu.delete_GameLogManager
    __del__ = lambda self : None;
    def addEntity(self, *args): return _Myoushu.GameLogManager_addEntity(self, *args)
    def makeEntity(self, *args): return _Myoushu.GameLogManager_makeEntity(self, *args)
    def getEntity(self, *args): return _Myoushu.GameLogManager_getEntity(self, *args)
    def readEntity(self, *args): return _Myoushu.GameLogManager_readEntity(self, *args)
    def checkRead(self, *args): return _Myoushu.GameLogManager_checkRead(self, *args)
    def commit(self): return _Myoushu.GameLogManager_commit(self)
    def checkCommit(self): return _Myoushu.GameLogManager_checkCommit(self)
    def update(self): return _Myoushu.GameLogManager_update(self)
    def checkUpdate(self): return _Myoushu.GameLogManager_checkUpdate(self)
GameLogManager_swigregister = _Myoushu.GameLogManager_swigregister
GameLogManager_swigregister(GameLogManager)

class SQLiteGameLogManager(GameLogManager,Singleton_SQLiteGameLogManager):
    __swig_setmethods__ = {}
    for _s in [GameLogManager,Singleton_SQLiteGameLogManager]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SQLiteGameLogManager, name, value)
    __swig_getmethods__ = {}
    for _s in [GameLogManager,Singleton_SQLiteGameLogManager]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SQLiteGameLogManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_SQLiteGameLogManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_SQLiteGameLogManager
    __del__ = lambda self : None;
    def make(self, *args): return _Myoushu.SQLiteGameLogManager_make(self, *args)
    def makeEntity(self, *args): return _Myoushu.SQLiteGameLogManager_makeEntity(self, *args)
    def readEntity(self, *args): return _Myoushu.SQLiteGameLogManager_readEntity(self, *args)
    def checkRead(self, *args): return _Myoushu.SQLiteGameLogManager_checkRead(self, *args)
    def readCompleted(self, *args): return _Myoushu.SQLiteGameLogManager_readCompleted(self, *args)
    def commit(self): return _Myoushu.SQLiteGameLogManager_commit(self)
    def checkCommit(self): return _Myoushu.SQLiteGameLogManager_checkCommit(self)
    def commitCompleted(self): return _Myoushu.SQLiteGameLogManager_commitCompleted(self)
    def update(self): return _Myoushu.SQLiteGameLogManager_update(self)
    def checkUpdate(self): return _Myoushu.SQLiteGameLogManager_checkUpdate(self)
    def updateCompleted(self): return _Myoushu.SQLiteGameLogManager_updateCompleted(self)
SQLiteGameLogManager_swigregister = _Myoushu.SQLiteGameLogManager_swigregister
SQLiteGameLogManager_swigregister(SQLiteGameLogManager)

class Replay(NamedInstance,NamedObject_Replay,RefCountedObject):
    __swig_setmethods__ = {}
    for _s in [NamedInstance,NamedObject_Replay,RefCountedObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Replay, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedInstance,NamedObject_Replay,RefCountedObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Replay, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_Replay(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Replay
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.Replay_getClassName(self)
    def castPtr(self, *args): return _Myoushu.Replay_castPtr(self, *args)
    def openForWriting(self, group = "", overwrite = True): return _Myoushu.Replay_openForWriting(self, group, overwrite)
    def openForPlayback(self, *args): return _Myoushu.Replay_openForPlayback(self, *args)
    def write(self, *args): return _Myoushu.Replay_write(self, *args)
    def play(self, *args): return _Myoushu.Replay_play(self, *args)
    def reset(self): return _Myoushu.Replay_reset(self)
    def close(self): return _Myoushu.Replay_close(self)
    def serialize(self, *args): return _Myoushu.Replay_serialize(self, *args)
    def populateInstance(self, *args): return _Myoushu.Replay_populateInstance(self, *args)
Replay_swigregister = _Myoushu.Replay_swigregister
Replay_swigregister(Replay)

class ReplayMessage(Message):
    __swig_setmethods__ = {}
    for _s in [Message]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReplayMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [Message]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReplayMessage, name)
    __repr__ = _swig_repr
    RM_UNKNOWN = _Myoushu.ReplayMessage_RM_UNKNOWN
    RM_START_RECORDING = _Myoushu.ReplayMessage_RM_START_RECORDING
    RM_START_PLAYBACK = _Myoushu.ReplayMessage_RM_START_PLAYBACK
    RM_STOP = _Myoushu.ReplayMessage_RM_STOP
    RM_PAUSE = _Myoushu.ReplayMessage_RM_PAUSE
    RM_RESUME = _Myoushu.ReplayMessage_RM_RESUME
    def __init__(self, *args): 
        this = _Myoushu.new_ReplayMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ReplayMessage
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.ReplayMessage_getClassName(self)
    def castPtr(self, *args): return _Myoushu.ReplayMessage_castPtr(self, *args)
    def getMessageType(self): return _Myoushu.ReplayMessage_getMessageType(self)
    def setMessageType(self, *args): return _Myoushu.ReplayMessage_setMessageType(self, *args)
    def getReplayName(self): return _Myoushu.ReplayMessage_getReplayName(self)
    def setReplayName(self, *args): return _Myoushu.ReplayMessage_setReplayName(self, *args)
    def getReplay(self): return _Myoushu.ReplayMessage_getReplay(self)
    def setReplay(self, *args): return _Myoushu.ReplayMessage_setReplay(self, *args)
    def clear(self): return _Myoushu.ReplayMessage_clear(self)
    def clone(self): return _Myoushu.ReplayMessage_clone(self)
ReplayMessage_swigregister = _Myoushu.ReplayMessage_swigregister
ReplayMessage_swigregister(ReplayMessage)

class ReplayFactory(NamedObjectFactory_Replay,Singleton_ReplayFactory):
    __swig_setmethods__ = {}
    for _s in [NamedObjectFactory_Replay,Singleton_ReplayFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReplayFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectFactory_Replay,Singleton_ReplayFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReplayFactory, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_ReplayFactory()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ReplayFactory
    __del__ = lambda self : None;
    def findByName(self, *args): return _Myoushu.ReplayFactory_findByName(self, *args)
    def make(self, *args): return _Myoushu.ReplayFactory_make(self, *args)
ReplayFactory_swigregister = _Myoushu.ReplayFactory_swigregister
ReplayFactory_swigregister(ReplayFactory)

class ReplayTaskManager(Singleton_ReplayTaskManager):
    __swig_setmethods__ = {}
    for _s in [Singleton_ReplayTaskManager]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReplayTaskManager, name, value)
    __swig_getmethods__ = {}
    for _s in [Singleton_ReplayTaskManager]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReplayTaskManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_ReplayTaskManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ReplayTaskManager
    __del__ = lambda self : None;
    def play(self, *args): return _Myoushu.ReplayTaskManager_play(self, *args)
    def record(self, *args): return _Myoushu.ReplayTaskManager_record(self, *args)
    def pause(self): return _Myoushu.ReplayTaskManager_pause(self)
    def stop(self): return _Myoushu.ReplayTaskManager_stop(self)
ReplayTaskManager_swigregister = _Myoushu.ReplayTaskManager_swigregister
ReplayTaskManager_swigregister(ReplayTaskManager)

class ReplayTask(Task):
    __swig_setmethods__ = {}
    for _s in [Task]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReplayTask, name, value)
    __swig_getmethods__ = {}
    for _s in [Task]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReplayTask, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_ReplayTask(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ReplayTask
    __del__ = lambda self : None;
    def getClassName(self): return _Myoushu.ReplayTask_getClassName(self)
    def castPtr(self, *args): return _Myoushu.ReplayTask_castPtr(self, *args)
    def init(self): return _Myoushu.ReplayTask_init(self)
    def suspend(self): return _Myoushu.ReplayTask_suspend(self)
    def execute(self, *args): return _Myoushu.ReplayTask_execute(self, *args)
    def kill(self): return _Myoushu.ReplayTask_kill(self)
    def getPlaying(self): return _Myoushu.ReplayTask_getPlaying(self)
    def getRecording(self): return _Myoushu.ReplayTask_getRecording(self)
    def getPaused(self): return _Myoushu.ReplayTask_getPaused(self)
    def getReplay(self): return _Myoushu.ReplayTask_getReplay(self)
    def receiveReplayMessage(self, *args): return _Myoushu.ReplayTask_receiveReplayMessage(self, *args)
    def receiveInputMessage(self, *args): return _Myoushu.ReplayTask_receiveInputMessage(self, *args)
ReplayTask_swigregister = _Myoushu.ReplayTask_swigregister
ReplayTask_swigregister(ReplayTask)

class RandomBase(Serializable):
    __swig_setmethods__ = {}
    for _s in [Serializable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RandomBase, name, value)
    __swig_getmethods__ = {}
    for _s in [Serializable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RandomBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def seed(self, *args): return _Myoushu.RandomBase_seed(self, *args)
    def generate(self, *args): return _Myoushu.RandomBase_generate(self, *args)
    def generateDouble(self, *args): return _Myoushu.RandomBase_generateDouble(self, *args)
    __swig_destroy__ = _Myoushu.delete_RandomBase
    __del__ = lambda self : None;
RandomBase_swigregister = _Myoushu.RandomBase_swigregister
RandomBase_swigregister(RandomBase)

class MTRandom(RandomBase):
    __swig_setmethods__ = {}
    for _s in [RandomBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MTRandom, name, value)
    __swig_getmethods__ = {}
    for _s in [RandomBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MTRandom, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_MTRandom(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_MTRandom
    __del__ = lambda self : None;
    def seed(self, *args): return _Myoushu.MTRandom_seed(self, *args)
    def generate(self, *args): return _Myoushu.MTRandom_generate(self, *args)
    def generateDouble(self, *args): return _Myoushu.MTRandom_generateDouble(self, *args)
    def getIndex(self): return _Myoushu.MTRandom_getIndex(self)
    def serialize(self, *args): return _Myoushu.MTRandom_serialize(self, *args)
    def populateInstance(self, *args): return _Myoushu.MTRandom_populateInstance(self, *args)
MTRandom_swigregister = _Myoushu.MTRandom_swigregister
MTRandom_swigregister(MTRandom)
MTRandom.W = _Myoushu.cvar.MTRandom_W
MTRandom.N = _Myoushu.cvar.MTRandom_N
MTRandom.M = _Myoushu.cvar.MTRandom_M
MTRandom.R = _Myoushu.cvar.MTRandom_R
MTRandom.A = _Myoushu.cvar.MTRandom_A
MTRandom.U = _Myoushu.cvar.MTRandom_U
MTRandom.S = _Myoushu.cvar.MTRandom_S
MTRandom.B = _Myoushu.cvar.MTRandom_B
MTRandom.T = _Myoushu.cvar.MTRandom_T
MTRandom.C = _Myoushu.cvar.MTRandom_C
MTRandom.L = _Myoushu.cvar.MTRandom_L

class Random(MTRandom,Singleton_Random):
    __swig_setmethods__ = {}
    for _s in [MTRandom,Singleton_Random]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Random, name, value)
    __swig_getmethods__ = {}
    for _s in [MTRandom,Singleton_Random]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Random, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Myoushu.new_Random(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Random
    __del__ = lambda self : None;
Random_swigregister = _Myoushu.Random_swigregister
Random_swigregister(Random)

class ContentImporterFactory(NamedObjectFactory_ContentImporter):
    __swig_setmethods__ = {}
    for _s in [NamedObjectFactory_ContentImporter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContentImporterFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectFactory_ContentImporter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContentImporterFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(self, *args): return _Myoushu.ContentImporterFactory_make(self, *args)
    __swig_destroy__ = _Myoushu.delete_ContentImporterFactory
    __del__ = lambda self : None;
ContentImporterFactory_swigregister = _Myoushu.ContentImporterFactory_swigregister
ContentImporterFactory_swigregister(ContentImporterFactory)

class ContentImporterManager(Singleton_ContentImporterManager):
    __swig_setmethods__ = {}
    for _s in [Singleton_ContentImporterManager]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContentImporterManager, name, value)
    __swig_getmethods__ = {}
    for _s in [Singleton_ContentImporterManager]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContentImporterManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_ContentImporterManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_ContentImporterManager
    __del__ = lambda self : None;
    def registerContentImporterFactory(self, *args): return _Myoushu.ContentImporterManager_registerContentImporterFactory(self, *args)
    def unregisterContentImporterFactory(self, *args): return _Myoushu.ContentImporterManager_unregisterContentImporterFactory(self, *args)
    def make(self, *args): return _Myoushu.ContentImporterManager_make(self, *args)
    def destroy(self, *args): return _Myoushu.ContentImporterManager_destroy(self, *args)
ContentImporterManager_swigregister = _Myoushu.ContentImporterManager_swigregister
ContentImporterManager_swigregister(ContentImporterManager)

class FunctorFactory(NamedObjectFactory_FunctorBase):
    __swig_setmethods__ = {}
    for _s in [NamedObjectFactory_FunctorBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FunctorFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObjectFactory_FunctorBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FunctorFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(self, *args): return _Myoushu.FunctorFactory_make(self, *args)
    __swig_destroy__ = _Myoushu.delete_FunctorFactory
    __del__ = lambda self : None;
FunctorFactory_swigregister = _Myoushu.FunctorFactory_swigregister
FunctorFactory_swigregister(FunctorFactory)

class FunctorManager(Singleton_FunctorManager):
    __swig_setmethods__ = {}
    for _s in [Singleton_FunctorManager]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FunctorManager, name, value)
    __swig_getmethods__ = {}
    for _s in [Singleton_FunctorManager]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FunctorManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_FunctorManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_FunctorManager
    __del__ = lambda self : None;
    def registerFunctorFactory(self, *args): return _Myoushu.FunctorManager_registerFunctorFactory(self, *args)
    def unregisterFunctorFactory(self, *args): return _Myoushu.FunctorManager_unregisterFunctorFactory(self, *args)
    def make(self, *args): return _Myoushu.FunctorManager_make(self, *args)
    def destroy(self, *args): return _Myoushu.FunctorManager_destroy(self, *args)
FunctorManager_swigregister = _Myoushu.FunctorManager_swigregister
FunctorManager_swigregister(FunctorManager)

class Translation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Translation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Translation, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_Translation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_Translation
    __del__ = lambda self : None;
    def loadTranslationFile(self, *args): return _Myoushu.Translation_loadTranslationFile(self, *args)
    def clear(self): return _Myoushu.Translation_clear(self)
    def translate(self, *args): return _Myoushu.Translation_translate(self, *args)
Translation_swigregister = _Myoushu.Translation_swigregister
Translation_swigregister(Translation)

class DefaultTranslation(Translation,Singleton_DefaultTranslation):
    __swig_setmethods__ = {}
    for _s in [Translation,Singleton_DefaultTranslation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultTranslation, name, value)
    __swig_getmethods__ = {}
    for _s in [Translation,Singleton_DefaultTranslation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultTranslation, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Myoushu.new_DefaultTranslation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Myoushu.delete_DefaultTranslation
    __del__ = lambda self : None;
DefaultTranslation_swigregister = _Myoushu.DefaultTranslation_swigregister
DefaultTranslation_swigregister(DefaultTranslation)



